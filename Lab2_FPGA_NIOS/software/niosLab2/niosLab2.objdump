
niosLab2.elf:     file format elf32-littlenios2
niosLab2.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00008020

Program Header:
    LOAD off    0x00001000 vaddr 0x00008000 paddr 0x00008000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00008020 paddr 0x00008020 align 2**12
         filesz 0x000047c0 memsz 0x000047c0 flags r-x
    LOAD off    0x000057e0 vaddr 0x0000c7e0 paddr 0x0000d20c align 2**12
         filesz 0x00000a2c memsz 0x00000a2c flags rw-
    LOAD off    0x00006c38 vaddr 0x0000dc38 paddr 0x0000dc38 align 2**12
         filesz 0x00000000 memsz 0x00000044 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00008000  00008000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000000  00008020  00008020  0000620c  2**0
                  CONTENTS
  2 .text         00004778  00008020  00008020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000048  0000c798  0000c798  00005798  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00000a2c  0000c7e0  0000d20c  000057e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000044  0000dc38  0000dc38  00006c38  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory2_0 00000000  0000dc7c  0000dc7c  0000620c  2**0
                  CONTENTS
  7 .comment      0000002c  00000000  00000000  0000620c  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 000008d0  00000000  00000000  00006238  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   0002bdaf  00000000  00000000  00006b08  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00008d08  00000000  00000000  000328b7  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0000ad1b  00000000  00000000  0003b5bf  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  0000123c  00000000  00000000  000462dc  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0000248d  00000000  00000000  00047518  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00005f5a  00000000  00000000  000499a5  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000040  00000000  00000000  0004f900  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000006b8  00000000  00000000  0004f940  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  00051fbe  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000c  00000000  00000000  00051fc1  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  00051fcd  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  00051fce  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   0000000b  00000000  00000000  00051fcf  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    0000000b  00000000  00000000  00051fda  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   0000000b  00000000  00000000  00051fe5  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 00000008  00000000  00000000  00051ff0  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 0000003a  00000000  00000000  00051ff8  2**0
                  CONTENTS, READONLY
 26 .jdi          00004e8b  00000000  00000000  00052032  2**0
                  CONTENTS, READONLY
 27 .sopcinfo     00032892  00000000  00000000  00056ebd  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00008000 l    d  .entry	00000000 .entry
00008020 l    d  .exceptions	00000000 .exceptions
00008020 l    d  .text	00000000 .text
0000c798 l    d  .rodata	00000000 .rodata
0000c7e0 l    d  .rwdata	00000000 .rwdata
0000dc38 l    d  .bss	00000000 .bss
0000dc7c l    d  .onchip_memory2_0	00000000 .onchip_memory2_0
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../niosLab2_bsp//obj/HAL/src/crt0.o
00008058 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 hello_world.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 findfp.c
00008270 l     F .text	00000008 __fp_lock
00008284 l     F .text	00000168 __sinit.part.0
000083ec l     F .text	00000008 __fp_unlock
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
0000c7e0 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 alt_close.c
0000aecc l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0000afe4 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0000b010 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
0000b108 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0000b1f4 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0000b2e0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
0000b4c0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
0000d208 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
0000b754 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
0000b894 l     F .text	00000034 alt_dev_reg
0000d1b4 l     O .rwdata	0000002c jtag_uart_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0000bcec l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0000beac l     F .text	000000d4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_open.c
0000bffc l     F .text	0000003c alt_get_errno
0000c038 l     F .text	000000dc alt_file_locked
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
0000ac94 g     F .text	00000058 _isatty_r
0000b3fc g     F .text	0000007c alt_main
000080fc g     F .text	000000cc _puts_r
0000a998 g     F .text	00000064 _lseek_r
0000d20c g       *ABS*	00000000 __flash_rwdata_start
0000dc7c g       *ABS*	00000000 __alt_heap_start
00009f48 g     F .text	0000005c __sseek
0000857c g     F .text	00000010 __sinit
000083f4 g     F .text	00000078 __sfmoreglue
0000b49c g     F .text	00000024 __malloc_unlock
000095cc g     F .text	0000012c memmove
00008568 g     F .text	00000014 _cleanup
0000c274 g     F .text	00000024 altera_nios2_gen2_irq_init
00008000 g     F .entry	0000000c __reset
00008020 g       *ABS*	00000000 __flash_exceptions_start
0000ac34 g     F .text	00000060 _fstat_r
0000dc44 g     O .bss	00000004 errno
00009ec0 g     F .text	00000008 __seofread
0000dc4c g     O .bss	00000004 alt_argv
000151e0 g       *ABS*	00000000 _gp
0000b724 g     F .text	00000030 usleep
0000d034 g     O .rwdata	00000180 alt_fd_list
0000c298 g     F .text	00000090 alt_find_dev
000094cc g     F .text	00000100 memcpy
00008278 g     F .text	0000000c _cleanup_r
0000bf80 g     F .text	0000007c alt_io_redirect
0000c798 g       *ABS*	00000000 __DTOR_END__
000081c8 g     F .text	00000010 puts
0000b9f4 g     F .text	000000ec altera_avalon_jtag_uart_read
00008000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
0000ade4 g     F .text	00000064 .hidden __udivsi3
0000b144 g     F .text	000000b0 isatty
0000dc40 g     O .bss	00000004 __malloc_top_pad
000085c4 g     F .text	000004d4 __sfvwrite_r
00009e14 g     F .text	00000058 _sbrk_r
0000abd0 g     F .text	00000064 _read_r
0000d200 g     O .rwdata	00000004 alt_max_fd
0000a1c8 g     F .text	000000f8 _fclose_r
0000a558 g     F .text	00000028 fflush
0000dc3c g     O .bss	00000004 __malloc_max_sbrked_mem
0000b31c g     F .text	000000e0 lseek
0000d1e0 g     O .rwdata	00000004 _global_impure_ptr
000097e8 g     F .text	0000062c _realloc_r
0000dc7c g       *ABS*	00000000 __bss_end
0000859c g     F .text	00000014 __fp_lock_all
0000d00c g     O .rwdata	00000028 alt_dev_null
0000bccc g     F .text	00000020 alt_dcache_flush_all
0000d20c g       *ABS*	00000000 __ram_rwdata_end
0000d1f8 g     O .rwdata	00000008 alt_dev_list
0000b790 g     F .text	00000104 write
0000c7e0 g       *ABS*	00000000 __ram_rodata_end
0000b04c g     F .text	000000bc fstat
0000ae48 g     F .text	0000005c .hidden __umodsi3
0000dc7c g       *ABS*	00000000 end
0000c798 g       *ABS*	00000000 __CTOR_LIST__
00010000 g       *ABS*	00000000 __alt_stack_pointer
0000bae0 g     F .text	00000094 altera_avalon_jtag_uart_write
0000858c g     F .text	00000004 __sfp_lock_acquire
000093e4 g     F .text	000000e8 memchr
0000a69c g     F .text	000002fc _free_r
0000c64c g     F .text	00000118 __call_exitprocs
0000d1e8 g     O .rwdata	00000004 __malloc_sbrk_base
00008020 g     F .text	0000003c _start
0000b4fc g     F .text	00000108 read
0000b900 g     F .text	00000034 alt_sys_init
0000c5bc g     F .text	00000090 __register_exitproc
0000aea4 g     F .text	00000028 .hidden __mulsi3
0000c7e0 g       *ABS*	00000000 __ram_rwdata_start
0000c798 g       *ABS*	00000000 __ram_rodata_start
0000dc54 g     O .bss	00000028 __malloc_current_mallinfo
0000b934 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
0000c430 g     F .text	000000b8 alt_get_fd
0000bb74 g     F .text	00000158 alt_busy_sleep
0000a170 g     F .text	00000058 _close_r
0000c530 g     F .text	0000008c memcmp
0000dc7c g       *ABS*	00000000 __alt_stack_base
0000a010 g     F .text	00000160 __swsetup_r
0000846c g     F .text	000000fc __sfp
0000cc04 g     O .rwdata	00000408 __malloc_av_
00008598 g     F .text	00000004 __sinit_lock_release
00009e6c g     F .text	00000054 __sread
0000c328 g     F .text	00000108 alt_find_file
0000bd28 g     F .text	000000a4 alt_dev_llist_insert
0000b478 g     F .text	00000024 __malloc_lock
0000b674 g     F .text	000000b0 sbrk
0000a4f8 g     F .text	00000060 _fflush_r
0000dc38 g       *ABS*	00000000 __bss_start
000096f8 g     F .text	000000f0 memset
000080a0 g     F .text	0000005c main
0000dc50 g     O .bss	00000004 alt_envp
0000dc38 g     O .bss	00000004 __malloc_max_total_mem
0000b994 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
00009fa4 g     F .text	00000008 __sclose
00010000 g       *ABS*	00000000 __alt_heap_limit
0000a2c0 g     F .text	00000010 fclose
00008bf0 g     F .text	000007f4 _malloc_r
0000d204 g     O .rwdata	00000004 alt_errno
00008a98 g     F .text	000000a4 _fwalk
0000acec g     F .text	00000080 .hidden __divsi3
0000a580 g     F .text	0000011c _malloc_trim_r
0000c798 g       *ABS*	00000000 __CTOR_END__
0000c798 g       *ABS*	00000000 __flash_rodata_start
0000c798 g       *ABS*	00000000 __DTOR_LIST__
0000805c g     F .text	00000044 delay
0000b8c8 g     F .text	00000038 alt_irq_init
0000b604 g     F .text	00000070 alt_release_fd
0000c4e8 g     F .text	00000014 atexit
00009fac g     F .text	00000064 _write_r
0000d1e4 g     O .rwdata	00000004 _impure_ptr
0000dc48 g     O .bss	00000004 alt_argc
0000a2d0 g     F .text	00000228 __sflush_r
0000be2c g     F .text	00000060 _do_dtors
000085b0 g     F .text	00000014 __fp_unlock_all
0000d1f0 g     O .rwdata	00000008 alt_fs_list
00008020 g       *ABS*	00000000 __ram_exceptions_start
0000a9fc g     F .text	00000098 __swhatbuf_r
0000d20c g       *ABS*	00000000 _edata
0000dc7c g       *ABS*	00000000 _end
00008020 g       *ABS*	00000000 __ram_exceptions_end
00009ec8 g     F .text	00000080 __swrite
0000d1ec g     O .rwdata	00000004 __malloc_trim_threshold
0000c4fc g     F .text	00000034 exit
00008b3c g     F .text	000000b4 _fwalk_reent
0000ad6c g     F .text	00000078 .hidden __modsi3
00010000 g       *ABS*	00000000 __alt_data_end
00008590 g     F .text	00000004 __sfp_lock_release
0000c764 g     F .text	00000034 _exit
0000aa94 g     F .text	0000013c __smakebuf_r
000081d8 g     F .text	00000098 strlen
0000c114 g     F .text	00000160 open
0000be8c g     F .text	00000020 alt_icache_flush_all
0000bdcc g     F .text	00000060 _do_ctors
0000af08 g     F .text	000000dc close
0000b25c g     F .text	00000084 alt_load
00008594 g     F .text	00000004 __sinit_lock_acquire



Disassembly of section .entry:

00008000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
    8000:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
    8004:	08600814 	ori	at,at,32800
    jmp r1
    8008:	0800683a 	jmp	at
	...

Disassembly of section .text:

00008020 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
    8020:	06c00074 	movhi	sp,1
    ori sp, sp, %lo(__alt_stack_pointer)
    8024:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
    8028:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
    802c:	d6947814 	ori	gp,gp,20960
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
    8030:	00800034 	movhi	r2,0
    ori r2, r2, %lo(__bss_start)
    8034:	10b70e14 	ori	r2,r2,56376

    movhi r3, %hi(__bss_end)
    8038:	00c00034 	movhi	r3,0
    ori r3, r3, %lo(__bss_end)
    803c:	18f71f14 	ori	r3,r3,56444

    beq r2, r3, 1f
    8040:	10c00326 	beq	r2,r3,8050 <_start+0x30>

0:
    stw zero, (r2)
    8044:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
    8048:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
    804c:	10fffd36 	bltu	r2,r3,8044 <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
    8050:	000b25c0 	call	b25c <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
    8054:	000b3fc0 	call	b3fc <alt_main>

00008058 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
    8058:	003fff06 	br	8058 <alt_after_alt_main>

0000805c <delay>:
#include <stdio.h>
#include "system.h"
#include <alt_types.h>
#include <io.h> /* Leiutura e escrita no Avalon */

int delay(int n){
    805c:	defffd04 	addi	sp,sp,-12
    8060:	df000215 	stw	fp,8(sp)
    8064:	df000204 	addi	fp,sp,8
    8068:	e13ffe15 	stw	r4,-8(fp)
      unsigned int delay = 0 ;
    806c:	e03fff15 	stw	zero,-4(fp)
      while(delay < n){
    8070:	00000306 	br	8080 <delay+0x24>
          delay++;
    8074:	e0bfff17 	ldw	r2,-4(fp)
    8078:	10800044 	addi	r2,r2,1
    807c:	e0bfff15 	stw	r2,-4(fp)
      while(delay < n){
    8080:	e0bffe17 	ldw	r2,-8(fp)
    8084:	e0ffff17 	ldw	r3,-4(fp)
    8088:	18bffa36 	bltu	r3,r2,8074 <delay+0x18>
      }
}
    808c:	0001883a 	nop
    8090:	e037883a 	mov	sp,fp
    8094:	df000017 	ldw	fp,0(sp)
    8098:	dec00104 	addi	sp,sp,4
    809c:	f800283a 	ret

000080a0 <main>:

int main(void){
    80a0:	defffd04 	addi	sp,sp,-12
    80a4:	dfc00215 	stw	ra,8(sp)
    80a8:	df000115 	stw	fp,4(sp)
    80ac:	df000104 	addi	fp,sp,4
  unsigned int led = 0;
    80b0:	e03fff15 	stw	zero,-4(fp)

  printf("Embarcados++ \n");
    80b4:	01000074 	movhi	r4,1
    80b8:	2131e604 	addi	r4,r4,-14440
    80bc:	00081c80 	call	81c8 <puts>

  while(1){
      if (led <= 5){
    80c0:	e0bfff17 	ldw	r2,-4(fp)
    80c4:	108001a8 	cmpgeui	r2,r2,6
    80c8:	10000a1e 	bne	r2,zero,80f4 <main+0x54>
          IOWR_32DIRECT(PIO_0_BASE, 0, 0x01 << led++);
    80cc:	e0bfff17 	ldw	r2,-4(fp)
    80d0:	10c00044 	addi	r3,r2,1
    80d4:	e0ffff15 	stw	r3,-4(fp)
    80d8:	00c00044 	movi	r3,1
    80dc:	1886983a 	sll	r3,r3,r2
    80e0:	00800074 	movhi	r2,1
    80e4:	10c40035 	stwio	r3,4096(r2)
          usleep(50000);
    80e8:	0130d414 	movui	r4,50000
    80ec:	000b7240 	call	b724 <usleep>
    80f0:	003ff306 	br	80c0 <main+0x20>
      }
      else{
          led = 0;
    80f4:	e03fff15 	stw	zero,-4(fp)
      if (led <= 5){
    80f8:	003ff106 	br	80c0 <main+0x20>

000080fc <_puts_r>:
    80fc:	defff504 	addi	sp,sp,-44
    8100:	dc000815 	stw	r16,32(sp)
    8104:	2021883a 	mov	r16,r4
    8108:	2809883a 	mov	r4,r5
    810c:	dc400915 	stw	r17,36(sp)
    8110:	dfc00a15 	stw	ra,40(sp)
    8114:	2823883a 	mov	r17,r5
    8118:	00081d80 	call	81d8 <strlen>
    811c:	11000044 	addi	r4,r2,1
    8120:	d8800515 	stw	r2,20(sp)
    8124:	00800044 	movi	r2,1
    8128:	00c00074 	movhi	r3,1
    812c:	d8800715 	stw	r2,28(sp)
    8130:	d8800404 	addi	r2,sp,16
    8134:	18f1ea04 	addi	r3,r3,-14424
    8138:	d8800115 	stw	r2,4(sp)
    813c:	00800084 	movi	r2,2
    8140:	dc400415 	stw	r17,16(sp)
    8144:	d8c00615 	stw	r3,24(sp)
    8148:	d9000315 	stw	r4,12(sp)
    814c:	d8800215 	stw	r2,8(sp)
    8150:	81400217 	ldw	r5,8(r16)
    8154:	80000226 	beq	r16,zero,8160 <_puts_r+0x64>
    8158:	80800e17 	ldw	r2,56(r16)
    815c:	10001326 	beq	r2,zero,81ac <_puts_r+0xb0>
    8160:	2880030b 	ldhu	r2,12(r5)
    8164:	10c8000c 	andi	r3,r2,8192
    8168:	1800061e 	bne	r3,zero,8184 <_puts_r+0x88>
    816c:	28c01917 	ldw	r3,100(r5)
    8170:	0137ffc4 	movi	r4,-8193
    8174:	10880014 	ori	r2,r2,8192
    8178:	1906703a 	and	r3,r3,r4
    817c:	2880030d 	sth	r2,12(r5)
    8180:	28c01915 	stw	r3,100(r5)
    8184:	d9800104 	addi	r6,sp,4
    8188:	8009883a 	mov	r4,r16
    818c:	00085c40 	call	85c4 <__sfvwrite_r>
    8190:	10000b1e 	bne	r2,zero,81c0 <_puts_r+0xc4>
    8194:	00800284 	movi	r2,10
    8198:	dfc00a17 	ldw	ra,40(sp)
    819c:	dc400917 	ldw	r17,36(sp)
    81a0:	dc000817 	ldw	r16,32(sp)
    81a4:	dec00b04 	addi	sp,sp,44
    81a8:	f800283a 	ret
    81ac:	8009883a 	mov	r4,r16
    81b0:	d9400015 	stw	r5,0(sp)
    81b4:	000857c0 	call	857c <__sinit>
    81b8:	d9400017 	ldw	r5,0(sp)
    81bc:	003fe806 	br	8160 <_puts_r+0x64>
    81c0:	00bfffc4 	movi	r2,-1
    81c4:	003ff406 	br	8198 <_puts_r+0x9c>

000081c8 <puts>:
    81c8:	00800074 	movhi	r2,1
    81cc:	200b883a 	mov	r5,r4
    81d0:	11347917 	ldw	r4,-11804(r2)
    81d4:	00080fc1 	jmpi	80fc <_puts_r>

000081d8 <strlen>:
    81d8:	208000cc 	andi	r2,r4,3
    81dc:	10002026 	beq	r2,zero,8260 <strlen+0x88>
    81e0:	20800007 	ldb	r2,0(r4)
    81e4:	10002026 	beq	r2,zero,8268 <strlen+0x90>
    81e8:	2005883a 	mov	r2,r4
    81ec:	00000206 	br	81f8 <strlen+0x20>
    81f0:	10c00007 	ldb	r3,0(r2)
    81f4:	18001826 	beq	r3,zero,8258 <strlen+0x80>
    81f8:	10800044 	addi	r2,r2,1
    81fc:	10c000cc 	andi	r3,r2,3
    8200:	183ffb1e 	bne	r3,zero,81f0 <strlen+0x18>
    8204:	11400017 	ldw	r5,0(r2)
    8208:	01ffbff4 	movhi	r7,65279
    820c:	39ffbfc4 	addi	r7,r7,-257
    8210:	29c7883a 	add	r3,r5,r7
    8214:	01a02074 	movhi	r6,32897
    8218:	014a303a 	nor	r5,zero,r5
    821c:	1946703a 	and	r3,r3,r5
    8220:	31a02004 	addi	r6,r6,-32640
    8224:	1986703a 	and	r3,r3,r6
    8228:	1800091e 	bne	r3,zero,8250 <strlen+0x78>
    822c:	10800104 	addi	r2,r2,4
    8230:	11400017 	ldw	r5,0(r2)
    8234:	29c7883a 	add	r3,r5,r7
    8238:	014a303a 	nor	r5,zero,r5
    823c:	1946703a 	and	r3,r3,r5
    8240:	1986703a 	and	r3,r3,r6
    8244:	183ff926 	beq	r3,zero,822c <strlen+0x54>
    8248:	00000106 	br	8250 <strlen+0x78>
    824c:	10800044 	addi	r2,r2,1
    8250:	10c00007 	ldb	r3,0(r2)
    8254:	183ffd1e 	bne	r3,zero,824c <strlen+0x74>
    8258:	1105c83a 	sub	r2,r2,r4
    825c:	f800283a 	ret
    8260:	2005883a 	mov	r2,r4
    8264:	003fe706 	br	8204 <strlen+0x2c>
    8268:	0005883a 	mov	r2,zero
    826c:	f800283a 	ret

00008270 <__fp_lock>:
    8270:	0005883a 	mov	r2,zero
    8274:	f800283a 	ret

00008278 <_cleanup_r>:
    8278:	01400074 	movhi	r5,1
    827c:	29687204 	addi	r5,r5,-24120
    8280:	0008b3c1 	jmpi	8b3c <_fwalk_reent>

00008284 <__sinit.part.0>:
    8284:	00c00074 	movhi	r3,1
    8288:	20800117 	ldw	r2,4(r4)
    828c:	18e09e04 	addi	r3,r3,-32136
    8290:	20c00f15 	stw	r3,60(r4)
    8294:	2140bb04 	addi	r5,r4,748
    8298:	00c000c4 	movi	r3,3
    829c:	20c0b915 	stw	r3,740(r4)
    82a0:	2140ba15 	stw	r5,744(r4)
    82a4:	2000b815 	stw	zero,736(r4)
    82a8:	10001705 	stb	zero,92(r2)
    82ac:	10001745 	stb	zero,93(r2)
    82b0:	10001785 	stb	zero,94(r2)
    82b4:	100017c5 	stb	zero,95(r2)
    82b8:	10001805 	stb	zero,96(r2)
    82bc:	10001845 	stb	zero,97(r2)
    82c0:	10001885 	stb	zero,98(r2)
    82c4:	100018c5 	stb	zero,99(r2)
    82c8:	00c00104 	movi	r3,4
    82cc:	10c00315 	stw	r3,12(r2)
    82d0:	02000074 	movhi	r8,1
    82d4:	20c00217 	ldw	r3,8(r4)
    82d8:	01c00074 	movhi	r7,1
    82dc:	01800074 	movhi	r6,1
    82e0:	01400074 	movhi	r5,1
    82e4:	42279b04 	addi	r8,r8,-24980
    82e8:	39e7b204 	addi	r7,r7,-24888
    82ec:	31a7d204 	addi	r6,r6,-24760
    82f0:	2967e904 	addi	r5,r5,-24668
    82f4:	02400074 	movhi	r9,1
    82f8:	10001915 	stw	zero,100(r2)
    82fc:	10000015 	stw	zero,0(r2)
    8300:	10000115 	stw	zero,4(r2)
    8304:	10000215 	stw	zero,8(r2)
    8308:	10000415 	stw	zero,16(r2)
    830c:	10000515 	stw	zero,20(r2)
    8310:	10000615 	stw	zero,24(r2)
    8314:	10800715 	stw	r2,28(r2)
    8318:	12000815 	stw	r8,32(r2)
    831c:	11c00915 	stw	r7,36(r2)
    8320:	11800a15 	stw	r6,40(r2)
    8324:	11400b15 	stw	r5,44(r2)
    8328:	4a400284 	addi	r9,r9,10
    832c:	1a400315 	stw	r9,12(r3)
    8330:	18001915 	stw	zero,100(r3)
    8334:	18000015 	stw	zero,0(r3)
    8338:	18000115 	stw	zero,4(r3)
    833c:	18000215 	stw	zero,8(r3)
    8340:	18000415 	stw	zero,16(r3)
    8344:	18001705 	stb	zero,92(r3)
    8348:	18001745 	stb	zero,93(r3)
    834c:	18001785 	stb	zero,94(r3)
    8350:	180017c5 	stb	zero,95(r3)
    8354:	18001805 	stb	zero,96(r3)
    8358:	18001845 	stb	zero,97(r3)
    835c:	18001885 	stb	zero,98(r3)
    8360:	180018c5 	stb	zero,99(r3)
    8364:	20800317 	ldw	r2,12(r4)
    8368:	024000b4 	movhi	r9,2
    836c:	18000515 	stw	zero,20(r3)
    8370:	18000615 	stw	zero,24(r3)
    8374:	18c00715 	stw	r3,28(r3)
    8378:	1a000815 	stw	r8,32(r3)
    837c:	19c00915 	stw	r7,36(r3)
    8380:	19800a15 	stw	r6,40(r3)
    8384:	19400b15 	stw	r5,44(r3)
    8388:	4a400484 	addi	r9,r9,18
    838c:	10001915 	stw	zero,100(r2)
    8390:	10000015 	stw	zero,0(r2)
    8394:	10000115 	stw	zero,4(r2)
    8398:	10000215 	stw	zero,8(r2)
    839c:	12400315 	stw	r9,12(r2)
    83a0:	10000415 	stw	zero,16(r2)
    83a4:	10000515 	stw	zero,20(r2)
    83a8:	10000615 	stw	zero,24(r2)
    83ac:	10001705 	stb	zero,92(r2)
    83b0:	10001745 	stb	zero,93(r2)
    83b4:	10001785 	stb	zero,94(r2)
    83b8:	100017c5 	stb	zero,95(r2)
    83bc:	10001805 	stb	zero,96(r2)
    83c0:	10001845 	stb	zero,97(r2)
    83c4:	10001885 	stb	zero,98(r2)
    83c8:	100018c5 	stb	zero,99(r2)
    83cc:	10800715 	stw	r2,28(r2)
    83d0:	12000815 	stw	r8,32(r2)
    83d4:	11c00915 	stw	r7,36(r2)
    83d8:	11800a15 	stw	r6,40(r2)
    83dc:	11400b15 	stw	r5,44(r2)
    83e0:	00800044 	movi	r2,1
    83e4:	20800e15 	stw	r2,56(r4)
    83e8:	f800283a 	ret

000083ec <__fp_unlock>:
    83ec:	0005883a 	mov	r2,zero
    83f0:	f800283a 	ret

000083f4 <__sfmoreglue>:
    83f4:	defffc04 	addi	sp,sp,-16
    83f8:	dc800215 	stw	r18,8(sp)
    83fc:	2825883a 	mov	r18,r5
    8400:	dc000015 	stw	r16,0(sp)
    8404:	01401a04 	movi	r5,104
    8408:	2021883a 	mov	r16,r4
    840c:	913fffc4 	addi	r4,r18,-1
    8410:	dfc00315 	stw	ra,12(sp)
    8414:	dc400115 	stw	r17,4(sp)
    8418:	000aea40 	call	aea4 <__mulsi3>
    841c:	8009883a 	mov	r4,r16
    8420:	11401d04 	addi	r5,r2,116
    8424:	1023883a 	mov	r17,r2
    8428:	0008bf00 	call	8bf0 <_malloc_r>
    842c:	1021883a 	mov	r16,r2
    8430:	10000726 	beq	r2,zero,8450 <__sfmoreglue+0x5c>
    8434:	11000304 	addi	r4,r2,12
    8438:	10000015 	stw	zero,0(r2)
    843c:	14800115 	stw	r18,4(r2)
    8440:	11000215 	stw	r4,8(r2)
    8444:	89801a04 	addi	r6,r17,104
    8448:	000b883a 	mov	r5,zero
    844c:	00096f80 	call	96f8 <memset>
    8450:	8005883a 	mov	r2,r16
    8454:	dfc00317 	ldw	ra,12(sp)
    8458:	dc800217 	ldw	r18,8(sp)
    845c:	dc400117 	ldw	r17,4(sp)
    8460:	dc000017 	ldw	r16,0(sp)
    8464:	dec00404 	addi	sp,sp,16
    8468:	f800283a 	ret

0000846c <__sfp>:
    846c:	defffd04 	addi	sp,sp,-12
    8470:	00800074 	movhi	r2,1
    8474:	dc000015 	stw	r16,0(sp)
    8478:	14347817 	ldw	r16,-11808(r2)
    847c:	dc400115 	stw	r17,4(sp)
    8480:	dfc00215 	stw	ra,8(sp)
    8484:	80800e17 	ldw	r2,56(r16)
    8488:	2023883a 	mov	r17,r4
    848c:	10002b26 	beq	r2,zero,853c <__sfp+0xd0>
    8490:	8400b804 	addi	r16,r16,736
    8494:	80c00117 	ldw	r3,4(r16)
    8498:	80800217 	ldw	r2,8(r16)
    849c:	18ffffc4 	addi	r3,r3,-1
    84a0:	1800050e 	bge	r3,zero,84b8 <__sfp+0x4c>
    84a4:	00002106 	br	852c <__sfp+0xc0>
    84a8:	18ffffc4 	addi	r3,r3,-1
    84ac:	193fffd8 	cmpnei	r4,r3,-1
    84b0:	10801a04 	addi	r2,r2,104
    84b4:	20001d26 	beq	r4,zero,852c <__sfp+0xc0>
    84b8:	1100030f 	ldh	r4,12(r2)
    84bc:	203ffa1e 	bne	r4,zero,84a8 <__sfp+0x3c>
    84c0:	00fffff4 	movhi	r3,65535
    84c4:	18c00044 	addi	r3,r3,1
    84c8:	10001915 	stw	zero,100(r2)
    84cc:	10000015 	stw	zero,0(r2)
    84d0:	10000115 	stw	zero,4(r2)
    84d4:	10000215 	stw	zero,8(r2)
    84d8:	10c00315 	stw	r3,12(r2)
    84dc:	10000415 	stw	zero,16(r2)
    84e0:	10000515 	stw	zero,20(r2)
    84e4:	10000615 	stw	zero,24(r2)
    84e8:	10001705 	stb	zero,92(r2)
    84ec:	10001745 	stb	zero,93(r2)
    84f0:	10001785 	stb	zero,94(r2)
    84f4:	100017c5 	stb	zero,95(r2)
    84f8:	10001805 	stb	zero,96(r2)
    84fc:	10001845 	stb	zero,97(r2)
    8500:	10001885 	stb	zero,98(r2)
    8504:	100018c5 	stb	zero,99(r2)
    8508:	10000c15 	stw	zero,48(r2)
    850c:	10000d15 	stw	zero,52(r2)
    8510:	10001115 	stw	zero,68(r2)
    8514:	10001215 	stw	zero,72(r2)
    8518:	dfc00217 	ldw	ra,8(sp)
    851c:	dc400117 	ldw	r17,4(sp)
    8520:	dc000017 	ldw	r16,0(sp)
    8524:	dec00304 	addi	sp,sp,12
    8528:	f800283a 	ret
    852c:	80800017 	ldw	r2,0(r16)
    8530:	10000526 	beq	r2,zero,8548 <__sfp+0xdc>
    8534:	1021883a 	mov	r16,r2
    8538:	003fd606 	br	8494 <__sfp+0x28>
    853c:	8009883a 	mov	r4,r16
    8540:	00082840 	call	8284 <__sinit.part.0>
    8544:	003fd206 	br	8490 <__sfp+0x24>
    8548:	01400104 	movi	r5,4
    854c:	8809883a 	mov	r4,r17
    8550:	00083f40 	call	83f4 <__sfmoreglue>
    8554:	80800015 	stw	r2,0(r16)
    8558:	103ff61e 	bne	r2,zero,8534 <__sfp+0xc8>
    855c:	00c00304 	movi	r3,12
    8560:	88c00015 	stw	r3,0(r17)
    8564:	003fec06 	br	8518 <__sfp+0xac>

00008568 <_cleanup>:
    8568:	00800074 	movhi	r2,1
    856c:	11347817 	ldw	r4,-11808(r2)
    8570:	01400074 	movhi	r5,1
    8574:	29687204 	addi	r5,r5,-24120
    8578:	0008b3c1 	jmpi	8b3c <_fwalk_reent>

0000857c <__sinit>:
    857c:	20800e17 	ldw	r2,56(r4)
    8580:	10000126 	beq	r2,zero,8588 <__sinit+0xc>
    8584:	f800283a 	ret
    8588:	00082841 	jmpi	8284 <__sinit.part.0>

0000858c <__sfp_lock_acquire>:
    858c:	f800283a 	ret

00008590 <__sfp_lock_release>:
    8590:	f800283a 	ret

00008594 <__sinit_lock_acquire>:
    8594:	f800283a 	ret

00008598 <__sinit_lock_release>:
    8598:	f800283a 	ret

0000859c <__fp_lock_all>:
    859c:	00800074 	movhi	r2,1
    85a0:	11347917 	ldw	r4,-11804(r2)
    85a4:	01400074 	movhi	r5,1
    85a8:	29609c04 	addi	r5,r5,-32144
    85ac:	0008a981 	jmpi	8a98 <_fwalk>

000085b0 <__fp_unlock_all>:
    85b0:	00800074 	movhi	r2,1
    85b4:	11347917 	ldw	r4,-11804(r2)
    85b8:	01400074 	movhi	r5,1
    85bc:	2960fb04 	addi	r5,r5,-31764
    85c0:	0008a981 	jmpi	8a98 <_fwalk>

000085c4 <__sfvwrite_r>:
    85c4:	30800217 	ldw	r2,8(r6)
    85c8:	1000ca26 	beq	r2,zero,88f4 <__sfvwrite_r+0x330>
    85cc:	2880030b 	ldhu	r2,12(r5)
    85d0:	defff304 	addi	sp,sp,-52
    85d4:	dd000715 	stw	r20,28(sp)
    85d8:	dc000315 	stw	r16,12(sp)
    85dc:	dfc00c15 	stw	ra,48(sp)
    85e0:	df000b15 	stw	fp,44(sp)
    85e4:	ddc00a15 	stw	r23,40(sp)
    85e8:	dd800915 	stw	r22,36(sp)
    85ec:	dd400815 	stw	r21,32(sp)
    85f0:	dcc00615 	stw	r19,24(sp)
    85f4:	dc800515 	stw	r18,20(sp)
    85f8:	dc400415 	stw	r17,16(sp)
    85fc:	d9000015 	stw	r4,0(sp)
    8600:	10c0020c 	andi	r3,r2,8
    8604:	2821883a 	mov	r16,r5
    8608:	3029883a 	mov	r20,r6
    860c:	18002426 	beq	r3,zero,86a0 <__sfvwrite_r+0xdc>
    8610:	28c00417 	ldw	r3,16(r5)
    8614:	18002226 	beq	r3,zero,86a0 <__sfvwrite_r+0xdc>
    8618:	10c0008c 	andi	r3,r2,2
    861c:	a4400017 	ldw	r17,0(r20)
    8620:	18002726 	beq	r3,zero,86c0 <__sfvwrite_r+0xfc>
    8624:	80c00917 	ldw	r3,36(r16)
    8628:	80800717 	ldw	r2,28(r16)
    862c:	05600034 	movhi	r21,32768
    8630:	0027883a 	mov	r19,zero
    8634:	0025883a 	mov	r18,zero
    8638:	ad7f0004 	addi	r21,r21,-1024
    863c:	980d883a 	mov	r6,r19
    8640:	100b883a 	mov	r5,r2
    8644:	d9000017 	ldw	r4,0(sp)
    8648:	90001126 	beq	r18,zero,8690 <__sfvwrite_r+0xcc>
    864c:	900f883a 	mov	r7,r18
    8650:	ac80012e 	bgeu	r21,r18,8658 <__sfvwrite_r+0x94>
    8654:	a80f883a 	mov	r7,r21
    8658:	183ee83a 	callr	r3
    865c:	0080a00e 	bge	zero,r2,88e0 <__sfvwrite_r+0x31c>
    8660:	a0c00217 	ldw	r3,8(r20)
    8664:	98a7883a 	add	r19,r19,r2
    8668:	90a5c83a 	sub	r18,r18,r2
    866c:	1885c83a 	sub	r2,r3,r2
    8670:	a0800215 	stw	r2,8(r20)
    8674:	10006426 	beq	r2,zero,8808 <__sfvwrite_r+0x244>
    8678:	80800717 	ldw	r2,28(r16)
    867c:	80c00917 	ldw	r3,36(r16)
    8680:	980d883a 	mov	r6,r19
    8684:	100b883a 	mov	r5,r2
    8688:	d9000017 	ldw	r4,0(sp)
    868c:	903fef1e 	bne	r18,zero,864c <__sfvwrite_r+0x88>
    8690:	8cc00017 	ldw	r19,0(r17)
    8694:	8c800117 	ldw	r18,4(r17)
    8698:	8c400204 	addi	r17,r17,8
    869c:	003fe706 	br	863c <__sfvwrite_r+0x78>
    86a0:	d9000017 	ldw	r4,0(sp)
    86a4:	800b883a 	mov	r5,r16
    86a8:	000a0100 	call	a010 <__swsetup_r>
    86ac:	1000f81e 	bne	r2,zero,8a90 <__sfvwrite_r+0x4cc>
    86b0:	8080030b 	ldhu	r2,12(r16)
    86b4:	a4400017 	ldw	r17,0(r20)
    86b8:	10c0008c 	andi	r3,r2,2
    86bc:	183fd91e 	bne	r3,zero,8624 <__sfvwrite_r+0x60>
    86c0:	10c0004c 	andi	r3,r2,1
    86c4:	84800217 	ldw	r18,8(r16)
    86c8:	87000017 	ldw	fp,0(r16)
    86cc:	18008b1e 	bne	r3,zero,88fc <__sfvwrite_r+0x338>
    86d0:	00e00034 	movhi	r3,32768
    86d4:	18ffff84 	addi	r3,r3,-2
    86d8:	01200034 	movhi	r4,32768
    86dc:	d8c00115 	stw	r3,4(sp)
    86e0:	20ffffc4 	addi	r3,r4,-1
    86e4:	002d883a 	mov	r22,zero
    86e8:	002f883a 	mov	r23,zero
    86ec:	d8c00215 	stw	r3,8(sp)
    86f0:	b8004126 	beq	r23,zero,87f8 <__sfvwrite_r+0x234>
    86f4:	1100800c 	andi	r4,r2,512
    86f8:	20009126 	beq	r4,zero,8940 <__sfvwrite_r+0x37c>
    86fc:	902b883a 	mov	r21,r18
    8700:	bc80b836 	bltu	r23,r18,89e4 <__sfvwrite_r+0x420>
    8704:	1101200c 	andi	r4,r2,1152
    8708:	20002626 	beq	r4,zero,87a4 <__sfvwrite_r+0x1e0>
    870c:	84800517 	ldw	r18,20(r16)
    8710:	81400417 	ldw	r5,16(r16)
    8714:	b9000044 	addi	r4,r23,1
    8718:	948d883a 	add	r6,r18,r18
    871c:	348d883a 	add	r6,r6,r18
    8720:	3024d7fa 	srli	r18,r6,31
    8724:	e167c83a 	sub	r19,fp,r5
    8728:	24c9883a 	add	r4,r4,r19
    872c:	91a5883a 	add	r18,r18,r6
    8730:	9025d07a 	srai	r18,r18,1
    8734:	900d883a 	mov	r6,r18
    8738:	9100022e 	bgeu	r18,r4,8744 <__sfvwrite_r+0x180>
    873c:	2025883a 	mov	r18,r4
    8740:	200d883a 	mov	r6,r4
    8744:	1081000c 	andi	r2,r2,1024
    8748:	1000bf26 	beq	r2,zero,8a48 <__sfvwrite_r+0x484>
    874c:	d9000017 	ldw	r4,0(sp)
    8750:	300b883a 	mov	r5,r6
    8754:	0008bf00 	call	8bf0 <_malloc_r>
    8758:	1000c826 	beq	r2,zero,8a7c <__sfvwrite_r+0x4b8>
    875c:	81400417 	ldw	r5,16(r16)
    8760:	980d883a 	mov	r6,r19
    8764:	1009883a 	mov	r4,r2
    8768:	00094cc0 	call	94cc <memcpy>
    876c:	100f883a 	mov	r7,r2
    8770:	8080030b 	ldhu	r2,12(r16)
    8774:	00fedfc4 	movi	r3,-1153
    8778:	10c4703a 	and	r2,r2,r3
    877c:	10802014 	ori	r2,r2,128
    8780:	8080030d 	sth	r2,12(r16)
    8784:	94c5c83a 	sub	r2,r18,r19
    8788:	3cf9883a 	add	fp,r7,r19
    878c:	84800515 	stw	r18,20(r16)
    8790:	81c00415 	stw	r7,16(r16)
    8794:	87000015 	stw	fp,0(r16)
    8798:	b825883a 	mov	r18,r23
    879c:	80800215 	stw	r2,8(r16)
    87a0:	b82b883a 	mov	r21,r23
    87a4:	a80d883a 	mov	r6,r21
    87a8:	b00b883a 	mov	r5,r22
    87ac:	e009883a 	mov	r4,fp
    87b0:	00095cc0 	call	95cc <memmove>
    87b4:	80800217 	ldw	r2,8(r16)
    87b8:	81800017 	ldw	r6,0(r16)
    87bc:	b827883a 	mov	r19,r23
    87c0:	14a5c83a 	sub	r18,r2,r18
    87c4:	354d883a 	add	r6,r6,r21
    87c8:	84800215 	stw	r18,8(r16)
    87cc:	81800015 	stw	r6,0(r16)
    87d0:	002f883a 	mov	r23,zero
    87d4:	a0800217 	ldw	r2,8(r20)
    87d8:	b4ed883a 	add	r22,r22,r19
    87dc:	14e7c83a 	sub	r19,r2,r19
    87e0:	a4c00215 	stw	r19,8(r20)
    87e4:	98000826 	beq	r19,zero,8808 <__sfvwrite_r+0x244>
    87e8:	8080030b 	ldhu	r2,12(r16)
    87ec:	84800217 	ldw	r18,8(r16)
    87f0:	87000017 	ldw	fp,0(r16)
    87f4:	b83fbf1e 	bne	r23,zero,86f4 <__sfvwrite_r+0x130>
    87f8:	8d800017 	ldw	r22,0(r17)
    87fc:	8dc00117 	ldw	r23,4(r17)
    8800:	8c400204 	addi	r17,r17,8
    8804:	003fba06 	br	86f0 <__sfvwrite_r+0x12c>
    8808:	0005883a 	mov	r2,zero
    880c:	dfc00c17 	ldw	ra,48(sp)
    8810:	df000b17 	ldw	fp,44(sp)
    8814:	ddc00a17 	ldw	r23,40(sp)
    8818:	dd800917 	ldw	r22,36(sp)
    881c:	dd400817 	ldw	r21,32(sp)
    8820:	dd000717 	ldw	r20,28(sp)
    8824:	dcc00617 	ldw	r19,24(sp)
    8828:	dc800517 	ldw	r18,20(sp)
    882c:	dc400417 	ldw	r17,16(sp)
    8830:	dc000317 	ldw	r16,12(sp)
    8834:	dec00d04 	addi	sp,sp,52
    8838:	f800283a 	ret
    883c:	b1c07116 	blt	r22,r7,8a04 <__sfvwrite_r+0x440>
    8840:	80800917 	ldw	r2,36(r16)
    8844:	81400717 	ldw	r5,28(r16)
    8848:	d9000017 	ldw	r4,0(sp)
    884c:	b80d883a 	mov	r6,r23
    8850:	103ee83a 	callr	r2
    8854:	1025883a 	mov	r18,r2
    8858:	0080210e 	bge	zero,r2,88e0 <__sfvwrite_r+0x31c>
    885c:	acabc83a 	sub	r21,r21,r18
    8860:	a8006326 	beq	r21,zero,89f0 <__sfvwrite_r+0x42c>
    8864:	00800044 	movi	r2,1
    8868:	a0c00217 	ldw	r3,8(r20)
    886c:	bcaf883a 	add	r23,r23,r18
    8870:	9ca7c83a 	sub	r19,r19,r18
    8874:	1ca5c83a 	sub	r18,r3,r18
    8878:	a4800215 	stw	r18,8(r20)
    887c:	903fe226 	beq	r18,zero,8808 <__sfvwrite_r+0x244>
    8880:	84800217 	ldw	r18,8(r16)
    8884:	87000017 	ldw	fp,0(r16)
    8888:	98002126 	beq	r19,zero,8910 <__sfvwrite_r+0x34c>
    888c:	10002426 	beq	r2,zero,8920 <__sfvwrite_r+0x35c>
    8890:	a805883a 	mov	r2,r21
    8894:	982d883a 	mov	r22,r19
    8898:	14c0012e 	bgeu	r2,r19,88a0 <__sfvwrite_r+0x2dc>
    889c:	102d883a 	mov	r22,r2
    88a0:	80800417 	ldw	r2,16(r16)
    88a4:	81c00517 	ldw	r7,20(r16)
    88a8:	173fe42e 	bgeu	r2,fp,883c <__sfvwrite_r+0x278>
    88ac:	3ca5883a 	add	r18,r7,r18
    88b0:	95bfe20e 	bge	r18,r22,883c <__sfvwrite_r+0x278>
    88b4:	b80b883a 	mov	r5,r23
    88b8:	e009883a 	mov	r4,fp
    88bc:	900d883a 	mov	r6,r18
    88c0:	00095cc0 	call	95cc <memmove>
    88c4:	80800017 	ldw	r2,0(r16)
    88c8:	d9000017 	ldw	r4,0(sp)
    88cc:	800b883a 	mov	r5,r16
    88d0:	1485883a 	add	r2,r2,r18
    88d4:	80800015 	stw	r2,0(r16)
    88d8:	000a4f80 	call	a4f8 <_fflush_r>
    88dc:	103fdf26 	beq	r2,zero,885c <__sfvwrite_r+0x298>
    88e0:	8080030b 	ldhu	r2,12(r16)
    88e4:	10801014 	ori	r2,r2,64
    88e8:	8080030d 	sth	r2,12(r16)
    88ec:	00bfffc4 	movi	r2,-1
    88f0:	003fc606 	br	880c <__sfvwrite_r+0x248>
    88f4:	0005883a 	mov	r2,zero
    88f8:	f800283a 	ret
    88fc:	0027883a 	mov	r19,zero
    8900:	002b883a 	mov	r21,zero
    8904:	0005883a 	mov	r2,zero
    8908:	002f883a 	mov	r23,zero
    890c:	983fdf1e 	bne	r19,zero,888c <__sfvwrite_r+0x2c8>
    8910:	8cc00117 	ldw	r19,4(r17)
    8914:	8dc00017 	ldw	r23,0(r17)
    8918:	8c400204 	addi	r17,r17,8
    891c:	983ffc26 	beq	r19,zero,8910 <__sfvwrite_r+0x34c>
    8920:	980d883a 	mov	r6,r19
    8924:	01400284 	movi	r5,10
    8928:	b809883a 	mov	r4,r23
    892c:	00093e40 	call	93e4 <memchr>
    8930:	10004226 	beq	r2,zero,8a3c <__sfvwrite_r+0x478>
    8934:	10800044 	addi	r2,r2,1
    8938:	15ebc83a 	sub	r21,r2,r23
    893c:	003fd406 	br	8890 <__sfvwrite_r+0x2cc>
    8940:	80800417 	ldw	r2,16(r16)
    8944:	17001436 	bltu	r2,fp,8998 <__sfvwrite_r+0x3d4>
    8948:	84c00517 	ldw	r19,20(r16)
    894c:	bcc01236 	bltu	r23,r19,8998 <__sfvwrite_r+0x3d4>
    8950:	d8800117 	ldw	r2,4(sp)
    8954:	15c0372e 	bgeu	r2,r23,8a34 <__sfvwrite_r+0x470>
    8958:	d9000217 	ldw	r4,8(sp)
    895c:	980b883a 	mov	r5,r19
    8960:	000acec0 	call	acec <__divsi3>
    8964:	980b883a 	mov	r5,r19
    8968:	1009883a 	mov	r4,r2
    896c:	000aea40 	call	aea4 <__mulsi3>
    8970:	81400717 	ldw	r5,28(r16)
    8974:	82800917 	ldw	r10,36(r16)
    8978:	d9000017 	ldw	r4,0(sp)
    897c:	100f883a 	mov	r7,r2
    8980:	b00d883a 	mov	r6,r22
    8984:	503ee83a 	callr	r10
    8988:	00bfd50e 	bge	zero,r2,88e0 <__sfvwrite_r+0x31c>
    898c:	1027883a 	mov	r19,r2
    8990:	bcefc83a 	sub	r23,r23,r19
    8994:	003f8f06 	br	87d4 <__sfvwrite_r+0x210>
    8998:	9027883a 	mov	r19,r18
    899c:	bc80012e 	bgeu	r23,r18,89a4 <__sfvwrite_r+0x3e0>
    89a0:	b827883a 	mov	r19,r23
    89a4:	e009883a 	mov	r4,fp
    89a8:	980d883a 	mov	r6,r19
    89ac:	b00b883a 	mov	r5,r22
    89b0:	00095cc0 	call	95cc <memmove>
    89b4:	80800217 	ldw	r2,8(r16)
    89b8:	81000017 	ldw	r4,0(r16)
    89bc:	14c5c83a 	sub	r2,r2,r19
    89c0:	24c9883a 	add	r4,r4,r19
    89c4:	80800215 	stw	r2,8(r16)
    89c8:	81000015 	stw	r4,0(r16)
    89cc:	103ff01e 	bne	r2,zero,8990 <__sfvwrite_r+0x3cc>
    89d0:	d9000017 	ldw	r4,0(sp)
    89d4:	800b883a 	mov	r5,r16
    89d8:	000a4f80 	call	a4f8 <_fflush_r>
    89dc:	103fec26 	beq	r2,zero,8990 <__sfvwrite_r+0x3cc>
    89e0:	003fbf06 	br	88e0 <__sfvwrite_r+0x31c>
    89e4:	b825883a 	mov	r18,r23
    89e8:	b82b883a 	mov	r21,r23
    89ec:	003f6d06 	br	87a4 <__sfvwrite_r+0x1e0>
    89f0:	d9000017 	ldw	r4,0(sp)
    89f4:	800b883a 	mov	r5,r16
    89f8:	000a4f80 	call	a4f8 <_fflush_r>
    89fc:	103f9a26 	beq	r2,zero,8868 <__sfvwrite_r+0x2a4>
    8a00:	003fb706 	br	88e0 <__sfvwrite_r+0x31c>
    8a04:	b00d883a 	mov	r6,r22
    8a08:	b80b883a 	mov	r5,r23
    8a0c:	e009883a 	mov	r4,fp
    8a10:	00095cc0 	call	95cc <memmove>
    8a14:	80c00217 	ldw	r3,8(r16)
    8a18:	80800017 	ldw	r2,0(r16)
    8a1c:	b025883a 	mov	r18,r22
    8a20:	1d87c83a 	sub	r3,r3,r22
    8a24:	15ad883a 	add	r22,r2,r22
    8a28:	80c00215 	stw	r3,8(r16)
    8a2c:	85800015 	stw	r22,0(r16)
    8a30:	003f8a06 	br	885c <__sfvwrite_r+0x298>
    8a34:	b809883a 	mov	r4,r23
    8a38:	003fc806 	br	895c <__sfvwrite_r+0x398>
    8a3c:	98800044 	addi	r2,r19,1
    8a40:	102b883a 	mov	r21,r2
    8a44:	003f9306 	br	8894 <__sfvwrite_r+0x2d0>
    8a48:	d9000017 	ldw	r4,0(sp)
    8a4c:	00097e80 	call	97e8 <_realloc_r>
    8a50:	100f883a 	mov	r7,r2
    8a54:	103f4b1e 	bne	r2,zero,8784 <__sfvwrite_r+0x1c0>
    8a58:	dc400017 	ldw	r17,0(sp)
    8a5c:	81400417 	ldw	r5,16(r16)
    8a60:	8809883a 	mov	r4,r17
    8a64:	000a69c0 	call	a69c <_free_r>
    8a68:	8080030b 	ldhu	r2,12(r16)
    8a6c:	00c00304 	movi	r3,12
    8a70:	88c00015 	stw	r3,0(r17)
    8a74:	10bfdfcc 	andi	r2,r2,65407
    8a78:	003f9a06 	br	88e4 <__sfvwrite_r+0x320>
    8a7c:	d8c00017 	ldw	r3,0(sp)
    8a80:	00800304 	movi	r2,12
    8a84:	18800015 	stw	r2,0(r3)
    8a88:	8080030b 	ldhu	r2,12(r16)
    8a8c:	003f9506 	br	88e4 <__sfvwrite_r+0x320>
    8a90:	00bfffc4 	movi	r2,-1
    8a94:	003f5d06 	br	880c <__sfvwrite_r+0x248>

00008a98 <_fwalk>:
    8a98:	defffa04 	addi	sp,sp,-24
    8a9c:	dc800215 	stw	r18,8(sp)
    8aa0:	dfc00515 	stw	ra,20(sp)
    8aa4:	dd000415 	stw	r20,16(sp)
    8aa8:	dcc00315 	stw	r19,12(sp)
    8aac:	dc400115 	stw	r17,4(sp)
    8ab0:	dc000015 	stw	r16,0(sp)
    8ab4:	2480b804 	addi	r18,r4,736
    8ab8:	90001e26 	beq	r18,zero,8b34 <_fwalk+0x9c>
    8abc:	2827883a 	mov	r19,r5
    8ac0:	0029883a 	mov	r20,zero
    8ac4:	94400117 	ldw	r17,4(r18)
    8ac8:	94000217 	ldw	r16,8(r18)
    8acc:	8c7fffc4 	addi	r17,r17,-1
    8ad0:	88000d16 	blt	r17,zero,8b08 <_fwalk+0x70>
    8ad4:	8080030b 	ldhu	r2,12(r16)
    8ad8:	8c7fffc4 	addi	r17,r17,-1
    8adc:	108000b0 	cmpltui	r2,r2,2
    8ae0:	1000061e 	bne	r2,zero,8afc <_fwalk+0x64>
    8ae4:	8080038f 	ldh	r2,14(r16)
    8ae8:	8009883a 	mov	r4,r16
    8aec:	10bfffe0 	cmpeqi	r2,r2,-1
    8af0:	1000021e 	bne	r2,zero,8afc <_fwalk+0x64>
    8af4:	983ee83a 	callr	r19
    8af8:	a0a8b03a 	or	r20,r20,r2
    8afc:	88bfffd8 	cmpnei	r2,r17,-1
    8b00:	84001a04 	addi	r16,r16,104
    8b04:	103ff31e 	bne	r2,zero,8ad4 <_fwalk+0x3c>
    8b08:	94800017 	ldw	r18,0(r18)
    8b0c:	903fed1e 	bne	r18,zero,8ac4 <_fwalk+0x2c>
    8b10:	a005883a 	mov	r2,r20
    8b14:	dfc00517 	ldw	ra,20(sp)
    8b18:	dd000417 	ldw	r20,16(sp)
    8b1c:	dcc00317 	ldw	r19,12(sp)
    8b20:	dc800217 	ldw	r18,8(sp)
    8b24:	dc400117 	ldw	r17,4(sp)
    8b28:	dc000017 	ldw	r16,0(sp)
    8b2c:	dec00604 	addi	sp,sp,24
    8b30:	f800283a 	ret
    8b34:	0029883a 	mov	r20,zero
    8b38:	003ff506 	br	8b10 <_fwalk+0x78>

00008b3c <_fwalk_reent>:
    8b3c:	defff904 	addi	sp,sp,-28
    8b40:	dc800215 	stw	r18,8(sp)
    8b44:	dfc00615 	stw	ra,24(sp)
    8b48:	dd400515 	stw	r21,20(sp)
    8b4c:	dd000415 	stw	r20,16(sp)
    8b50:	dcc00315 	stw	r19,12(sp)
    8b54:	dc400115 	stw	r17,4(sp)
    8b58:	dc000015 	stw	r16,0(sp)
    8b5c:	2480b804 	addi	r18,r4,736
    8b60:	90002126 	beq	r18,zero,8be8 <_fwalk_reent+0xac>
    8b64:	2829883a 	mov	r20,r5
    8b68:	2027883a 	mov	r19,r4
    8b6c:	002b883a 	mov	r21,zero
    8b70:	94400117 	ldw	r17,4(r18)
    8b74:	94000217 	ldw	r16,8(r18)
    8b78:	8c7fffc4 	addi	r17,r17,-1
    8b7c:	88000e16 	blt	r17,zero,8bb8 <_fwalk_reent+0x7c>
    8b80:	8080030b 	ldhu	r2,12(r16)
    8b84:	8c7fffc4 	addi	r17,r17,-1
    8b88:	108000b0 	cmpltui	r2,r2,2
    8b8c:	1000071e 	bne	r2,zero,8bac <_fwalk_reent+0x70>
    8b90:	8080038f 	ldh	r2,14(r16)
    8b94:	800b883a 	mov	r5,r16
    8b98:	9809883a 	mov	r4,r19
    8b9c:	10bfffe0 	cmpeqi	r2,r2,-1
    8ba0:	1000021e 	bne	r2,zero,8bac <_fwalk_reent+0x70>
    8ba4:	a03ee83a 	callr	r20
    8ba8:	a8aab03a 	or	r21,r21,r2
    8bac:	88bfffd8 	cmpnei	r2,r17,-1
    8bb0:	84001a04 	addi	r16,r16,104
    8bb4:	103ff21e 	bne	r2,zero,8b80 <_fwalk_reent+0x44>
    8bb8:	94800017 	ldw	r18,0(r18)
    8bbc:	903fec1e 	bne	r18,zero,8b70 <_fwalk_reent+0x34>
    8bc0:	a805883a 	mov	r2,r21
    8bc4:	dfc00617 	ldw	ra,24(sp)
    8bc8:	dd400517 	ldw	r21,20(sp)
    8bcc:	dd000417 	ldw	r20,16(sp)
    8bd0:	dcc00317 	ldw	r19,12(sp)
    8bd4:	dc800217 	ldw	r18,8(sp)
    8bd8:	dc400117 	ldw	r17,4(sp)
    8bdc:	dc000017 	ldw	r16,0(sp)
    8be0:	dec00704 	addi	sp,sp,28
    8be4:	f800283a 	ret
    8be8:	002b883a 	mov	r21,zero
    8bec:	003ff406 	br	8bc0 <_fwalk_reent+0x84>

00008bf0 <_malloc_r>:
    8bf0:	defff604 	addi	sp,sp,-40
    8bf4:	dc400115 	stw	r17,4(sp)
    8bf8:	2c4002c4 	addi	r17,r5,11
    8bfc:	dc800215 	stw	r18,8(sp)
    8c00:	dfc00915 	stw	ra,36(sp)
    8c04:	df000815 	stw	fp,32(sp)
    8c08:	ddc00715 	stw	r23,28(sp)
    8c0c:	dd800615 	stw	r22,24(sp)
    8c10:	dd400515 	stw	r21,20(sp)
    8c14:	dd000415 	stw	r20,16(sp)
    8c18:	dcc00315 	stw	r19,12(sp)
    8c1c:	dc000015 	stw	r16,0(sp)
    8c20:	888005e8 	cmpgeui	r2,r17,23
    8c24:	2025883a 	mov	r18,r4
    8c28:	10001b1e 	bne	r2,zero,8c98 <_malloc_r+0xa8>
    8c2c:	29400468 	cmpgeui	r5,r5,17
    8c30:	2800951e 	bne	r5,zero,8e88 <_malloc_r+0x298>
    8c34:	000b4780 	call	b478 <__malloc_lock>
    8c38:	04400404 	movi	r17,16
    8c3c:	00800604 	movi	r2,24
    8c40:	01800084 	movi	r6,2
    8c44:	04c00074 	movhi	r19,1
    8c48:	9cf30104 	addi	r19,r19,-13308
    8c4c:	9885883a 	add	r2,r19,r2
    8c50:	14000117 	ldw	r16,4(r2)
    8c54:	10fffe04 	addi	r3,r2,-8
    8c58:	80c09e26 	beq	r16,r3,8ed4 <_malloc_r+0x2e4>
    8c5c:	80800117 	ldw	r2,4(r16)
    8c60:	81000317 	ldw	r4,12(r16)
    8c64:	00ffff04 	movi	r3,-4
    8c68:	10c4703a 	and	r2,r2,r3
    8c6c:	81400217 	ldw	r5,8(r16)
    8c70:	8085883a 	add	r2,r16,r2
    8c74:	10c00117 	ldw	r3,4(r2)
    8c78:	29000315 	stw	r4,12(r5)
    8c7c:	21400215 	stw	r5,8(r4)
    8c80:	18c00054 	ori	r3,r3,1
    8c84:	10c00115 	stw	r3,4(r2)
    8c88:	9009883a 	mov	r4,r18
    8c8c:	000b49c0 	call	b49c <__malloc_unlock>
    8c90:	80800204 	addi	r2,r16,8
    8c94:	00007f06 	br	8e94 <_malloc_r+0x2a4>
    8c98:	00bffe04 	movi	r2,-8
    8c9c:	88a2703a 	and	r17,r17,r2
    8ca0:	88007916 	blt	r17,zero,8e88 <_malloc_r+0x298>
    8ca4:	89407836 	bltu	r17,r5,8e88 <_malloc_r+0x298>
    8ca8:	000b4780 	call	b478 <__malloc_lock>
    8cac:	88807e28 	cmpgeui	r2,r17,504
    8cb0:	10013326 	beq	r2,zero,9180 <_malloc_r+0x590>
    8cb4:	8804d27a 	srli	r2,r17,9
    8cb8:	10008226 	beq	r2,zero,8ec4 <_malloc_r+0x2d4>
    8cbc:	10c00168 	cmpgeui	r3,r2,5
    8cc0:	1801151e 	bne	r3,zero,9118 <_malloc_r+0x528>
    8cc4:	8804d1ba 	srli	r2,r17,6
    8cc8:	11800e44 	addi	r6,r2,57
    8ccc:	300a90fa 	slli	r5,r6,3
    8cd0:	12000e04 	addi	r8,r2,56
    8cd4:	04c00074 	movhi	r19,1
    8cd8:	9cf30104 	addi	r19,r19,-13308
    8cdc:	994b883a 	add	r5,r19,r5
    8ce0:	2c000117 	ldw	r16,4(r5)
    8ce4:	297ffe04 	addi	r5,r5,-8
    8ce8:	2c001126 	beq	r5,r16,8d30 <_malloc_r+0x140>
    8cec:	80800117 	ldw	r2,4(r16)
    8cf0:	00ffff04 	movi	r3,-4
    8cf4:	10c4703a 	and	r2,r2,r3
    8cf8:	1447c83a 	sub	r3,r2,r17
    8cfc:	19000408 	cmpgei	r4,r3,16
    8d00:	2000e81e 	bne	r4,zero,90a4 <_malloc_r+0x4b4>
    8d04:	1800e90e 	bge	r3,zero,90ac <_malloc_r+0x4bc>
    8d08:	01ffff04 	movi	r7,-4
    8d0c:	00000606 	br	8d28 <_malloc_r+0x138>
    8d10:	80800117 	ldw	r2,4(r16)
    8d14:	11c4703a 	and	r2,r2,r7
    8d18:	1447c83a 	sub	r3,r2,r17
    8d1c:	19000408 	cmpgei	r4,r3,16
    8d20:	2000e01e 	bne	r4,zero,90a4 <_malloc_r+0x4b4>
    8d24:	1800e10e 	bge	r3,zero,90ac <_malloc_r+0x4bc>
    8d28:	84000317 	ldw	r16,12(r16)
    8d2c:	2c3ff81e 	bne	r5,r16,8d10 <_malloc_r+0x120>
    8d30:	9c000417 	ldw	r16,16(r19)
    8d34:	02000074 	movhi	r8,1
    8d38:	42330304 	addi	r8,r8,-13300
    8d3c:	82006c26 	beq	r16,r8,8ef0 <_malloc_r+0x300>
    8d40:	80c00117 	ldw	r3,4(r16)
    8d44:	00bfff04 	movi	r2,-4
    8d48:	1884703a 	and	r2,r3,r2
    8d4c:	1447c83a 	sub	r3,r2,r17
    8d50:	19000410 	cmplti	r4,r3,16
    8d54:	20011526 	beq	r4,zero,91ac <_malloc_r+0x5bc>
    8d58:	9a000515 	stw	r8,20(r19)
    8d5c:	9a000415 	stw	r8,16(r19)
    8d60:	18010a0e 	bge	r3,zero,918c <_malloc_r+0x59c>
    8d64:	10c08028 	cmpgeui	r3,r2,512
    8d68:	1800d21e 	bne	r3,zero,90b4 <_malloc_r+0x4c4>
    8d6c:	1004d0fa 	srli	r2,r2,3
    8d70:	99400117 	ldw	r5,4(r19)
    8d74:	10c00044 	addi	r3,r2,1
    8d78:	1009d0ba 	srai	r4,r2,2
    8d7c:	180690fa 	slli	r3,r3,3
    8d80:	00800044 	movi	r2,1
    8d84:	1104983a 	sll	r2,r2,r4
    8d88:	98c7883a 	add	r3,r19,r3
    8d8c:	19000017 	ldw	r4,0(r3)
    8d90:	1144b03a 	or	r2,r2,r5
    8d94:	197ffe04 	addi	r5,r3,-8
    8d98:	81400315 	stw	r5,12(r16)
    8d9c:	81000215 	stw	r4,8(r16)
    8da0:	98800115 	stw	r2,4(r19)
    8da4:	1c000015 	stw	r16,0(r3)
    8da8:	24000315 	stw	r16,12(r4)
    8dac:	3007d0ba 	srai	r3,r6,2
    8db0:	01000044 	movi	r4,1
    8db4:	20c8983a 	sll	r4,r4,r3
    8db8:	11005236 	bltu	r2,r4,8f04 <_malloc_r+0x314>
    8dbc:	2086703a 	and	r3,r4,r2
    8dc0:	18000a1e 	bne	r3,zero,8dec <_malloc_r+0x1fc>
    8dc4:	00ffff04 	movi	r3,-4
    8dc8:	2109883a 	add	r4,r4,r4
    8dcc:	30cc703a 	and	r6,r6,r3
    8dd0:	2086703a 	and	r3,r4,r2
    8dd4:	31800104 	addi	r6,r6,4
    8dd8:	1800041e 	bne	r3,zero,8dec <_malloc_r+0x1fc>
    8ddc:	2109883a 	add	r4,r4,r4
    8de0:	2086703a 	and	r3,r4,r2
    8de4:	31800104 	addi	r6,r6,4
    8de8:	183ffc26 	beq	r3,zero,8ddc <_malloc_r+0x1ec>
    8dec:	027fff04 	movi	r9,-4
    8df0:	301490fa 	slli	r10,r6,3
    8df4:	3017883a 	mov	r11,r6
    8df8:	9a95883a 	add	r10,r19,r10
    8dfc:	500f883a 	mov	r7,r10
    8e00:	3c000317 	ldw	r16,12(r7)
    8e04:	3c00cd26 	beq	r7,r16,913c <_malloc_r+0x54c>
    8e08:	80800117 	ldw	r2,4(r16)
    8e0c:	1244703a 	and	r2,r2,r9
    8e10:	1447c83a 	sub	r3,r2,r17
    8e14:	19400408 	cmpgei	r5,r3,16
    8e18:	2800081e 	bne	r5,zero,8e3c <_malloc_r+0x24c>
    8e1c:	1800cc0e 	bge	r3,zero,9150 <_malloc_r+0x560>
    8e20:	84000317 	ldw	r16,12(r16)
    8e24:	3c00c526 	beq	r7,r16,913c <_malloc_r+0x54c>
    8e28:	80800117 	ldw	r2,4(r16)
    8e2c:	1244703a 	and	r2,r2,r9
    8e30:	1447c83a 	sub	r3,r2,r17
    8e34:	19400410 	cmplti	r5,r3,16
    8e38:	283ff81e 	bne	r5,zero,8e1c <_malloc_r+0x22c>
    8e3c:	81000317 	ldw	r4,12(r16)
    8e40:	81400217 	ldw	r5,8(r16)
    8e44:	89800054 	ori	r6,r17,1
    8e48:	81800115 	stw	r6,4(r16)
    8e4c:	29000315 	stw	r4,12(r5)
    8e50:	21400215 	stw	r5,8(r4)
    8e54:	8463883a 	add	r17,r16,r17
    8e58:	9c400515 	stw	r17,20(r19)
    8e5c:	9c400415 	stw	r17,16(r19)
    8e60:	19000054 	ori	r4,r3,1
    8e64:	89000115 	stw	r4,4(r17)
    8e68:	8085883a 	add	r2,r16,r2
    8e6c:	8a000315 	stw	r8,12(r17)
    8e70:	8a000215 	stw	r8,8(r17)
    8e74:	10c00015 	stw	r3,0(r2)
    8e78:	9009883a 	mov	r4,r18
    8e7c:	000b49c0 	call	b49c <__malloc_unlock>
    8e80:	80800204 	addi	r2,r16,8
    8e84:	00000306 	br	8e94 <_malloc_r+0x2a4>
    8e88:	00800304 	movi	r2,12
    8e8c:	90800015 	stw	r2,0(r18)
    8e90:	0005883a 	mov	r2,zero
    8e94:	dfc00917 	ldw	ra,36(sp)
    8e98:	df000817 	ldw	fp,32(sp)
    8e9c:	ddc00717 	ldw	r23,28(sp)
    8ea0:	dd800617 	ldw	r22,24(sp)
    8ea4:	dd400517 	ldw	r21,20(sp)
    8ea8:	dd000417 	ldw	r20,16(sp)
    8eac:	dcc00317 	ldw	r19,12(sp)
    8eb0:	dc800217 	ldw	r18,8(sp)
    8eb4:	dc400117 	ldw	r17,4(sp)
    8eb8:	dc000017 	ldw	r16,0(sp)
    8ebc:	dec00a04 	addi	sp,sp,40
    8ec0:	f800283a 	ret
    8ec4:	01408004 	movi	r5,512
    8ec8:	01801004 	movi	r6,64
    8ecc:	02000fc4 	movi	r8,63
    8ed0:	003f8006 	br	8cd4 <_malloc_r+0xe4>
    8ed4:	14000317 	ldw	r16,12(r2)
    8ed8:	31800084 	addi	r6,r6,2
    8edc:	143f5f1e 	bne	r2,r16,8c5c <_malloc_r+0x6c>
    8ee0:	9c000417 	ldw	r16,16(r19)
    8ee4:	02000074 	movhi	r8,1
    8ee8:	42330304 	addi	r8,r8,-13300
    8eec:	823f941e 	bne	r16,r8,8d40 <_malloc_r+0x150>
    8ef0:	3007d0ba 	srai	r3,r6,2
    8ef4:	01000044 	movi	r4,1
    8ef8:	98800117 	ldw	r2,4(r19)
    8efc:	20c8983a 	sll	r4,r4,r3
    8f00:	113fae2e 	bgeu	r2,r4,8dbc <_malloc_r+0x1cc>
    8f04:	9c000217 	ldw	r16,8(r19)
    8f08:	00bfff04 	movi	r2,-4
    8f0c:	85000117 	ldw	r20,4(r16)
    8f10:	a0ac703a 	and	r22,r20,r2
    8f14:	b4400336 	bltu	r22,r17,8f24 <_malloc_r+0x334>
    8f18:	b445c83a 	sub	r2,r22,r17
    8f1c:	10c00408 	cmpgei	r3,r2,16
    8f20:	1800561e 	bne	r3,zero,907c <_malloc_r+0x48c>
    8f24:	00800074 	movhi	r2,1
    8f28:	10b47a17 	ldw	r2,-11800(r2)
    8f2c:	00c00074 	movhi	r3,1
    8f30:	1d371017 	ldw	r20,-9152(r3)
    8f34:	10bfffd8 	cmpnei	r2,r2,-1
    8f38:	85ab883a 	add	r21,r16,r22
    8f3c:	8d29883a 	add	r20,r17,r20
    8f40:	1000c826 	beq	r2,zero,9264 <_malloc_r+0x674>
    8f44:	a50403c4 	addi	r20,r20,4111
    8f48:	00bc0004 	movi	r2,-4096
    8f4c:	a0a8703a 	and	r20,r20,r2
    8f50:	a00b883a 	mov	r5,r20
    8f54:	9009883a 	mov	r4,r18
    8f58:	0009e140 	call	9e14 <_sbrk_r>
    8f5c:	102f883a 	mov	r23,r2
    8f60:	10bfffd8 	cmpnei	r2,r2,-1
    8f64:	10009a26 	beq	r2,zero,91d0 <_malloc_r+0x5e0>
    8f68:	bd409836 	bltu	r23,r21,91cc <_malloc_r+0x5dc>
    8f6c:	00800074 	movhi	r2,1
    8f70:	10b71517 	ldw	r2,-9132(r2)
    8f74:	00c00074 	movhi	r3,1
    8f78:	a085883a 	add	r2,r20,r2
    8f7c:	18b71515 	stw	r2,-9132(r3)
    8f80:	1007883a 	mov	r3,r2
    8f84:	adc0dd26 	beq	r21,r23,92fc <_malloc_r+0x70c>
    8f88:	00800074 	movhi	r2,1
    8f8c:	10b47a17 	ldw	r2,-11800(r2)
    8f90:	10bfffd8 	cmpnei	r2,r2,-1
    8f94:	1000e026 	beq	r2,zero,9318 <_malloc_r+0x728>
    8f98:	bd6bc83a 	sub	r21,r23,r21
    8f9c:	a8c7883a 	add	r3,r21,r3
    8fa0:	00800074 	movhi	r2,1
    8fa4:	10f71515 	stw	r3,-9132(r2)
    8fa8:	bf0001cc 	andi	fp,r23,7
    8fac:	e000b626 	beq	fp,zero,9288 <_malloc_r+0x698>
    8fb0:	bf2fc83a 	sub	r23,r23,fp
    8fb4:	bdc00204 	addi	r23,r23,8
    8fb8:	00840204 	movi	r2,4104
    8fbc:	1705c83a 	sub	r2,r2,fp
    8fc0:	bd29883a 	add	r20,r23,r20
    8fc4:	1505c83a 	sub	r2,r2,r20
    8fc8:	1543ffcc 	andi	r21,r2,4095
    8fcc:	a80b883a 	mov	r5,r21
    8fd0:	9009883a 	mov	r4,r18
    8fd4:	0009e140 	call	9e14 <_sbrk_r>
    8fd8:	10ffffe0 	cmpeqi	r3,r2,-1
    8fdc:	1800e41e 	bne	r3,zero,9370 <_malloc_r+0x780>
    8fe0:	15c5c83a 	sub	r2,r2,r23
    8fe4:	1569883a 	add	r20,r2,r21
    8fe8:	00800074 	movhi	r2,1
    8fec:	10b71517 	ldw	r2,-9132(r2)
    8ff0:	9dc00215 	stw	r23,8(r19)
    8ff4:	a5000054 	ori	r20,r20,1
    8ff8:	a885883a 	add	r2,r21,r2
    8ffc:	00c00074 	movhi	r3,1
    9000:	18b71515 	stw	r2,-9132(r3)
    9004:	bd000115 	stw	r20,4(r23)
    9008:	84c0c626 	beq	r16,r19,9324 <_malloc_r+0x734>
    900c:	b0c00428 	cmpgeui	r3,r22,16
    9010:	1800c626 	beq	r3,zero,932c <_malloc_r+0x73c>
    9014:	81000117 	ldw	r4,4(r16)
    9018:	017ffe04 	movi	r5,-8
    901c:	b0fffd04 	addi	r3,r22,-12
    9020:	1946703a 	and	r3,r3,r5
    9024:	2100004c 	andi	r4,r4,1
    9028:	20c8b03a 	or	r4,r4,r3
    902c:	81000115 	stw	r4,4(r16)
    9030:	01400144 	movi	r5,5
    9034:	80c9883a 	add	r4,r16,r3
    9038:	21400115 	stw	r5,4(r4)
    903c:	21400215 	stw	r5,8(r4)
    9040:	18c00428 	cmpgeui	r3,r3,16
    9044:	1800cf1e 	bne	r3,zero,9384 <_malloc_r+0x794>
    9048:	bd000117 	ldw	r20,4(r23)
    904c:	b821883a 	mov	r16,r23
    9050:	00c00074 	movhi	r3,1
    9054:	18f70f17 	ldw	r3,-9156(r3)
    9058:	1880022e 	bgeu	r3,r2,9064 <_malloc_r+0x474>
    905c:	00c00074 	movhi	r3,1
    9060:	18b70f15 	stw	r2,-9156(r3)
    9064:	00c00074 	movhi	r3,1
    9068:	18f70e17 	ldw	r3,-9160(r3)
    906c:	18805a2e 	bgeu	r3,r2,91d8 <_malloc_r+0x5e8>
    9070:	00c00074 	movhi	r3,1
    9074:	18b70e15 	stw	r2,-9160(r3)
    9078:	00005706 	br	91d8 <_malloc_r+0x5e8>
    907c:	88c00054 	ori	r3,r17,1
    9080:	80c00115 	stw	r3,4(r16)
    9084:	8463883a 	add	r17,r16,r17
    9088:	10800054 	ori	r2,r2,1
    908c:	9c400215 	stw	r17,8(r19)
    9090:	88800115 	stw	r2,4(r17)
    9094:	9009883a 	mov	r4,r18
    9098:	000b49c0 	call	b49c <__malloc_unlock>
    909c:	80800204 	addi	r2,r16,8
    90a0:	003f7c06 	br	8e94 <_malloc_r+0x2a4>
    90a4:	400d883a 	mov	r6,r8
    90a8:	003f2106 	br	8d30 <_malloc_r+0x140>
    90ac:	81000317 	ldw	r4,12(r16)
    90b0:	003eee06 	br	8c6c <_malloc_r+0x7c>
    90b4:	1006d27a 	srli	r3,r2,9
    90b8:	19000168 	cmpgeui	r4,r3,5
    90bc:	20003e26 	beq	r4,zero,91b8 <_malloc_r+0x5c8>
    90c0:	19000568 	cmpgeui	r4,r3,21
    90c4:	20007a1e 	bne	r4,zero,92b0 <_malloc_r+0x6c0>
    90c8:	19401704 	addi	r5,r3,92
    90cc:	280a90fa 	slli	r5,r5,3
    90d0:	190016c4 	addi	r4,r3,91
    90d4:	994b883a 	add	r5,r19,r5
    90d8:	28c00017 	ldw	r3,0(r5)
    90dc:	297ffe04 	addi	r5,r5,-8
    90e0:	28c06226 	beq	r5,r3,926c <_malloc_r+0x67c>
    90e4:	01ffff04 	movi	r7,-4
    90e8:	19000117 	ldw	r4,4(r3)
    90ec:	21c8703a 	and	r4,r4,r7
    90f0:	1100022e 	bgeu	r2,r4,90fc <_malloc_r+0x50c>
    90f4:	18c00217 	ldw	r3,8(r3)
    90f8:	28fffb1e 	bne	r5,r3,90e8 <_malloc_r+0x4f8>
    90fc:	19400317 	ldw	r5,12(r3)
    9100:	98800117 	ldw	r2,4(r19)
    9104:	81400315 	stw	r5,12(r16)
    9108:	80c00215 	stw	r3,8(r16)
    910c:	2c000215 	stw	r16,8(r5)
    9110:	1c000315 	stw	r16,12(r3)
    9114:	003f2506 	br	8dac <_malloc_r+0x1bc>
    9118:	10c00568 	cmpgeui	r3,r2,21
    911c:	18003826 	beq	r3,zero,9200 <_malloc_r+0x610>
    9120:	10c01568 	cmpgeui	r3,r2,85
    9124:	1800691e 	bne	r3,zero,92cc <_malloc_r+0x6dc>
    9128:	8804d33a 	srli	r2,r17,12
    912c:	11801bc4 	addi	r6,r2,111
    9130:	12001b84 	addi	r8,r2,110
    9134:	300a90fa 	slli	r5,r6,3
    9138:	003ee606 	br	8cd4 <_malloc_r+0xe4>
    913c:	5ac00044 	addi	r11,r11,1
    9140:	588000cc 	andi	r2,r11,3
    9144:	39c00204 	addi	r7,r7,8
    9148:	103f2d1e 	bne	r2,zero,8e00 <_malloc_r+0x210>
    914c:	00003306 	br	921c <_malloc_r+0x62c>
    9150:	8085883a 	add	r2,r16,r2
    9154:	10c00117 	ldw	r3,4(r2)
    9158:	81000317 	ldw	r4,12(r16)
    915c:	81400217 	ldw	r5,8(r16)
    9160:	18c00054 	ori	r3,r3,1
    9164:	10c00115 	stw	r3,4(r2)
    9168:	29000315 	stw	r4,12(r5)
    916c:	21400215 	stw	r5,8(r4)
    9170:	9009883a 	mov	r4,r18
    9174:	000b49c0 	call	b49c <__malloc_unlock>
    9178:	80800204 	addi	r2,r16,8
    917c:	003f4506 	br	8e94 <_malloc_r+0x2a4>
    9180:	880cd0fa 	srli	r6,r17,3
    9184:	88800204 	addi	r2,r17,8
    9188:	003eae06 	br	8c44 <_malloc_r+0x54>
    918c:	8085883a 	add	r2,r16,r2
    9190:	10c00117 	ldw	r3,4(r2)
    9194:	9009883a 	mov	r4,r18
    9198:	18c00054 	ori	r3,r3,1
    919c:	10c00115 	stw	r3,4(r2)
    91a0:	000b49c0 	call	b49c <__malloc_unlock>
    91a4:	80800204 	addi	r2,r16,8
    91a8:	003f3a06 	br	8e94 <_malloc_r+0x2a4>
    91ac:	89000054 	ori	r4,r17,1
    91b0:	81000115 	stw	r4,4(r16)
    91b4:	003f2706 	br	8e54 <_malloc_r+0x264>
    91b8:	1006d1ba 	srli	r3,r2,6
    91bc:	19400e44 	addi	r5,r3,57
    91c0:	19000e04 	addi	r4,r3,56
    91c4:	280a90fa 	slli	r5,r5,3
    91c8:	003fc206 	br	90d4 <_malloc_r+0x4e4>
    91cc:	84c04626 	beq	r16,r19,92e8 <_malloc_r+0x6f8>
    91d0:	9c000217 	ldw	r16,8(r19)
    91d4:	85000117 	ldw	r20,4(r16)
    91d8:	00bfff04 	movi	r2,-4
    91dc:	a0a8703a 	and	r20,r20,r2
    91e0:	a445c83a 	sub	r2,r20,r17
    91e4:	a4400236 	bltu	r20,r17,91f0 <_malloc_r+0x600>
    91e8:	10c00408 	cmpgei	r3,r2,16
    91ec:	183fa31e 	bne	r3,zero,907c <_malloc_r+0x48c>
    91f0:	9009883a 	mov	r4,r18
    91f4:	000b49c0 	call	b49c <__malloc_unlock>
    91f8:	0005883a 	mov	r2,zero
    91fc:	003f2506 	br	8e94 <_malloc_r+0x2a4>
    9200:	11801704 	addi	r6,r2,92
    9204:	120016c4 	addi	r8,r2,91
    9208:	300a90fa 	slli	r5,r6,3
    920c:	003eb106 	br	8cd4 <_malloc_r+0xe4>
    9210:	50800217 	ldw	r2,8(r10)
    9214:	31bfffc4 	addi	r6,r6,-1
    9218:	1280701e 	bne	r2,r10,93dc <_malloc_r+0x7ec>
    921c:	308000cc 	andi	r2,r6,3
    9220:	52bffe04 	addi	r10,r10,-8
    9224:	103ffa1e 	bne	r2,zero,9210 <_malloc_r+0x620>
    9228:	98c00117 	ldw	r3,4(r19)
    922c:	0104303a 	nor	r2,zero,r4
    9230:	10c4703a 	and	r2,r2,r3
    9234:	98800115 	stw	r2,4(r19)
    9238:	2109883a 	add	r4,r4,r4
    923c:	113f3136 	bltu	r2,r4,8f04 <_malloc_r+0x314>
    9240:	203f3026 	beq	r4,zero,8f04 <_malloc_r+0x314>
    9244:	2086703a 	and	r3,r4,r2
    9248:	1800041e 	bne	r3,zero,925c <_malloc_r+0x66c>
    924c:	2109883a 	add	r4,r4,r4
    9250:	2086703a 	and	r3,r4,r2
    9254:	5ac00104 	addi	r11,r11,4
    9258:	183ffc26 	beq	r3,zero,924c <_malloc_r+0x65c>
    925c:	580d883a 	mov	r6,r11
    9260:	003ee306 	br	8df0 <_malloc_r+0x200>
    9264:	a5000404 	addi	r20,r20,16
    9268:	003f3906 	br	8f50 <_malloc_r+0x360>
    926c:	2009d0ba 	srai	r4,r4,2
    9270:	00800044 	movi	r2,1
    9274:	99c00117 	ldw	r7,4(r19)
    9278:	1104983a 	sll	r2,r2,r4
    927c:	11c4b03a 	or	r2,r2,r7
    9280:	98800115 	stw	r2,4(r19)
    9284:	003f9f06 	br	9104 <_malloc_r+0x514>
    9288:	bd05883a 	add	r2,r23,r20
    928c:	0085c83a 	sub	r2,zero,r2
    9290:	1543ffcc 	andi	r21,r2,4095
    9294:	a80b883a 	mov	r5,r21
    9298:	9009883a 	mov	r4,r18
    929c:	0009e140 	call	9e14 <_sbrk_r>
    92a0:	10ffffe0 	cmpeqi	r3,r2,-1
    92a4:	183f4e26 	beq	r3,zero,8fe0 <_malloc_r+0x3f0>
    92a8:	002b883a 	mov	r21,zero
    92ac:	003f4e06 	br	8fe8 <_malloc_r+0x3f8>
    92b0:	19001568 	cmpgeui	r4,r3,85
    92b4:	2000201e 	bne	r4,zero,9338 <_malloc_r+0x748>
    92b8:	1006d33a 	srli	r3,r2,12
    92bc:	19401bc4 	addi	r5,r3,111
    92c0:	19001b84 	addi	r4,r3,110
    92c4:	280a90fa 	slli	r5,r5,3
    92c8:	003f8206 	br	90d4 <_malloc_r+0x4e4>
    92cc:	10c05568 	cmpgeui	r3,r2,341
    92d0:	1800201e 	bne	r3,zero,9354 <_malloc_r+0x764>
    92d4:	8804d3fa 	srli	r2,r17,15
    92d8:	11801e04 	addi	r6,r2,120
    92dc:	12001dc4 	addi	r8,r2,119
    92e0:	300a90fa 	slli	r5,r6,3
    92e4:	003e7b06 	br	8cd4 <_malloc_r+0xe4>
    92e8:	00800074 	movhi	r2,1
    92ec:	10f71517 	ldw	r3,-9132(r2)
    92f0:	a0c7883a 	add	r3,r20,r3
    92f4:	10f71515 	stw	r3,-9132(r2)
    92f8:	003f2306 	br	8f88 <_malloc_r+0x398>
    92fc:	a903ffcc 	andi	r4,r21,4095
    9300:	203f211e 	bne	r4,zero,8f88 <_malloc_r+0x398>
    9304:	9c000217 	ldw	r16,8(r19)
    9308:	b529883a 	add	r20,r22,r20
    930c:	a5000054 	ori	r20,r20,1
    9310:	85000115 	stw	r20,4(r16)
    9314:	003f4e06 	br	9050 <_malloc_r+0x460>
    9318:	00800074 	movhi	r2,1
    931c:	15f47a15 	stw	r23,-11800(r2)
    9320:	003f2106 	br	8fa8 <_malloc_r+0x3b8>
    9324:	b821883a 	mov	r16,r23
    9328:	003f4906 	br	9050 <_malloc_r+0x460>
    932c:	00800044 	movi	r2,1
    9330:	b8800115 	stw	r2,4(r23)
    9334:	003fae06 	br	91f0 <_malloc_r+0x600>
    9338:	19005568 	cmpgeui	r4,r3,341
    933c:	2000191e 	bne	r4,zero,93a4 <_malloc_r+0x7b4>
    9340:	1006d3fa 	srli	r3,r2,15
    9344:	19401e04 	addi	r5,r3,120
    9348:	19001dc4 	addi	r4,r3,119
    934c:	280a90fa 	slli	r5,r5,3
    9350:	003f6006 	br	90d4 <_malloc_r+0x4e4>
    9354:	10815568 	cmpgeui	r2,r2,1365
    9358:	1000191e 	bne	r2,zero,93c0 <_malloc_r+0x7d0>
    935c:	8804d4ba 	srli	r2,r17,18
    9360:	11801f44 	addi	r6,r2,125
    9364:	12001f04 	addi	r8,r2,124
    9368:	300a90fa 	slli	r5,r6,3
    936c:	003e5906 	br	8cd4 <_malloc_r+0xe4>
    9370:	e73ffe04 	addi	fp,fp,-8
    9374:	a729883a 	add	r20,r20,fp
    9378:	a5e9c83a 	sub	r20,r20,r23
    937c:	002b883a 	mov	r21,zero
    9380:	003f1906 	br	8fe8 <_malloc_r+0x3f8>
    9384:	81400204 	addi	r5,r16,8
    9388:	9009883a 	mov	r4,r18
    938c:	000a69c0 	call	a69c <_free_r>
    9390:	9c000217 	ldw	r16,8(r19)
    9394:	00800074 	movhi	r2,1
    9398:	10b71517 	ldw	r2,-9132(r2)
    939c:	85000117 	ldw	r20,4(r16)
    93a0:	003f2b06 	br	9050 <_malloc_r+0x460>
    93a4:	18c15568 	cmpgeui	r3,r3,1365
    93a8:	1800091e 	bne	r3,zero,93d0 <_malloc_r+0x7e0>
    93ac:	1006d4ba 	srli	r3,r2,18
    93b0:	19401f44 	addi	r5,r3,125
    93b4:	19001f04 	addi	r4,r3,124
    93b8:	280a90fa 	slli	r5,r5,3
    93bc:	003f4506 	br	90d4 <_malloc_r+0x4e4>
    93c0:	0140fe04 	movi	r5,1016
    93c4:	01801fc4 	movi	r6,127
    93c8:	02001f84 	movi	r8,126
    93cc:	003e4106 	br	8cd4 <_malloc_r+0xe4>
    93d0:	0140fe04 	movi	r5,1016
    93d4:	01001f84 	movi	r4,126
    93d8:	003f3e06 	br	90d4 <_malloc_r+0x4e4>
    93dc:	98800117 	ldw	r2,4(r19)
    93e0:	003f9506 	br	9238 <_malloc_r+0x648>

000093e4 <memchr>:
    93e4:	208000cc 	andi	r2,r4,3
    93e8:	280f883a 	mov	r7,r5
    93ec:	10003526 	beq	r2,zero,94c4 <memchr+0xe0>
    93f0:	30bfffc4 	addi	r2,r6,-1
    93f4:	30001926 	beq	r6,zero,945c <memchr+0x78>
    93f8:	20c00003 	ldbu	r3,0(r4)
    93fc:	29803fcc 	andi	r6,r5,255
    9400:	30c0061e 	bne	r6,r3,941c <memchr+0x38>
    9404:	00001706 	br	9464 <memchr+0x80>
    9408:	10bfffc4 	addi	r2,r2,-1
    940c:	10ffffe0 	cmpeqi	r3,r2,-1
    9410:	1800121e 	bne	r3,zero,945c <memchr+0x78>
    9414:	20c00003 	ldbu	r3,0(r4)
    9418:	19801226 	beq	r3,r6,9464 <memchr+0x80>
    941c:	21000044 	addi	r4,r4,1
    9420:	20c000cc 	andi	r3,r4,3
    9424:	183ff81e 	bne	r3,zero,9408 <memchr+0x24>
    9428:	10c00128 	cmpgeui	r3,r2,4
    942c:	18000f1e 	bne	r3,zero,946c <memchr+0x88>
    9430:	10000a26 	beq	r2,zero,945c <memchr+0x78>
    9434:	20c00003 	ldbu	r3,0(r4)
    9438:	29403fcc 	andi	r5,r5,255
    943c:	19400926 	beq	r3,r5,9464 <memchr+0x80>
    9440:	2085883a 	add	r2,r4,r2
    9444:	39403fcc 	andi	r5,r7,255
    9448:	00000206 	br	9454 <memchr+0x70>
    944c:	20c00003 	ldbu	r3,0(r4)
    9450:	19400426 	beq	r3,r5,9464 <memchr+0x80>
    9454:	21000044 	addi	r4,r4,1
    9458:	113ffc1e 	bne	r2,r4,944c <memchr+0x68>
    945c:	0005883a 	mov	r2,zero
    9460:	f800283a 	ret
    9464:	2005883a 	mov	r2,r4
    9468:	f800283a 	ret
    946c:	280c923a 	slli	r6,r5,8
    9470:	2a403fcc 	andi	r9,r5,255
    9474:	02bfbff4 	movhi	r10,65279
    9478:	31bfffcc 	andi	r6,r6,65535
    947c:	3246b03a 	or	r3,r6,r9
    9480:	1812943a 	slli	r9,r3,16
    9484:	02202074 	movhi	r8,32897
    9488:	52bfbfc4 	addi	r10,r10,-257
    948c:	48d2b03a 	or	r9,r9,r3
    9490:	42202004 	addi	r8,r8,-32640
    9494:	20c00017 	ldw	r3,0(r4)
    9498:	48c6f03a 	xor	r3,r9,r3
    949c:	1a8d883a 	add	r6,r3,r10
    94a0:	00c6303a 	nor	r3,zero,r3
    94a4:	30c6703a 	and	r3,r6,r3
    94a8:	1a06703a 	and	r3,r3,r8
    94ac:	183fe11e 	bne	r3,zero,9434 <memchr+0x50>
    94b0:	10bfff04 	addi	r2,r2,-4
    94b4:	10c00128 	cmpgeui	r3,r2,4
    94b8:	21000104 	addi	r4,r4,4
    94bc:	183ff51e 	bne	r3,zero,9494 <memchr+0xb0>
    94c0:	003fdb06 	br	9430 <memchr+0x4c>
    94c4:	3005883a 	mov	r2,r6
    94c8:	003fd706 	br	9428 <memchr+0x44>

000094cc <memcpy>:
    94cc:	30c00430 	cmpltui	r3,r6,16
    94d0:	2005883a 	mov	r2,r4
    94d4:	18002d1e 	bne	r3,zero,958c <memcpy+0xc0>
    94d8:	2906b03a 	or	r3,r5,r4
    94dc:	18c000cc 	andi	r3,r3,3
    94e0:	1800351e 	bne	r3,zero,95b8 <memcpy+0xec>
    94e4:	32fffc04 	addi	r11,r6,-16
    94e8:	5816d13a 	srli	r11,r11,4
    94ec:	2007883a 	mov	r3,r4
    94f0:	280f883a 	mov	r7,r5
    94f4:	5ac00044 	addi	r11,r11,1
    94f8:	5816913a 	slli	r11,r11,4
    94fc:	22c9883a 	add	r4,r4,r11
    9500:	3a000017 	ldw	r8,0(r7)
    9504:	3a800117 	ldw	r10,4(r7)
    9508:	3a400217 	ldw	r9,8(r7)
    950c:	39c00404 	addi	r7,r7,16
    9510:	1a000015 	stw	r8,0(r3)
    9514:	3a3fff17 	ldw	r8,-4(r7)
    9518:	1a800115 	stw	r10,4(r3)
    951c:	1a400215 	stw	r9,8(r3)
    9520:	18c00404 	addi	r3,r3,16
    9524:	1a3fff15 	stw	r8,-4(r3)
    9528:	20fff51e 	bne	r4,r3,9500 <memcpy+0x34>
    952c:	3100030c 	andi	r4,r6,12
    9530:	2acb883a 	add	r5,r5,r11
    9534:	320003cc 	andi	r8,r6,15
    9538:	20002226 	beq	r4,zero,95c4 <memcpy+0xf8>
    953c:	2809883a 	mov	r4,r5
    9540:	1813883a 	mov	r9,r3
    9544:	21000104 	addi	r4,r4,4
    9548:	22bfff17 	ldw	r10,-4(r4)
    954c:	410fc83a 	sub	r7,r8,r4
    9550:	4a400104 	addi	r9,r9,4
    9554:	29cf883a 	add	r7,r5,r7
    9558:	4abfff15 	stw	r10,-4(r9)
    955c:	39c00128 	cmpgeui	r7,r7,4
    9560:	383ff81e 	bne	r7,zero,9544 <memcpy+0x78>
    9564:	413fff04 	addi	r4,r8,-4
    9568:	2008d0ba 	srli	r4,r4,2
    956c:	318000cc 	andi	r6,r6,3
    9570:	31ffffc4 	addi	r7,r6,-1
    9574:	21000044 	addi	r4,r4,1
    9578:	200890ba 	slli	r4,r4,2
    957c:	1907883a 	add	r3,r3,r4
    9580:	290b883a 	add	r5,r5,r4
    9584:	3000041e 	bne	r6,zero,9598 <memcpy+0xcc>
    9588:	f800283a 	ret
    958c:	2007883a 	mov	r3,r4
    9590:	31ffffc4 	addi	r7,r6,-1
    9594:	303ffc26 	beq	r6,zero,9588 <memcpy+0xbc>
    9598:	39c00044 	addi	r7,r7,1
    959c:	19cf883a 	add	r7,r3,r7
    95a0:	29400044 	addi	r5,r5,1
    95a4:	29bfffc3 	ldbu	r6,-1(r5)
    95a8:	18c00044 	addi	r3,r3,1
    95ac:	19bfffc5 	stb	r6,-1(r3)
    95b0:	19fffb1e 	bne	r3,r7,95a0 <memcpy+0xd4>
    95b4:	f800283a 	ret
    95b8:	31ffffc4 	addi	r7,r6,-1
    95bc:	2007883a 	mov	r3,r4
    95c0:	003ff506 	br	9598 <memcpy+0xcc>
    95c4:	400d883a 	mov	r6,r8
    95c8:	003ff106 	br	9590 <memcpy+0xc4>

000095cc <memmove>:
    95cc:	2005883a 	mov	r2,r4
    95d0:	29000a2e 	bgeu	r5,r4,95fc <memmove+0x30>
    95d4:	2989883a 	add	r4,r5,r6
    95d8:	1100082e 	bgeu	r2,r4,95fc <memmove+0x30>
    95dc:	1187883a 	add	r3,r2,r6
    95e0:	30003e26 	beq	r6,zero,96dc <memmove+0x110>
    95e4:	213fffc4 	addi	r4,r4,-1
    95e8:	21400003 	ldbu	r5,0(r4)
    95ec:	18ffffc4 	addi	r3,r3,-1
    95f0:	19400005 	stb	r5,0(r3)
    95f4:	10fffb1e 	bne	r2,r3,95e4 <memmove+0x18>
    95f8:	f800283a 	ret
    95fc:	30c00430 	cmpltui	r3,r6,16
    9600:	18000b26 	beq	r3,zero,9630 <memmove+0x64>
    9604:	1007883a 	mov	r3,r2
    9608:	31ffffc4 	addi	r7,r6,-1
    960c:	30003726 	beq	r6,zero,96ec <memmove+0x120>
    9610:	39c00044 	addi	r7,r7,1
    9614:	29cf883a 	add	r7,r5,r7
    9618:	29400044 	addi	r5,r5,1
    961c:	29bfffc3 	ldbu	r6,-1(r5)
    9620:	18c00044 	addi	r3,r3,1
    9624:	19bfffc5 	stb	r6,-1(r3)
    9628:	29fffb1e 	bne	r5,r7,9618 <memmove+0x4c>
    962c:	f800283a 	ret
    9630:	2886b03a 	or	r3,r5,r2
    9634:	18c000cc 	andi	r3,r3,3
    9638:	1800291e 	bne	r3,zero,96e0 <memmove+0x114>
    963c:	327ffc04 	addi	r9,r6,-16
    9640:	4812d13a 	srli	r9,r9,4
    9644:	280f883a 	mov	r7,r5
    9648:	1007883a 	mov	r3,r2
    964c:	4a400044 	addi	r9,r9,1
    9650:	4812913a 	slli	r9,r9,4
    9654:	1251883a 	add	r8,r2,r9
    9658:	39000017 	ldw	r4,0(r7)
    965c:	18c00404 	addi	r3,r3,16
    9660:	39c00404 	addi	r7,r7,16
    9664:	193ffc15 	stw	r4,-16(r3)
    9668:	393ffd17 	ldw	r4,-12(r7)
    966c:	193ffd15 	stw	r4,-12(r3)
    9670:	393ffe17 	ldw	r4,-8(r7)
    9674:	193ffe15 	stw	r4,-8(r3)
    9678:	393fff17 	ldw	r4,-4(r7)
    967c:	193fff15 	stw	r4,-4(r3)
    9680:	40fff51e 	bne	r8,r3,9658 <memmove+0x8c>
    9684:	3100030c 	andi	r4,r6,12
    9688:	2a4b883a 	add	r5,r5,r9
    968c:	320003cc 	andi	r8,r6,15
    9690:	20001726 	beq	r4,zero,96f0 <memmove+0x124>
    9694:	2813883a 	mov	r9,r5
    9698:	180f883a 	mov	r7,r3
    969c:	4a400104 	addi	r9,r9,4
    96a0:	39c00104 	addi	r7,r7,4
    96a4:	4abfff17 	ldw	r10,-4(r9)
    96a8:	41c9c83a 	sub	r4,r8,r7
    96ac:	1909883a 	add	r4,r3,r4
    96b0:	3abfff15 	stw	r10,-4(r7)
    96b4:	21000128 	cmpgeui	r4,r4,4
    96b8:	203ff81e 	bne	r4,zero,969c <memmove+0xd0>
    96bc:	413fff04 	addi	r4,r8,-4
    96c0:	2008d0ba 	srli	r4,r4,2
    96c4:	318000cc 	andi	r6,r6,3
    96c8:	21000044 	addi	r4,r4,1
    96cc:	200890ba 	slli	r4,r4,2
    96d0:	1907883a 	add	r3,r3,r4
    96d4:	290b883a 	add	r5,r5,r4
    96d8:	003fcb06 	br	9608 <memmove+0x3c>
    96dc:	f800283a 	ret
    96e0:	31ffffc4 	addi	r7,r6,-1
    96e4:	1007883a 	mov	r3,r2
    96e8:	003fc906 	br	9610 <memmove+0x44>
    96ec:	f800283a 	ret
    96f0:	400d883a 	mov	r6,r8
    96f4:	003fc406 	br	9608 <memmove+0x3c>

000096f8 <memset>:
    96f8:	20c000cc 	andi	r3,r4,3
    96fc:	2005883a 	mov	r2,r4
    9700:	18003626 	beq	r3,zero,97dc <memset+0xe4>
    9704:	31ffffc4 	addi	r7,r6,-1
    9708:	30003326 	beq	r6,zero,97d8 <memset+0xe0>
    970c:	2811883a 	mov	r8,r5
    9710:	2007883a 	mov	r3,r4
    9714:	00000306 	br	9724 <memset+0x2c>
    9718:	39ffffc4 	addi	r7,r7,-1
    971c:	39bfffe0 	cmpeqi	r6,r7,-1
    9720:	30002d1e 	bne	r6,zero,97d8 <memset+0xe0>
    9724:	18c00044 	addi	r3,r3,1
    9728:	1a3fffc5 	stb	r8,-1(r3)
    972c:	198000cc 	andi	r6,r3,3
    9730:	303ff91e 	bne	r6,zero,9718 <memset+0x20>
    9734:	39000130 	cmpltui	r4,r7,4
    9738:	2000221e 	bne	r4,zero,97c4 <memset+0xcc>
    973c:	29003fcc 	andi	r4,r5,255
    9740:	200c923a 	slli	r6,r4,8
    9744:	3a000430 	cmpltui	r8,r7,16
    9748:	3108b03a 	or	r4,r6,r4
    974c:	200c943a 	slli	r6,r4,16
    9750:	310cb03a 	or	r6,r6,r4
    9754:	40000e1e 	bne	r8,zero,9790 <memset+0x98>
    9758:	3a3ffc04 	addi	r8,r7,-16
    975c:	4010d13a 	srli	r8,r8,4
    9760:	42000044 	addi	r8,r8,1
    9764:	4010913a 	slli	r8,r8,4
    9768:	1a11883a 	add	r8,r3,r8
    976c:	19800015 	stw	r6,0(r3)
    9770:	19800115 	stw	r6,4(r3)
    9774:	19800215 	stw	r6,8(r3)
    9778:	18c00404 	addi	r3,r3,16
    977c:	19bfff15 	stw	r6,-4(r3)
    9780:	40fffa1e 	bne	r8,r3,976c <memset+0x74>
    9784:	3900030c 	andi	r4,r7,12
    9788:	39c003cc 	andi	r7,r7,15
    978c:	20000d26 	beq	r4,zero,97c4 <memset+0xcc>
    9790:	1809883a 	mov	r4,r3
    9794:	21000104 	addi	r4,r4,4
    9798:	3911c83a 	sub	r8,r7,r4
    979c:	1a11883a 	add	r8,r3,r8
    97a0:	21bfff15 	stw	r6,-4(r4)
    97a4:	42000128 	cmpgeui	r8,r8,4
    97a8:	403ffa1e 	bne	r8,zero,9794 <memset+0x9c>
    97ac:	393fff04 	addi	r4,r7,-4
    97b0:	2008d0ba 	srli	r4,r4,2
    97b4:	39c000cc 	andi	r7,r7,3
    97b8:	21000044 	addi	r4,r4,1
    97bc:	200890ba 	slli	r4,r4,2
    97c0:	1907883a 	add	r3,r3,r4
    97c4:	38000426 	beq	r7,zero,97d8 <memset+0xe0>
    97c8:	19cf883a 	add	r7,r3,r7
    97cc:	18c00044 	addi	r3,r3,1
    97d0:	197fffc5 	stb	r5,-1(r3)
    97d4:	38fffd1e 	bne	r7,r3,97cc <memset+0xd4>
    97d8:	f800283a 	ret
    97dc:	2007883a 	mov	r3,r4
    97e0:	300f883a 	mov	r7,r6
    97e4:	003fd306 	br	9734 <memset+0x3c>

000097e8 <_realloc_r>:
    97e8:	defff504 	addi	sp,sp,-44
    97ec:	dcc00415 	stw	r19,16(sp)
    97f0:	dfc00a15 	stw	ra,40(sp)
    97f4:	df000915 	stw	fp,36(sp)
    97f8:	ddc00815 	stw	r23,32(sp)
    97fc:	dd800715 	stw	r22,28(sp)
    9800:	dd400615 	stw	r21,24(sp)
    9804:	dd000515 	stw	r20,20(sp)
    9808:	dc800315 	stw	r18,12(sp)
    980c:	dc400215 	stw	r17,8(sp)
    9810:	dc000115 	stw	r16,4(sp)
    9814:	3027883a 	mov	r19,r6
    9818:	28008b26 	beq	r5,zero,9a48 <_realloc_r+0x260>
    981c:	282d883a 	mov	r22,r5
    9820:	202b883a 	mov	r21,r4
    9824:	9c0002c4 	addi	r16,r19,11
    9828:	000b4780 	call	b478 <__malloc_lock>
    982c:	808005f0 	cmpltui	r2,r16,23
    9830:	1000521e 	bne	r2,zero,997c <_realloc_r+0x194>
    9834:	017ffe04 	movi	r5,-8
    9838:	8160703a 	and	r16,r16,r5
    983c:	8007883a 	mov	r3,r16
    9840:	80005116 	blt	r16,zero,9988 <_realloc_r+0x1a0>
    9844:	84c05036 	bltu	r16,r19,9988 <_realloc_r+0x1a0>
    9848:	b0bfff17 	ldw	r2,-4(r22)
    984c:	017fff04 	movi	r5,-4
    9850:	b4bffe04 	addi	r18,r22,-8
    9854:	1162703a 	and	r17,r2,r5
    9858:	9469883a 	add	r20,r18,r17
    985c:	88c0390e 	bge	r17,r3,9944 <_realloc_r+0x15c>
    9860:	07000074 	movhi	fp,1
    9864:	e7330104 	addi	fp,fp,-13308
    9868:	e2000217 	ldw	r8,8(fp)
    986c:	a1000117 	ldw	r4,4(r20)
    9870:	45008e26 	beq	r8,r20,9aac <_realloc_r+0x2c4>
    9874:	01bfff84 	movi	r6,-2
    9878:	218c703a 	and	r6,r4,r6
    987c:	a18d883a 	add	r6,r20,r6
    9880:	31800117 	ldw	r6,4(r6)
    9884:	3180004c 	andi	r6,r6,1
    9888:	30004f1e 	bne	r6,zero,99c8 <_realloc_r+0x1e0>
    988c:	2148703a 	and	r4,r4,r5
    9890:	890b883a 	add	r5,r17,r4
    9894:	28c0cb0e 	bge	r5,r3,9bc4 <_realloc_r+0x3dc>
    9898:	1080004c 	andi	r2,r2,1
    989c:	10004c1e 	bne	r2,zero,99d0 <_realloc_r+0x1e8>
    98a0:	b1fffe17 	ldw	r7,-8(r22)
    98a4:	00bfff04 	movi	r2,-4
    98a8:	91cfc83a 	sub	r7,r18,r7
    98ac:	39400117 	ldw	r5,4(r7)
    98b0:	288a703a 	and	r5,r5,r2
    98b4:	a0000426 	beq	r20,zero,98c8 <_realloc_r+0xe0>
    98b8:	896f883a 	add	r23,r17,r5
    98bc:	b92f883a 	add	r23,r23,r4
    98c0:	4500cb26 	beq	r8,r20,9bf0 <_realloc_r+0x408>
    98c4:	b8c0930e 	bge	r23,r3,9b14 <_realloc_r+0x32c>
    98c8:	38004126 	beq	r7,zero,99d0 <_realloc_r+0x1e8>
    98cc:	896f883a 	add	r23,r17,r5
    98d0:	b8c03f16 	blt	r23,r3,99d0 <_realloc_r+0x1e8>
    98d4:	38c00217 	ldw	r3,8(r7)
    98d8:	38800317 	ldw	r2,12(r7)
    98dc:	89bfff04 	addi	r6,r17,-4
    98e0:	31000968 	cmpgeui	r4,r6,37
    98e4:	18800315 	stw	r2,12(r3)
    98e8:	10c00215 	stw	r3,8(r2)
    98ec:	3de9883a 	add	r20,r7,r23
    98f0:	38c00204 	addi	r3,r7,8
    98f4:	2000f81e 	bne	r4,zero,9cd8 <_realloc_r+0x4f0>
    98f8:	30800530 	cmpltui	r2,r6,20
    98fc:	b1000017 	ldw	r4,0(r22)
    9900:	1000eb1e 	bne	r2,zero,9cb0 <_realloc_r+0x4c8>
    9904:	39000215 	stw	r4,8(r7)
    9908:	b1000117 	ldw	r4,4(r22)
    990c:	30800728 	cmpgeui	r2,r6,28
    9910:	39000315 	stw	r4,12(r7)
    9914:	1001041e 	bne	r2,zero,9d28 <_realloc_r+0x540>
    9918:	b1000217 	ldw	r4,8(r22)
    991c:	38800404 	addi	r2,r7,16
    9920:	b5800204 	addi	r22,r22,8
    9924:	11000015 	stw	r4,0(r2)
    9928:	b1000117 	ldw	r4,4(r22)
    992c:	b823883a 	mov	r17,r23
    9930:	3825883a 	mov	r18,r7
    9934:	11000115 	stw	r4,4(r2)
    9938:	b1000217 	ldw	r4,8(r22)
    993c:	182d883a 	mov	r22,r3
    9940:	11000215 	stw	r4,8(r2)
    9944:	91800117 	ldw	r6,4(r18)
    9948:	8c05c83a 	sub	r2,r17,r16
    994c:	10c00430 	cmpltui	r3,r2,16
    9950:	3180004c 	andi	r6,r6,1
    9954:	18004926 	beq	r3,zero,9a7c <_realloc_r+0x294>
    9958:	898cb03a 	or	r6,r17,r6
    995c:	91800115 	stw	r6,4(r18)
    9960:	a0800117 	ldw	r2,4(r20)
    9964:	10800054 	ori	r2,r2,1
    9968:	a0800115 	stw	r2,4(r20)
    996c:	a809883a 	mov	r4,r21
    9970:	000b49c0 	call	b49c <__malloc_unlock>
    9974:	b027883a 	mov	r19,r22
    9978:	00000606 	br	9994 <_realloc_r+0x1ac>
    997c:	04000404 	movi	r16,16
    9980:	00c00404 	movi	r3,16
    9984:	84ffb02e 	bgeu	r16,r19,9848 <_realloc_r+0x60>
    9988:	00800304 	movi	r2,12
    998c:	a8800015 	stw	r2,0(r21)
    9990:	0027883a 	mov	r19,zero
    9994:	9805883a 	mov	r2,r19
    9998:	dfc00a17 	ldw	ra,40(sp)
    999c:	df000917 	ldw	fp,36(sp)
    99a0:	ddc00817 	ldw	r23,32(sp)
    99a4:	dd800717 	ldw	r22,28(sp)
    99a8:	dd400617 	ldw	r21,24(sp)
    99ac:	dd000517 	ldw	r20,20(sp)
    99b0:	dcc00417 	ldw	r19,16(sp)
    99b4:	dc800317 	ldw	r18,12(sp)
    99b8:	dc400217 	ldw	r17,8(sp)
    99bc:	dc000117 	ldw	r16,4(sp)
    99c0:	dec00b04 	addi	sp,sp,44
    99c4:	f800283a 	ret
    99c8:	1080004c 	andi	r2,r2,1
    99cc:	10007826 	beq	r2,zero,9bb0 <_realloc_r+0x3c8>
    99d0:	980b883a 	mov	r5,r19
    99d4:	a809883a 	mov	r4,r21
    99d8:	0008bf00 	call	8bf0 <_malloc_r>
    99dc:	1027883a 	mov	r19,r2
    99e0:	10001626 	beq	r2,zero,9a3c <_realloc_r+0x254>
    99e4:	b0bfff17 	ldw	r2,-4(r22)
    99e8:	013fff84 	movi	r4,-2
    99ec:	98fffe04 	addi	r3,r19,-8
    99f0:	1104703a 	and	r2,r2,r4
    99f4:	9085883a 	add	r2,r18,r2
    99f8:	10c06726 	beq	r2,r3,9b98 <_realloc_r+0x3b0>
    99fc:	89bfff04 	addi	r6,r17,-4
    9a00:	30800968 	cmpgeui	r2,r6,37
    9a04:	1000761e 	bne	r2,zero,9be0 <_realloc_r+0x3f8>
    9a08:	30800530 	cmpltui	r2,r6,20
    9a0c:	b1000017 	ldw	r4,0(r22)
    9a10:	10003726 	beq	r2,zero,9af0 <_realloc_r+0x308>
    9a14:	9805883a 	mov	r2,r19
    9a18:	b007883a 	mov	r3,r22
    9a1c:	11000015 	stw	r4,0(r2)
    9a20:	19000117 	ldw	r4,4(r3)
    9a24:	11000115 	stw	r4,4(r2)
    9a28:	18c00217 	ldw	r3,8(r3)
    9a2c:	10c00215 	stw	r3,8(r2)
    9a30:	b00b883a 	mov	r5,r22
    9a34:	a809883a 	mov	r4,r21
    9a38:	000a69c0 	call	a69c <_free_r>
    9a3c:	a809883a 	mov	r4,r21
    9a40:	000b49c0 	call	b49c <__malloc_unlock>
    9a44:	003fd306 	br	9994 <_realloc_r+0x1ac>
    9a48:	300b883a 	mov	r5,r6
    9a4c:	dfc00a17 	ldw	ra,40(sp)
    9a50:	df000917 	ldw	fp,36(sp)
    9a54:	ddc00817 	ldw	r23,32(sp)
    9a58:	dd800717 	ldw	r22,28(sp)
    9a5c:	dd400617 	ldw	r21,24(sp)
    9a60:	dd000517 	ldw	r20,20(sp)
    9a64:	dcc00417 	ldw	r19,16(sp)
    9a68:	dc800317 	ldw	r18,12(sp)
    9a6c:	dc400217 	ldw	r17,8(sp)
    9a70:	dc000117 	ldw	r16,4(sp)
    9a74:	dec00b04 	addi	sp,sp,44
    9a78:	0008bf01 	jmpi	8bf0 <_malloc_r>
    9a7c:	340cb03a 	or	r6,r6,r16
    9a80:	91800115 	stw	r6,4(r18)
    9a84:	940b883a 	add	r5,r18,r16
    9a88:	10800054 	ori	r2,r2,1
    9a8c:	28800115 	stw	r2,4(r5)
    9a90:	a0800117 	ldw	r2,4(r20)
    9a94:	29400204 	addi	r5,r5,8
    9a98:	a809883a 	mov	r4,r21
    9a9c:	10800054 	ori	r2,r2,1
    9aa0:	a0800115 	stw	r2,4(r20)
    9aa4:	000a69c0 	call	a69c <_free_r>
    9aa8:	003fb006 	br	996c <_realloc_r+0x184>
    9aac:	2148703a 	and	r4,r4,r5
    9ab0:	890b883a 	add	r5,r17,r4
    9ab4:	81800404 	addi	r6,r16,16
    9ab8:	29bf7716 	blt	r5,r6,9898 <_realloc_r+0xb0>
    9abc:	9425883a 	add	r18,r18,r16
    9ac0:	2c05c83a 	sub	r2,r5,r16
    9ac4:	e4800215 	stw	r18,8(fp)
    9ac8:	10800054 	ori	r2,r2,1
    9acc:	90800115 	stw	r2,4(r18)
    9ad0:	b0bfff17 	ldw	r2,-4(r22)
    9ad4:	a809883a 	mov	r4,r21
    9ad8:	b027883a 	mov	r19,r22
    9adc:	1080004c 	andi	r2,r2,1
    9ae0:	1420b03a 	or	r16,r2,r16
    9ae4:	b43fff15 	stw	r16,-4(r22)
    9ae8:	000b49c0 	call	b49c <__malloc_unlock>
    9aec:	003fa906 	br	9994 <_realloc_r+0x1ac>
    9af0:	99000015 	stw	r4,0(r19)
    9af4:	b0c00117 	ldw	r3,4(r22)
    9af8:	30800728 	cmpgeui	r2,r6,28
    9afc:	98c00115 	stw	r3,4(r19)
    9b00:	1000611e 	bne	r2,zero,9c88 <_realloc_r+0x4a0>
    9b04:	b0c00204 	addi	r3,r22,8
    9b08:	98800204 	addi	r2,r19,8
    9b0c:	b1000217 	ldw	r4,8(r22)
    9b10:	003fc206 	br	9a1c <_realloc_r+0x234>
    9b14:	a0800317 	ldw	r2,12(r20)
    9b18:	a0c00217 	ldw	r3,8(r20)
    9b1c:	89bfff04 	addi	r6,r17,-4
    9b20:	31000968 	cmpgeui	r4,r6,37
    9b24:	18800315 	stw	r2,12(r3)
    9b28:	10c00215 	stw	r3,8(r2)
    9b2c:	38c00217 	ldw	r3,8(r7)
    9b30:	38800317 	ldw	r2,12(r7)
    9b34:	3a000204 	addi	r8,r7,8
    9b38:	3de9883a 	add	r20,r7,r23
    9b3c:	18800315 	stw	r2,12(r3)
    9b40:	10c00215 	stw	r3,8(r2)
    9b44:	20006f1e 	bne	r4,zero,9d04 <_realloc_r+0x51c>
    9b48:	30800530 	cmpltui	r2,r6,20
    9b4c:	b0c00017 	ldw	r3,0(r22)
    9b50:	10006a1e 	bne	r2,zero,9cfc <_realloc_r+0x514>
    9b54:	38c00215 	stw	r3,8(r7)
    9b58:	b0c00117 	ldw	r3,4(r22)
    9b5c:	30800728 	cmpgeui	r2,r6,28
    9b60:	38c00315 	stw	r3,12(r7)
    9b64:	10007a1e 	bne	r2,zero,9d50 <_realloc_r+0x568>
    9b68:	b0c00217 	ldw	r3,8(r22)
    9b6c:	38800404 	addi	r2,r7,16
    9b70:	b5800204 	addi	r22,r22,8
    9b74:	10c00015 	stw	r3,0(r2)
    9b78:	b0c00117 	ldw	r3,4(r22)
    9b7c:	b823883a 	mov	r17,r23
    9b80:	3825883a 	mov	r18,r7
    9b84:	10c00115 	stw	r3,4(r2)
    9b88:	b0c00217 	ldw	r3,8(r22)
    9b8c:	402d883a 	mov	r22,r8
    9b90:	10c00215 	stw	r3,8(r2)
    9b94:	003f6b06 	br	9944 <_realloc_r+0x15c>
    9b98:	98bfff17 	ldw	r2,-4(r19)
    9b9c:	00ffff04 	movi	r3,-4
    9ba0:	10c4703a 	and	r2,r2,r3
    9ba4:	88a3883a 	add	r17,r17,r2
    9ba8:	9469883a 	add	r20,r18,r17
    9bac:	003f6506 	br	9944 <_realloc_r+0x15c>
    9bb0:	b1fffe17 	ldw	r7,-8(r22)
    9bb4:	91cfc83a 	sub	r7,r18,r7
    9bb8:	39000117 	ldw	r4,4(r7)
    9bbc:	214a703a 	and	r5,r4,r5
    9bc0:	003f4106 	br	98c8 <_realloc_r+0xe0>
    9bc4:	a0800317 	ldw	r2,12(r20)
    9bc8:	a0c00217 	ldw	r3,8(r20)
    9bcc:	2823883a 	mov	r17,r5
    9bd0:	9169883a 	add	r20,r18,r5
    9bd4:	18800315 	stw	r2,12(r3)
    9bd8:	10c00215 	stw	r3,8(r2)
    9bdc:	003f5906 	br	9944 <_realloc_r+0x15c>
    9be0:	b00b883a 	mov	r5,r22
    9be4:	9809883a 	mov	r4,r19
    9be8:	00095cc0 	call	95cc <memmove>
    9bec:	003f9006 	br	9a30 <_realloc_r+0x248>
    9bf0:	80800404 	addi	r2,r16,16
    9bf4:	b8bf3416 	blt	r23,r2,98c8 <_realloc_r+0xe0>
    9bf8:	38800317 	ldw	r2,12(r7)
    9bfc:	38c00217 	ldw	r3,8(r7)
    9c00:	89bfff04 	addi	r6,r17,-4
    9c04:	31000968 	cmpgeui	r4,r6,37
    9c08:	18800315 	stw	r2,12(r3)
    9c0c:	10c00215 	stw	r3,8(r2)
    9c10:	3cc00204 	addi	r19,r7,8
    9c14:	20005a1e 	bne	r4,zero,9d80 <_realloc_r+0x598>
    9c18:	30800530 	cmpltui	r2,r6,20
    9c1c:	b0c00017 	ldw	r3,0(r22)
    9c20:	1000551e 	bne	r2,zero,9d78 <_realloc_r+0x590>
    9c24:	38c00215 	stw	r3,8(r7)
    9c28:	b0c00117 	ldw	r3,4(r22)
    9c2c:	30800728 	cmpgeui	r2,r6,28
    9c30:	38c00315 	stw	r3,12(r7)
    9c34:	1000661e 	bne	r2,zero,9dd0 <_realloc_r+0x5e8>
    9c38:	b0c00217 	ldw	r3,8(r22)
    9c3c:	38800404 	addi	r2,r7,16
    9c40:	b5800204 	addi	r22,r22,8
    9c44:	10c00015 	stw	r3,0(r2)
    9c48:	b0c00117 	ldw	r3,4(r22)
    9c4c:	10c00115 	stw	r3,4(r2)
    9c50:	b0c00217 	ldw	r3,8(r22)
    9c54:	10c00215 	stw	r3,8(r2)
    9c58:	3c07883a 	add	r3,r7,r16
    9c5c:	bc05c83a 	sub	r2,r23,r16
    9c60:	e0c00215 	stw	r3,8(fp)
    9c64:	10800054 	ori	r2,r2,1
    9c68:	18800115 	stw	r2,4(r3)
    9c6c:	38800117 	ldw	r2,4(r7)
    9c70:	a809883a 	mov	r4,r21
    9c74:	1080004c 	andi	r2,r2,1
    9c78:	1420b03a 	or	r16,r2,r16
    9c7c:	3c000115 	stw	r16,4(r7)
    9c80:	000b49c0 	call	b49c <__malloc_unlock>
    9c84:	003f4306 	br	9994 <_realloc_r+0x1ac>
    9c88:	b0800217 	ldw	r2,8(r22)
    9c8c:	31800920 	cmpeqi	r6,r6,36
    9c90:	98800215 	stw	r2,8(r19)
    9c94:	b0800317 	ldw	r2,12(r22)
    9c98:	98800315 	stw	r2,12(r19)
    9c9c:	3000061e 	bne	r6,zero,9cb8 <_realloc_r+0x4d0>
    9ca0:	b0c00404 	addi	r3,r22,16
    9ca4:	98800404 	addi	r2,r19,16
    9ca8:	b1000417 	ldw	r4,16(r22)
    9cac:	003f5b06 	br	9a1c <_realloc_r+0x234>
    9cb0:	1805883a 	mov	r2,r3
    9cb4:	003f1b06 	br	9924 <_realloc_r+0x13c>
    9cb8:	b1000417 	ldw	r4,16(r22)
    9cbc:	b0c00604 	addi	r3,r22,24
    9cc0:	98800604 	addi	r2,r19,24
    9cc4:	99000415 	stw	r4,16(r19)
    9cc8:	b1000517 	ldw	r4,20(r22)
    9ccc:	99000515 	stw	r4,20(r19)
    9cd0:	b1000617 	ldw	r4,24(r22)
    9cd4:	003f5106 	br	9a1c <_realloc_r+0x234>
    9cd8:	b00b883a 	mov	r5,r22
    9cdc:	1809883a 	mov	r4,r3
    9ce0:	d9c00015 	stw	r7,0(sp)
    9ce4:	00095cc0 	call	95cc <memmove>
    9ce8:	d9c00017 	ldw	r7,0(sp)
    9cec:	102d883a 	mov	r22,r2
    9cf0:	b823883a 	mov	r17,r23
    9cf4:	3825883a 	mov	r18,r7
    9cf8:	003f1206 	br	9944 <_realloc_r+0x15c>
    9cfc:	4005883a 	mov	r2,r8
    9d00:	003f9c06 	br	9b74 <_realloc_r+0x38c>
    9d04:	b00b883a 	mov	r5,r22
    9d08:	4009883a 	mov	r4,r8
    9d0c:	d9c00015 	stw	r7,0(sp)
    9d10:	00095cc0 	call	95cc <memmove>
    9d14:	d9c00017 	ldw	r7,0(sp)
    9d18:	102d883a 	mov	r22,r2
    9d1c:	b823883a 	mov	r17,r23
    9d20:	3825883a 	mov	r18,r7
    9d24:	003f0706 	br	9944 <_realloc_r+0x15c>
    9d28:	b0800217 	ldw	r2,8(r22)
    9d2c:	31800920 	cmpeqi	r6,r6,36
    9d30:	38800415 	stw	r2,16(r7)
    9d34:	b0800317 	ldw	r2,12(r22)
    9d38:	38800515 	stw	r2,20(r7)
    9d3c:	b1000417 	ldw	r4,16(r22)
    9d40:	3000151e 	bne	r6,zero,9d98 <_realloc_r+0x5b0>
    9d44:	38800604 	addi	r2,r7,24
    9d48:	b5800404 	addi	r22,r22,16
    9d4c:	003ef506 	br	9924 <_realloc_r+0x13c>
    9d50:	b0800217 	ldw	r2,8(r22)
    9d54:	31800920 	cmpeqi	r6,r6,36
    9d58:	38800415 	stw	r2,16(r7)
    9d5c:	b0800317 	ldw	r2,12(r22)
    9d60:	38800515 	stw	r2,20(r7)
    9d64:	b0c00417 	ldw	r3,16(r22)
    9d68:	3000121e 	bne	r6,zero,9db4 <_realloc_r+0x5cc>
    9d6c:	38800604 	addi	r2,r7,24
    9d70:	b5800404 	addi	r22,r22,16
    9d74:	003f7f06 	br	9b74 <_realloc_r+0x38c>
    9d78:	9805883a 	mov	r2,r19
    9d7c:	003fb106 	br	9c44 <_realloc_r+0x45c>
    9d80:	b00b883a 	mov	r5,r22
    9d84:	9809883a 	mov	r4,r19
    9d88:	d9c00015 	stw	r7,0(sp)
    9d8c:	00095cc0 	call	95cc <memmove>
    9d90:	d9c00017 	ldw	r7,0(sp)
    9d94:	003fb006 	br	9c58 <_realloc_r+0x470>
    9d98:	b5800604 	addi	r22,r22,24
    9d9c:	39000615 	stw	r4,24(r7)
    9da0:	b13fff17 	ldw	r4,-4(r22)
    9da4:	38800804 	addi	r2,r7,32
    9da8:	39000715 	stw	r4,28(r7)
    9dac:	b1000017 	ldw	r4,0(r22)
    9db0:	003edc06 	br	9924 <_realloc_r+0x13c>
    9db4:	b5800604 	addi	r22,r22,24
    9db8:	38c00615 	stw	r3,24(r7)
    9dbc:	b0ffff17 	ldw	r3,-4(r22)
    9dc0:	38800804 	addi	r2,r7,32
    9dc4:	38c00715 	stw	r3,28(r7)
    9dc8:	b0c00017 	ldw	r3,0(r22)
    9dcc:	003f6906 	br	9b74 <_realloc_r+0x38c>
    9dd0:	b0800217 	ldw	r2,8(r22)
    9dd4:	31800920 	cmpeqi	r6,r6,36
    9dd8:	38800415 	stw	r2,16(r7)
    9ddc:	b0800317 	ldw	r2,12(r22)
    9de0:	38800515 	stw	r2,20(r7)
    9de4:	b0c00417 	ldw	r3,16(r22)
    9de8:	3000031e 	bne	r6,zero,9df8 <_realloc_r+0x610>
    9dec:	38800604 	addi	r2,r7,24
    9df0:	b5800404 	addi	r22,r22,16
    9df4:	003f9306 	br	9c44 <_realloc_r+0x45c>
    9df8:	b5800604 	addi	r22,r22,24
    9dfc:	38c00615 	stw	r3,24(r7)
    9e00:	b0ffff17 	ldw	r3,-4(r22)
    9e04:	38800804 	addi	r2,r7,32
    9e08:	38c00715 	stw	r3,28(r7)
    9e0c:	b0c00017 	ldw	r3,0(r22)
    9e10:	003f8c06 	br	9c44 <_realloc_r+0x45c>

00009e14 <_sbrk_r>:
    9e14:	defffe04 	addi	sp,sp,-8
    9e18:	dc000015 	stw	r16,0(sp)
    9e1c:	00800074 	movhi	r2,1
    9e20:	2021883a 	mov	r16,r4
    9e24:	2809883a 	mov	r4,r5
    9e28:	dfc00115 	stw	ra,4(sp)
    9e2c:	10371115 	stw	zero,-9148(r2)
    9e30:	000b6740 	call	b674 <sbrk>
    9e34:	10ffffd8 	cmpnei	r3,r2,-1
    9e38:	18000426 	beq	r3,zero,9e4c <_sbrk_r+0x38>
    9e3c:	dfc00117 	ldw	ra,4(sp)
    9e40:	dc000017 	ldw	r16,0(sp)
    9e44:	dec00204 	addi	sp,sp,8
    9e48:	f800283a 	ret
    9e4c:	00c00074 	movhi	r3,1
    9e50:	18f71117 	ldw	r3,-9148(r3)
    9e54:	183ff926 	beq	r3,zero,9e3c <_sbrk_r+0x28>
    9e58:	80c00015 	stw	r3,0(r16)
    9e5c:	dfc00117 	ldw	ra,4(sp)
    9e60:	dc000017 	ldw	r16,0(sp)
    9e64:	dec00204 	addi	sp,sp,8
    9e68:	f800283a 	ret

00009e6c <__sread>:
    9e6c:	defffe04 	addi	sp,sp,-8
    9e70:	dc000015 	stw	r16,0(sp)
    9e74:	2821883a 	mov	r16,r5
    9e78:	2940038f 	ldh	r5,14(r5)
    9e7c:	dfc00115 	stw	ra,4(sp)
    9e80:	000abd00 	call	abd0 <_read_r>
    9e84:	10000716 	blt	r2,zero,9ea4 <__sread+0x38>
    9e88:	80c01417 	ldw	r3,80(r16)
    9e8c:	1887883a 	add	r3,r3,r2
    9e90:	80c01415 	stw	r3,80(r16)
    9e94:	dfc00117 	ldw	ra,4(sp)
    9e98:	dc000017 	ldw	r16,0(sp)
    9e9c:	dec00204 	addi	sp,sp,8
    9ea0:	f800283a 	ret
    9ea4:	80c0030b 	ldhu	r3,12(r16)
    9ea8:	18fbffcc 	andi	r3,r3,61439
    9eac:	80c0030d 	sth	r3,12(r16)
    9eb0:	dfc00117 	ldw	ra,4(sp)
    9eb4:	dc000017 	ldw	r16,0(sp)
    9eb8:	dec00204 	addi	sp,sp,8
    9ebc:	f800283a 	ret

00009ec0 <__seofread>:
    9ec0:	0005883a 	mov	r2,zero
    9ec4:	f800283a 	ret

00009ec8 <__swrite>:
    9ec8:	2880030b 	ldhu	r2,12(r5)
    9ecc:	defffb04 	addi	sp,sp,-20
    9ed0:	dcc00315 	stw	r19,12(sp)
    9ed4:	dc800215 	stw	r18,8(sp)
    9ed8:	dc400115 	stw	r17,4(sp)
    9edc:	dc000015 	stw	r16,0(sp)
    9ee0:	dfc00415 	stw	ra,16(sp)
    9ee4:	10c0400c 	andi	r3,r2,256
    9ee8:	2821883a 	mov	r16,r5
    9eec:	2023883a 	mov	r17,r4
    9ef0:	3025883a 	mov	r18,r6
    9ef4:	3827883a 	mov	r19,r7
    9ef8:	2940038f 	ldh	r5,14(r5)
    9efc:	18000c1e 	bne	r3,zero,9f30 <__swrite+0x68>
    9f00:	10bbffcc 	andi	r2,r2,61439
    9f04:	980f883a 	mov	r7,r19
    9f08:	900d883a 	mov	r6,r18
    9f0c:	8809883a 	mov	r4,r17
    9f10:	8080030d 	sth	r2,12(r16)
    9f14:	dfc00417 	ldw	ra,16(sp)
    9f18:	dcc00317 	ldw	r19,12(sp)
    9f1c:	dc800217 	ldw	r18,8(sp)
    9f20:	dc400117 	ldw	r17,4(sp)
    9f24:	dc000017 	ldw	r16,0(sp)
    9f28:	dec00504 	addi	sp,sp,20
    9f2c:	0009fac1 	jmpi	9fac <_write_r>
    9f30:	01c00084 	movi	r7,2
    9f34:	000d883a 	mov	r6,zero
    9f38:	000a9980 	call	a998 <_lseek_r>
    9f3c:	8080030b 	ldhu	r2,12(r16)
    9f40:	8140038f 	ldh	r5,14(r16)
    9f44:	003fee06 	br	9f00 <__swrite+0x38>

00009f48 <__sseek>:
    9f48:	defffe04 	addi	sp,sp,-8
    9f4c:	dc000015 	stw	r16,0(sp)
    9f50:	2821883a 	mov	r16,r5
    9f54:	2940038f 	ldh	r5,14(r5)
    9f58:	dfc00115 	stw	ra,4(sp)
    9f5c:	000a9980 	call	a998 <_lseek_r>
    9f60:	10ffffd8 	cmpnei	r3,r2,-1
    9f64:	18000826 	beq	r3,zero,9f88 <__sseek+0x40>
    9f68:	80c0030b 	ldhu	r3,12(r16)
    9f6c:	80801415 	stw	r2,80(r16)
    9f70:	18c40014 	ori	r3,r3,4096
    9f74:	80c0030d 	sth	r3,12(r16)
    9f78:	dfc00117 	ldw	ra,4(sp)
    9f7c:	dc000017 	ldw	r16,0(sp)
    9f80:	dec00204 	addi	sp,sp,8
    9f84:	f800283a 	ret
    9f88:	80c0030b 	ldhu	r3,12(r16)
    9f8c:	18fbffcc 	andi	r3,r3,61439
    9f90:	80c0030d 	sth	r3,12(r16)
    9f94:	dfc00117 	ldw	ra,4(sp)
    9f98:	dc000017 	ldw	r16,0(sp)
    9f9c:	dec00204 	addi	sp,sp,8
    9fa0:	f800283a 	ret

00009fa4 <__sclose>:
    9fa4:	2940038f 	ldh	r5,14(r5)
    9fa8:	000a1701 	jmpi	a170 <_close_r>

00009fac <_write_r>:
    9fac:	defffe04 	addi	sp,sp,-8
    9fb0:	2805883a 	mov	r2,r5
    9fb4:	dc000015 	stw	r16,0(sp)
    9fb8:	300b883a 	mov	r5,r6
    9fbc:	2021883a 	mov	r16,r4
    9fc0:	380d883a 	mov	r6,r7
    9fc4:	1009883a 	mov	r4,r2
    9fc8:	00800074 	movhi	r2,1
    9fcc:	dfc00115 	stw	ra,4(sp)
    9fd0:	10371115 	stw	zero,-9148(r2)
    9fd4:	000b7900 	call	b790 <write>
    9fd8:	10ffffd8 	cmpnei	r3,r2,-1
    9fdc:	18000426 	beq	r3,zero,9ff0 <_write_r+0x44>
    9fe0:	dfc00117 	ldw	ra,4(sp)
    9fe4:	dc000017 	ldw	r16,0(sp)
    9fe8:	dec00204 	addi	sp,sp,8
    9fec:	f800283a 	ret
    9ff0:	00c00074 	movhi	r3,1
    9ff4:	18f71117 	ldw	r3,-9148(r3)
    9ff8:	183ff926 	beq	r3,zero,9fe0 <_write_r+0x34>
    9ffc:	80c00015 	stw	r3,0(r16)
    a000:	dfc00117 	ldw	ra,4(sp)
    a004:	dc000017 	ldw	r16,0(sp)
    a008:	dec00204 	addi	sp,sp,8
    a00c:	f800283a 	ret

0000a010 <__swsetup_r>:
    a010:	00800074 	movhi	r2,1
    a014:	10b47917 	ldw	r2,-11804(r2)
    a018:	defffd04 	addi	sp,sp,-12
    a01c:	dc400115 	stw	r17,4(sp)
    a020:	dc000015 	stw	r16,0(sp)
    a024:	dfc00215 	stw	ra,8(sp)
    a028:	2023883a 	mov	r17,r4
    a02c:	2821883a 	mov	r16,r5
    a030:	10000226 	beq	r2,zero,a03c <__swsetup_r+0x2c>
    a034:	10c00e17 	ldw	r3,56(r2)
    a038:	18002026 	beq	r3,zero,a0bc <__swsetup_r+0xac>
    a03c:	8080030b 	ldhu	r2,12(r16)
    a040:	10c0020c 	andi	r3,r2,8
    a044:	1009883a 	mov	r4,r2
    a048:	18002226 	beq	r3,zero,a0d4 <__swsetup_r+0xc4>
    a04c:	80c00417 	ldw	r3,16(r16)
    a050:	18002826 	beq	r3,zero,a0f4 <__swsetup_r+0xe4>
    a054:	1100004c 	andi	r4,r2,1
    a058:	20000b1e 	bne	r4,zero,a088 <__swsetup_r+0x78>
    a05c:	1080008c 	andi	r2,r2,2
    a060:	10002d1e 	bne	r2,zero,a118 <__swsetup_r+0x108>
    a064:	80800517 	ldw	r2,20(r16)
    a068:	80800215 	stw	r2,8(r16)
    a06c:	18000b26 	beq	r3,zero,a09c <__swsetup_r+0x8c>
    a070:	0005883a 	mov	r2,zero
    a074:	dfc00217 	ldw	ra,8(sp)
    a078:	dc400117 	ldw	r17,4(sp)
    a07c:	dc000017 	ldw	r16,0(sp)
    a080:	dec00304 	addi	sp,sp,12
    a084:	f800283a 	ret
    a088:	80800517 	ldw	r2,20(r16)
    a08c:	80000215 	stw	zero,8(r16)
    a090:	0085c83a 	sub	r2,zero,r2
    a094:	80800615 	stw	r2,24(r16)
    a098:	183ff51e 	bne	r3,zero,a070 <__swsetup_r+0x60>
    a09c:	80c0030b 	ldhu	r3,12(r16)
    a0a0:	0005883a 	mov	r2,zero
    a0a4:	1900200c 	andi	r4,r3,128
    a0a8:	203ff226 	beq	r4,zero,a074 <__swsetup_r+0x64>
    a0ac:	18c01014 	ori	r3,r3,64
    a0b0:	80c0030d 	sth	r3,12(r16)
    a0b4:	00bfffc4 	movi	r2,-1
    a0b8:	003fee06 	br	a074 <__swsetup_r+0x64>
    a0bc:	1009883a 	mov	r4,r2
    a0c0:	000857c0 	call	857c <__sinit>
    a0c4:	8080030b 	ldhu	r2,12(r16)
    a0c8:	10c0020c 	andi	r3,r2,8
    a0cc:	1009883a 	mov	r4,r2
    a0d0:	183fde1e 	bne	r3,zero,a04c <__swsetup_r+0x3c>
    a0d4:	2080040c 	andi	r2,r4,16
    a0d8:	10001f26 	beq	r2,zero,a158 <__swsetup_r+0x148>
    a0dc:	2080010c 	andi	r2,r4,4
    a0e0:	10000f1e 	bne	r2,zero,a120 <__swsetup_r+0x110>
    a0e4:	80c00417 	ldw	r3,16(r16)
    a0e8:	20800214 	ori	r2,r4,8
    a0ec:	8080030d 	sth	r2,12(r16)
    a0f0:	183fd81e 	bne	r3,zero,a054 <__swsetup_r+0x44>
    a0f4:	1100a00c 	andi	r4,r2,640
    a0f8:	21008020 	cmpeqi	r4,r4,512
    a0fc:	203fd51e 	bne	r4,zero,a054 <__swsetup_r+0x44>
    a100:	800b883a 	mov	r5,r16
    a104:	8809883a 	mov	r4,r17
    a108:	000aa940 	call	aa94 <__smakebuf_r>
    a10c:	8080030b 	ldhu	r2,12(r16)
    a110:	80c00417 	ldw	r3,16(r16)
    a114:	003fcf06 	br	a054 <__swsetup_r+0x44>
    a118:	0005883a 	mov	r2,zero
    a11c:	003fd206 	br	a068 <__swsetup_r+0x58>
    a120:	81400c17 	ldw	r5,48(r16)
    a124:	28000626 	beq	r5,zero,a140 <__swsetup_r+0x130>
    a128:	80801004 	addi	r2,r16,64
    a12c:	28800326 	beq	r5,r2,a13c <__swsetup_r+0x12c>
    a130:	8809883a 	mov	r4,r17
    a134:	000a69c0 	call	a69c <_free_r>
    a138:	8100030b 	ldhu	r4,12(r16)
    a13c:	80000c15 	stw	zero,48(r16)
    a140:	80c00417 	ldw	r3,16(r16)
    a144:	00bff6c4 	movi	r2,-37
    a148:	1108703a 	and	r4,r2,r4
    a14c:	80000115 	stw	zero,4(r16)
    a150:	80c00015 	stw	r3,0(r16)
    a154:	003fe406 	br	a0e8 <__swsetup_r+0xd8>
    a158:	00800244 	movi	r2,9
    a15c:	88800015 	stw	r2,0(r17)
    a160:	20801014 	ori	r2,r4,64
    a164:	8080030d 	sth	r2,12(r16)
    a168:	00bfffc4 	movi	r2,-1
    a16c:	003fc106 	br	a074 <__swsetup_r+0x64>

0000a170 <_close_r>:
    a170:	defffe04 	addi	sp,sp,-8
    a174:	dc000015 	stw	r16,0(sp)
    a178:	00800074 	movhi	r2,1
    a17c:	2021883a 	mov	r16,r4
    a180:	2809883a 	mov	r4,r5
    a184:	dfc00115 	stw	ra,4(sp)
    a188:	10371115 	stw	zero,-9148(r2)
    a18c:	000af080 	call	af08 <close>
    a190:	10ffffd8 	cmpnei	r3,r2,-1
    a194:	18000426 	beq	r3,zero,a1a8 <_close_r+0x38>
    a198:	dfc00117 	ldw	ra,4(sp)
    a19c:	dc000017 	ldw	r16,0(sp)
    a1a0:	dec00204 	addi	sp,sp,8
    a1a4:	f800283a 	ret
    a1a8:	00c00074 	movhi	r3,1
    a1ac:	18f71117 	ldw	r3,-9148(r3)
    a1b0:	183ff926 	beq	r3,zero,a198 <_close_r+0x28>
    a1b4:	80c00015 	stw	r3,0(r16)
    a1b8:	dfc00117 	ldw	ra,4(sp)
    a1bc:	dc000017 	ldw	r16,0(sp)
    a1c0:	dec00204 	addi	sp,sp,8
    a1c4:	f800283a 	ret

0000a1c8 <_fclose_r>:
    a1c8:	defffc04 	addi	sp,sp,-16
    a1cc:	dfc00315 	stw	ra,12(sp)
    a1d0:	dc800215 	stw	r18,8(sp)
    a1d4:	dc400115 	stw	r17,4(sp)
    a1d8:	dc000015 	stw	r16,0(sp)
    a1dc:	28000726 	beq	r5,zero,a1fc <_fclose_r+0x34>
    a1e0:	2023883a 	mov	r17,r4
    a1e4:	2821883a 	mov	r16,r5
    a1e8:	20000226 	beq	r4,zero,a1f4 <_fclose_r+0x2c>
    a1ec:	20800e17 	ldw	r2,56(r4)
    a1f0:	10002726 	beq	r2,zero,a290 <_fclose_r+0xc8>
    a1f4:	8080030f 	ldh	r2,12(r16)
    a1f8:	1000081e 	bne	r2,zero,a21c <_fclose_r+0x54>
    a1fc:	0025883a 	mov	r18,zero
    a200:	9005883a 	mov	r2,r18
    a204:	dfc00317 	ldw	ra,12(sp)
    a208:	dc800217 	ldw	r18,8(sp)
    a20c:	dc400117 	ldw	r17,4(sp)
    a210:	dc000017 	ldw	r16,0(sp)
    a214:	dec00404 	addi	sp,sp,16
    a218:	f800283a 	ret
    a21c:	800b883a 	mov	r5,r16
    a220:	8809883a 	mov	r4,r17
    a224:	000a2d00 	call	a2d0 <__sflush_r>
    a228:	1025883a 	mov	r18,r2
    a22c:	80800b17 	ldw	r2,44(r16)
    a230:	10000426 	beq	r2,zero,a244 <_fclose_r+0x7c>
    a234:	81400717 	ldw	r5,28(r16)
    a238:	8809883a 	mov	r4,r17
    a23c:	103ee83a 	callr	r2
    a240:	10001716 	blt	r2,zero,a2a0 <_fclose_r+0xd8>
    a244:	8080030b 	ldhu	r2,12(r16)
    a248:	1080200c 	andi	r2,r2,128
    a24c:	1000181e 	bne	r2,zero,a2b0 <_fclose_r+0xe8>
    a250:	81400c17 	ldw	r5,48(r16)
    a254:	28000526 	beq	r5,zero,a26c <_fclose_r+0xa4>
    a258:	80801004 	addi	r2,r16,64
    a25c:	28800226 	beq	r5,r2,a268 <_fclose_r+0xa0>
    a260:	8809883a 	mov	r4,r17
    a264:	000a69c0 	call	a69c <_free_r>
    a268:	80000c15 	stw	zero,48(r16)
    a26c:	81401117 	ldw	r5,68(r16)
    a270:	28000326 	beq	r5,zero,a280 <_fclose_r+0xb8>
    a274:	8809883a 	mov	r4,r17
    a278:	000a69c0 	call	a69c <_free_r>
    a27c:	80001115 	stw	zero,68(r16)
    a280:	000858c0 	call	858c <__sfp_lock_acquire>
    a284:	8000030d 	sth	zero,12(r16)
    a288:	00085900 	call	8590 <__sfp_lock_release>
    a28c:	003fdc06 	br	a200 <_fclose_r+0x38>
    a290:	000857c0 	call	857c <__sinit>
    a294:	8080030f 	ldh	r2,12(r16)
    a298:	103fd826 	beq	r2,zero,a1fc <_fclose_r+0x34>
    a29c:	003fdf06 	br	a21c <_fclose_r+0x54>
    a2a0:	8080030b 	ldhu	r2,12(r16)
    a2a4:	04bfffc4 	movi	r18,-1
    a2a8:	1080200c 	andi	r2,r2,128
    a2ac:	103fe826 	beq	r2,zero,a250 <_fclose_r+0x88>
    a2b0:	81400417 	ldw	r5,16(r16)
    a2b4:	8809883a 	mov	r4,r17
    a2b8:	000a69c0 	call	a69c <_free_r>
    a2bc:	003fe406 	br	a250 <_fclose_r+0x88>

0000a2c0 <fclose>:
    a2c0:	00800074 	movhi	r2,1
    a2c4:	200b883a 	mov	r5,r4
    a2c8:	11347917 	ldw	r4,-11804(r2)
    a2cc:	000a1c81 	jmpi	a1c8 <_fclose_r>

0000a2d0 <__sflush_r>:
    a2d0:	2880030b 	ldhu	r2,12(r5)
    a2d4:	defffb04 	addi	sp,sp,-20
    a2d8:	dcc00315 	stw	r19,12(sp)
    a2dc:	dc000015 	stw	r16,0(sp)
    a2e0:	dfc00415 	stw	ra,16(sp)
    a2e4:	dc800215 	stw	r18,8(sp)
    a2e8:	dc400115 	stw	r17,4(sp)
    a2ec:	10c0020c 	andi	r3,r2,8
    a2f0:	2821883a 	mov	r16,r5
    a2f4:	2027883a 	mov	r19,r4
    a2f8:	18003f1e 	bne	r3,zero,a3f8 <__sflush_r+0x128>
    a2fc:	28c00117 	ldw	r3,4(r5)
    a300:	10820014 	ori	r2,r2,2048
    a304:	2880030d 	sth	r2,12(r5)
    a308:	00c0550e 	bge	zero,r3,a460 <__sflush_r+0x190>
    a30c:	82000a17 	ldw	r8,40(r16)
    a310:	40003126 	beq	r8,zero,a3d8 <__sflush_r+0x108>
    a314:	9c400017 	ldw	r17,0(r19)
    a318:	1104000c 	andi	r4,r2,4096
    a31c:	98000015 	stw	zero,0(r19)
    a320:	1007883a 	mov	r3,r2
    a324:	81400717 	ldw	r5,28(r16)
    a328:	2000521e 	bne	r4,zero,a474 <__sflush_r+0x1a4>
    a32c:	01c00044 	movi	r7,1
    a330:	000d883a 	mov	r6,zero
    a334:	9809883a 	mov	r4,r19
    a338:	403ee83a 	callr	r8
    a33c:	10ffffd8 	cmpnei	r3,r2,-1
    a340:	18005826 	beq	r3,zero,a4a4 <__sflush_r+0x1d4>
    a344:	80c0030b 	ldhu	r3,12(r16)
    a348:	82000a17 	ldw	r8,40(r16)
    a34c:	81400717 	ldw	r5,28(r16)
    a350:	18c0010c 	andi	r3,r3,4
    a354:	18000626 	beq	r3,zero,a370 <__sflush_r+0xa0>
    a358:	81000117 	ldw	r4,4(r16)
    a35c:	80c00c17 	ldw	r3,48(r16)
    a360:	1105c83a 	sub	r2,r2,r4
    a364:	18000226 	beq	r3,zero,a370 <__sflush_r+0xa0>
    a368:	80c00f17 	ldw	r3,60(r16)
    a36c:	10c5c83a 	sub	r2,r2,r3
    a370:	000f883a 	mov	r7,zero
    a374:	100d883a 	mov	r6,r2
    a378:	9809883a 	mov	r4,r19
    a37c:	403ee83a 	callr	r8
    a380:	10ffffd8 	cmpnei	r3,r2,-1
    a384:	18003d1e 	bne	r3,zero,a47c <__sflush_r+0x1ac>
    a388:	99000017 	ldw	r4,0(r19)
    a38c:	80c0030b 	ldhu	r3,12(r16)
    a390:	20004e26 	beq	r4,zero,a4cc <__sflush_r+0x1fc>
    a394:	21400760 	cmpeqi	r5,r4,29
    a398:	2800021e 	bne	r5,zero,a3a4 <__sflush_r+0xd4>
    a39c:	210005a0 	cmpeqi	r4,r4,22
    a3a0:	20002c26 	beq	r4,zero,a454 <__sflush_r+0x184>
    a3a4:	80800417 	ldw	r2,16(r16)
    a3a8:	18fdffcc 	andi	r3,r3,63487
    a3ac:	80c0030d 	sth	r3,12(r16)
    a3b0:	80000115 	stw	zero,4(r16)
    a3b4:	80800015 	stw	r2,0(r16)
    a3b8:	81400c17 	ldw	r5,48(r16)
    a3bc:	9c400015 	stw	r17,0(r19)
    a3c0:	28000526 	beq	r5,zero,a3d8 <__sflush_r+0x108>
    a3c4:	80801004 	addi	r2,r16,64
    a3c8:	28800226 	beq	r5,r2,a3d4 <__sflush_r+0x104>
    a3cc:	9809883a 	mov	r4,r19
    a3d0:	000a69c0 	call	a69c <_free_r>
    a3d4:	80000c15 	stw	zero,48(r16)
    a3d8:	0005883a 	mov	r2,zero
    a3dc:	dfc00417 	ldw	ra,16(sp)
    a3e0:	dcc00317 	ldw	r19,12(sp)
    a3e4:	dc800217 	ldw	r18,8(sp)
    a3e8:	dc400117 	ldw	r17,4(sp)
    a3ec:	dc000017 	ldw	r16,0(sp)
    a3f0:	dec00504 	addi	sp,sp,20
    a3f4:	f800283a 	ret
    a3f8:	2c800417 	ldw	r18,16(r5)
    a3fc:	903ff626 	beq	r18,zero,a3d8 <__sflush_r+0x108>
    a400:	2c400017 	ldw	r17,0(r5)
    a404:	108000cc 	andi	r2,r2,3
    a408:	2c800015 	stw	r18,0(r5)
    a40c:	8ca3c83a 	sub	r17,r17,r18
    a410:	1000161e 	bne	r2,zero,a46c <__sflush_r+0x19c>
    a414:	28800517 	ldw	r2,20(r5)
    a418:	80800215 	stw	r2,8(r16)
    a41c:	04400316 	blt	zero,r17,a42c <__sflush_r+0x15c>
    a420:	003fed06 	br	a3d8 <__sflush_r+0x108>
    a424:	90a5883a 	add	r18,r18,r2
    a428:	047feb0e 	bge	zero,r17,a3d8 <__sflush_r+0x108>
    a42c:	80800917 	ldw	r2,36(r16)
    a430:	81400717 	ldw	r5,28(r16)
    a434:	880f883a 	mov	r7,r17
    a438:	900d883a 	mov	r6,r18
    a43c:	9809883a 	mov	r4,r19
    a440:	103ee83a 	callr	r2
    a444:	88a3c83a 	sub	r17,r17,r2
    a448:	00bff616 	blt	zero,r2,a424 <__sflush_r+0x154>
    a44c:	80c0030b 	ldhu	r3,12(r16)
    a450:	00bfffc4 	movi	r2,-1
    a454:	18c01014 	ori	r3,r3,64
    a458:	80c0030d 	sth	r3,12(r16)
    a45c:	003fdf06 	br	a3dc <__sflush_r+0x10c>
    a460:	28c00f17 	ldw	r3,60(r5)
    a464:	00ffa916 	blt	zero,r3,a30c <__sflush_r+0x3c>
    a468:	003fdb06 	br	a3d8 <__sflush_r+0x108>
    a46c:	0005883a 	mov	r2,zero
    a470:	003fe906 	br	a418 <__sflush_r+0x148>
    a474:	80801417 	ldw	r2,80(r16)
    a478:	003fb506 	br	a350 <__sflush_r+0x80>
    a47c:	80c0030b 	ldhu	r3,12(r16)
    a480:	81000417 	ldw	r4,16(r16)
    a484:	80000115 	stw	zero,4(r16)
    a488:	197dffcc 	andi	r5,r3,63487
    a48c:	8140030d 	sth	r5,12(r16)
    a490:	81000015 	stw	r4,0(r16)
    a494:	18c4000c 	andi	r3,r3,4096
    a498:	183fc726 	beq	r3,zero,a3b8 <__sflush_r+0xe8>
    a49c:	80801415 	stw	r2,80(r16)
    a4a0:	003fc506 	br	a3b8 <__sflush_r+0xe8>
    a4a4:	98c00017 	ldw	r3,0(r19)
    a4a8:	183fa626 	beq	r3,zero,a344 <__sflush_r+0x74>
    a4ac:	19000760 	cmpeqi	r4,r3,29
    a4b0:	20000e1e 	bne	r4,zero,a4ec <__sflush_r+0x21c>
    a4b4:	18c00598 	cmpnei	r3,r3,22
    a4b8:	18000c26 	beq	r3,zero,a4ec <__sflush_r+0x21c>
    a4bc:	80c0030b 	ldhu	r3,12(r16)
    a4c0:	18c01014 	ori	r3,r3,64
    a4c4:	80c0030d 	sth	r3,12(r16)
    a4c8:	003fc406 	br	a3dc <__sflush_r+0x10c>
    a4cc:	81000417 	ldw	r4,16(r16)
    a4d0:	197dffcc 	andi	r5,r3,63487
    a4d4:	8140030d 	sth	r5,12(r16)
    a4d8:	80000115 	stw	zero,4(r16)
    a4dc:	81000015 	stw	r4,0(r16)
    a4e0:	18c4000c 	andi	r3,r3,4096
    a4e4:	183fb426 	beq	r3,zero,a3b8 <__sflush_r+0xe8>
    a4e8:	003fec06 	br	a49c <__sflush_r+0x1cc>
    a4ec:	9c400015 	stw	r17,0(r19)
    a4f0:	0005883a 	mov	r2,zero
    a4f4:	003fb906 	br	a3dc <__sflush_r+0x10c>

0000a4f8 <_fflush_r>:
    a4f8:	defffd04 	addi	sp,sp,-12
    a4fc:	dc000115 	stw	r16,4(sp)
    a500:	dfc00215 	stw	ra,8(sp)
    a504:	2021883a 	mov	r16,r4
    a508:	20000226 	beq	r4,zero,a514 <_fflush_r+0x1c>
    a50c:	20800e17 	ldw	r2,56(r4)
    a510:	10000726 	beq	r2,zero,a530 <_fflush_r+0x38>
    a514:	2880030f 	ldh	r2,12(r5)
    a518:	10000a1e 	bne	r2,zero,a544 <_fflush_r+0x4c>
    a51c:	0005883a 	mov	r2,zero
    a520:	dfc00217 	ldw	ra,8(sp)
    a524:	dc000117 	ldw	r16,4(sp)
    a528:	dec00304 	addi	sp,sp,12
    a52c:	f800283a 	ret
    a530:	d9400015 	stw	r5,0(sp)
    a534:	000857c0 	call	857c <__sinit>
    a538:	d9400017 	ldw	r5,0(sp)
    a53c:	2880030f 	ldh	r2,12(r5)
    a540:	103ff626 	beq	r2,zero,a51c <_fflush_r+0x24>
    a544:	8009883a 	mov	r4,r16
    a548:	dfc00217 	ldw	ra,8(sp)
    a54c:	dc000117 	ldw	r16,4(sp)
    a550:	dec00304 	addi	sp,sp,12
    a554:	000a2d01 	jmpi	a2d0 <__sflush_r>

0000a558 <fflush>:
    a558:	200b883a 	mov	r5,r4
    a55c:	20000326 	beq	r4,zero,a56c <fflush+0x14>
    a560:	00800074 	movhi	r2,1
    a564:	11347917 	ldw	r4,-11804(r2)
    a568:	000a4f81 	jmpi	a4f8 <_fflush_r>
    a56c:	00800074 	movhi	r2,1
    a570:	11347817 	ldw	r4,-11808(r2)
    a574:	01400074 	movhi	r5,1
    a578:	29693e04 	addi	r5,r5,-23304
    a57c:	0008b3c1 	jmpi	8b3c <_fwalk_reent>

0000a580 <_malloc_trim_r>:
    a580:	defffb04 	addi	sp,sp,-20
    a584:	dcc00315 	stw	r19,12(sp)
    a588:	04c00074 	movhi	r19,1
    a58c:	dc800215 	stw	r18,8(sp)
    a590:	dc400115 	stw	r17,4(sp)
    a594:	dc000015 	stw	r16,0(sp)
    a598:	dfc00415 	stw	ra,16(sp)
    a59c:	2821883a 	mov	r16,r5
    a5a0:	9cf30104 	addi	r19,r19,-13308
    a5a4:	2025883a 	mov	r18,r4
    a5a8:	000b4780 	call	b478 <__malloc_lock>
    a5ac:	98800217 	ldw	r2,8(r19)
    a5b0:	14400117 	ldw	r17,4(r2)
    a5b4:	00bfff04 	movi	r2,-4
    a5b8:	88a2703a 	and	r17,r17,r2
    a5bc:	8c21c83a 	sub	r16,r17,r16
    a5c0:	8403fbc4 	addi	r16,r16,4079
    a5c4:	8020d33a 	srli	r16,r16,12
    a5c8:	843fffc4 	addi	r16,r16,-1
    a5cc:	8020933a 	slli	r16,r16,12
    a5d0:	80840008 	cmpgei	r2,r16,4096
    a5d4:	10000626 	beq	r2,zero,a5f0 <_malloc_trim_r+0x70>
    a5d8:	000b883a 	mov	r5,zero
    a5dc:	9009883a 	mov	r4,r18
    a5e0:	0009e140 	call	9e14 <_sbrk_r>
    a5e4:	98c00217 	ldw	r3,8(r19)
    a5e8:	1c47883a 	add	r3,r3,r17
    a5ec:	10c00a26 	beq	r2,r3,a618 <_malloc_trim_r+0x98>
    a5f0:	9009883a 	mov	r4,r18
    a5f4:	000b49c0 	call	b49c <__malloc_unlock>
    a5f8:	0005883a 	mov	r2,zero
    a5fc:	dfc00417 	ldw	ra,16(sp)
    a600:	dcc00317 	ldw	r19,12(sp)
    a604:	dc800217 	ldw	r18,8(sp)
    a608:	dc400117 	ldw	r17,4(sp)
    a60c:	dc000017 	ldw	r16,0(sp)
    a610:	dec00504 	addi	sp,sp,20
    a614:	f800283a 	ret
    a618:	040bc83a 	sub	r5,zero,r16
    a61c:	9009883a 	mov	r4,r18
    a620:	0009e140 	call	9e14 <_sbrk_r>
    a624:	10bfffd8 	cmpnei	r2,r2,-1
    a628:	10000d26 	beq	r2,zero,a660 <_malloc_trim_r+0xe0>
    a62c:	00800074 	movhi	r2,1
    a630:	10b71517 	ldw	r2,-9132(r2)
    a634:	98c00217 	ldw	r3,8(r19)
    a638:	8c23c83a 	sub	r17,r17,r16
    a63c:	8c400054 	ori	r17,r17,1
    a640:	1421c83a 	sub	r16,r2,r16
    a644:	1c400115 	stw	r17,4(r3)
    a648:	00800074 	movhi	r2,1
    a64c:	9009883a 	mov	r4,r18
    a650:	14371515 	stw	r16,-9132(r2)
    a654:	000b49c0 	call	b49c <__malloc_unlock>
    a658:	00800044 	movi	r2,1
    a65c:	003fe706 	br	a5fc <_malloc_trim_r+0x7c>
    a660:	000b883a 	mov	r5,zero
    a664:	9009883a 	mov	r4,r18
    a668:	0009e140 	call	9e14 <_sbrk_r>
    a66c:	99000217 	ldw	r4,8(r19)
    a670:	1107c83a 	sub	r3,r2,r4
    a674:	19400410 	cmplti	r5,r3,16
    a678:	283fdd1e 	bne	r5,zero,a5f0 <_malloc_trim_r+0x70>
    a67c:	01400074 	movhi	r5,1
    a680:	29747a17 	ldw	r5,-11800(r5)
    a684:	18c00054 	ori	r3,r3,1
    a688:	20c00115 	stw	r3,4(r4)
    a68c:	1145c83a 	sub	r2,r2,r5
    a690:	01400074 	movhi	r5,1
    a694:	28b71515 	stw	r2,-9132(r5)
    a698:	003fd506 	br	a5f0 <_malloc_trim_r+0x70>

0000a69c <_free_r>:
    a69c:	28004f26 	beq	r5,zero,a7dc <_free_r+0x140>
    a6a0:	defffd04 	addi	sp,sp,-12
    a6a4:	dc400115 	stw	r17,4(sp)
    a6a8:	dc000015 	stw	r16,0(sp)
    a6ac:	2023883a 	mov	r17,r4
    a6b0:	2821883a 	mov	r16,r5
    a6b4:	dfc00215 	stw	ra,8(sp)
    a6b8:	000b4780 	call	b478 <__malloc_lock>
    a6bc:	81ffff17 	ldw	r7,-4(r16)
    a6c0:	00bfff84 	movi	r2,-2
    a6c4:	80fffe04 	addi	r3,r16,-8
    a6c8:	3884703a 	and	r2,r7,r2
    a6cc:	01800074 	movhi	r6,1
    a6d0:	1889883a 	add	r4,r3,r2
    a6d4:	31b30104 	addi	r6,r6,-13308
    a6d8:	21400117 	ldw	r5,4(r4)
    a6dc:	32000217 	ldw	r8,8(r6)
    a6e0:	027fff04 	movi	r9,-4
    a6e4:	2a4a703a 	and	r5,r5,r9
    a6e8:	41006426 	beq	r8,r4,a87c <_free_r+0x1e0>
    a6ec:	21400115 	stw	r5,4(r4)
    a6f0:	39c0004c 	andi	r7,r7,1
    a6f4:	2151883a 	add	r8,r4,r5
    a6f8:	3800281e 	bne	r7,zero,a79c <_free_r+0x100>
    a6fc:	82bffe17 	ldw	r10,-8(r16)
    a700:	42000117 	ldw	r8,4(r8)
    a704:	01c00074 	movhi	r7,1
    a708:	1a87c83a 	sub	r3,r3,r10
    a70c:	1a400217 	ldw	r9,8(r3)
    a710:	39f30304 	addi	r7,r7,-13300
    a714:	1285883a 	add	r2,r2,r10
    a718:	4200004c 	andi	r8,r8,1
    a71c:	49c04c26 	beq	r9,r7,a850 <_free_r+0x1b4>
    a720:	1a800317 	ldw	r10,12(r3)
    a724:	4a800315 	stw	r10,12(r9)
    a728:	52400215 	stw	r9,8(r10)
    a72c:	40007126 	beq	r8,zero,a8f4 <_free_r+0x258>
    a730:	11400054 	ori	r5,r2,1
    a734:	19400115 	stw	r5,4(r3)
    a738:	20800015 	stw	r2,0(r4)
    a73c:	11008028 	cmpgeui	r4,r2,512
    a740:	20002c1e 	bne	r4,zero,a7f4 <_free_r+0x158>
    a744:	1008d0fa 	srli	r4,r2,3
    a748:	31c00117 	ldw	r7,4(r6)
    a74c:	20800044 	addi	r2,r4,1
    a750:	200bd0ba 	srai	r5,r4,2
    a754:	100490fa 	slli	r2,r2,3
    a758:	01000044 	movi	r4,1
    a75c:	2148983a 	sll	r4,r4,r5
    a760:	3085883a 	add	r2,r6,r2
    a764:	11400017 	ldw	r5,0(r2)
    a768:	21c8b03a 	or	r4,r4,r7
    a76c:	11fffe04 	addi	r7,r2,-8
    a770:	19c00315 	stw	r7,12(r3)
    a774:	19400215 	stw	r5,8(r3)
    a778:	31000115 	stw	r4,4(r6)
    a77c:	10c00015 	stw	r3,0(r2)
    a780:	28c00315 	stw	r3,12(r5)
    a784:	8809883a 	mov	r4,r17
    a788:	dfc00217 	ldw	ra,8(sp)
    a78c:	dc400117 	ldw	r17,4(sp)
    a790:	dc000017 	ldw	r16,0(sp)
    a794:	dec00304 	addi	sp,sp,12
    a798:	000b49c1 	jmpi	b49c <__malloc_unlock>
    a79c:	41c00117 	ldw	r7,4(r8)
    a7a0:	39c0004c 	andi	r7,r7,1
    a7a4:	38000e1e 	bne	r7,zero,a7e0 <_free_r+0x144>
    a7a8:	01c00074 	movhi	r7,1
    a7ac:	1145883a 	add	r2,r2,r5
    a7b0:	39f30304 	addi	r7,r7,-13300
    a7b4:	21400217 	ldw	r5,8(r4)
    a7b8:	12400054 	ori	r9,r2,1
    a7bc:	1891883a 	add	r8,r3,r2
    a7c0:	29c05226 	beq	r5,r7,a90c <_free_r+0x270>
    a7c4:	21000317 	ldw	r4,12(r4)
    a7c8:	29000315 	stw	r4,12(r5)
    a7cc:	21400215 	stw	r5,8(r4)
    a7d0:	1a400115 	stw	r9,4(r3)
    a7d4:	40800015 	stw	r2,0(r8)
    a7d8:	003fd806 	br	a73c <_free_r+0xa0>
    a7dc:	f800283a 	ret
    a7e0:	11400054 	ori	r5,r2,1
    a7e4:	817fff15 	stw	r5,-4(r16)
    a7e8:	20800015 	stw	r2,0(r4)
    a7ec:	11008028 	cmpgeui	r4,r2,512
    a7f0:	203fd426 	beq	r4,zero,a744 <_free_r+0xa8>
    a7f4:	1008d27a 	srli	r4,r2,9
    a7f8:	21400168 	cmpgeui	r5,r4,5
    a7fc:	2800341e 	bne	r5,zero,a8d0 <_free_r+0x234>
    a800:	1008d1ba 	srli	r4,r2,6
    a804:	21c00e44 	addi	r7,r4,57
    a808:	380e90fa 	slli	r7,r7,3
    a80c:	21400e04 	addi	r5,r4,56
    a810:	31cf883a 	add	r7,r6,r7
    a814:	39000017 	ldw	r4,0(r7)
    a818:	39fffe04 	addi	r7,r7,-8
    a81c:	39004226 	beq	r7,r4,a928 <_free_r+0x28c>
    a820:	01bfff04 	movi	r6,-4
    a824:	21400117 	ldw	r5,4(r4)
    a828:	298a703a 	and	r5,r5,r6
    a82c:	1140022e 	bgeu	r2,r5,a838 <_free_r+0x19c>
    a830:	21000217 	ldw	r4,8(r4)
    a834:	393ffb1e 	bne	r7,r4,a824 <_free_r+0x188>
    a838:	21c00317 	ldw	r7,12(r4)
    a83c:	19c00315 	stw	r7,12(r3)
    a840:	19000215 	stw	r4,8(r3)
    a844:	38c00215 	stw	r3,8(r7)
    a848:	20c00315 	stw	r3,12(r4)
    a84c:	003fcd06 	br	a784 <_free_r+0xe8>
    a850:	40004d1e 	bne	r8,zero,a988 <_free_r+0x2ec>
    a854:	21800317 	ldw	r6,12(r4)
    a858:	21000217 	ldw	r4,8(r4)
    a85c:	2885883a 	add	r2,r5,r2
    a860:	11400054 	ori	r5,r2,1
    a864:	21800315 	stw	r6,12(r4)
    a868:	31000215 	stw	r4,8(r6)
    a86c:	19400115 	stw	r5,4(r3)
    a870:	1887883a 	add	r3,r3,r2
    a874:	18800015 	stw	r2,0(r3)
    a878:	003fc206 	br	a784 <_free_r+0xe8>
    a87c:	39c0004c 	andi	r7,r7,1
    a880:	1145883a 	add	r2,r2,r5
    a884:	3800071e 	bne	r7,zero,a8a4 <_free_r+0x208>
    a888:	81fffe17 	ldw	r7,-8(r16)
    a88c:	19c7c83a 	sub	r3,r3,r7
    a890:	19000317 	ldw	r4,12(r3)
    a894:	19400217 	ldw	r5,8(r3)
    a898:	11c5883a 	add	r2,r2,r7
    a89c:	29000315 	stw	r4,12(r5)
    a8a0:	21400215 	stw	r5,8(r4)
    a8a4:	01000074 	movhi	r4,1
    a8a8:	11400054 	ori	r5,r2,1
    a8ac:	21347b17 	ldw	r4,-11796(r4)
    a8b0:	19400115 	stw	r5,4(r3)
    a8b4:	30c00215 	stw	r3,8(r6)
    a8b8:	113fb236 	bltu	r2,r4,a784 <_free_r+0xe8>
    a8bc:	00800074 	movhi	r2,1
    a8c0:	11771017 	ldw	r5,-9152(r2)
    a8c4:	8809883a 	mov	r4,r17
    a8c8:	000a5800 	call	a580 <_malloc_trim_r>
    a8cc:	003fad06 	br	a784 <_free_r+0xe8>
    a8d0:	21400568 	cmpgeui	r5,r4,21
    a8d4:	28000926 	beq	r5,zero,a8fc <_free_r+0x260>
    a8d8:	21401568 	cmpgeui	r5,r4,85
    a8dc:	2800191e 	bne	r5,zero,a944 <_free_r+0x2a8>
    a8e0:	1008d33a 	srli	r4,r2,12
    a8e4:	21c01bc4 	addi	r7,r4,111
    a8e8:	21401b84 	addi	r5,r4,110
    a8ec:	380e90fa 	slli	r7,r7,3
    a8f0:	003fc706 	br	a810 <_free_r+0x174>
    a8f4:	1145883a 	add	r2,r2,r5
    a8f8:	003fae06 	br	a7b4 <_free_r+0x118>
    a8fc:	21c01704 	addi	r7,r4,92
    a900:	214016c4 	addi	r5,r4,91
    a904:	380e90fa 	slli	r7,r7,3
    a908:	003fc106 	br	a810 <_free_r+0x174>
    a90c:	30c00515 	stw	r3,20(r6)
    a910:	30c00415 	stw	r3,16(r6)
    a914:	19c00315 	stw	r7,12(r3)
    a918:	19c00215 	stw	r7,8(r3)
    a91c:	1a400115 	stw	r9,4(r3)
    a920:	40800015 	stw	r2,0(r8)
    a924:	003f9706 	br	a784 <_free_r+0xe8>
    a928:	280bd0ba 	srai	r5,r5,2
    a92c:	00800044 	movi	r2,1
    a930:	32000117 	ldw	r8,4(r6)
    a934:	114a983a 	sll	r5,r2,r5
    a938:	2a0ab03a 	or	r5,r5,r8
    a93c:	31400115 	stw	r5,4(r6)
    a940:	003fbe06 	br	a83c <_free_r+0x1a0>
    a944:	21405568 	cmpgeui	r5,r4,341
    a948:	2800051e 	bne	r5,zero,a960 <_free_r+0x2c4>
    a94c:	1008d3fa 	srli	r4,r2,15
    a950:	21c01e04 	addi	r7,r4,120
    a954:	21401dc4 	addi	r5,r4,119
    a958:	380e90fa 	slli	r7,r7,3
    a95c:	003fac06 	br	a810 <_free_r+0x174>
    a960:	21015568 	cmpgeui	r4,r4,1365
    a964:	2000051e 	bne	r4,zero,a97c <_free_r+0x2e0>
    a968:	1008d4ba 	srli	r4,r2,18
    a96c:	21c01f44 	addi	r7,r4,125
    a970:	21401f04 	addi	r5,r4,124
    a974:	380e90fa 	slli	r7,r7,3
    a978:	003fa506 	br	a810 <_free_r+0x174>
    a97c:	01c0fe04 	movi	r7,1016
    a980:	01401f84 	movi	r5,126
    a984:	003fa206 	br	a810 <_free_r+0x174>
    a988:	11400054 	ori	r5,r2,1
    a98c:	19400115 	stw	r5,4(r3)
    a990:	20800015 	stw	r2,0(r4)
    a994:	003f7b06 	br	a784 <_free_r+0xe8>

0000a998 <_lseek_r>:
    a998:	defffe04 	addi	sp,sp,-8
    a99c:	2805883a 	mov	r2,r5
    a9a0:	dc000015 	stw	r16,0(sp)
    a9a4:	300b883a 	mov	r5,r6
    a9a8:	2021883a 	mov	r16,r4
    a9ac:	380d883a 	mov	r6,r7
    a9b0:	1009883a 	mov	r4,r2
    a9b4:	00800074 	movhi	r2,1
    a9b8:	dfc00115 	stw	ra,4(sp)
    a9bc:	10371115 	stw	zero,-9148(r2)
    a9c0:	000b31c0 	call	b31c <lseek>
    a9c4:	10ffffd8 	cmpnei	r3,r2,-1
    a9c8:	18000426 	beq	r3,zero,a9dc <_lseek_r+0x44>
    a9cc:	dfc00117 	ldw	ra,4(sp)
    a9d0:	dc000017 	ldw	r16,0(sp)
    a9d4:	dec00204 	addi	sp,sp,8
    a9d8:	f800283a 	ret
    a9dc:	00c00074 	movhi	r3,1
    a9e0:	18f71117 	ldw	r3,-9148(r3)
    a9e4:	183ff926 	beq	r3,zero,a9cc <_lseek_r+0x34>
    a9e8:	80c00015 	stw	r3,0(r16)
    a9ec:	dfc00117 	ldw	ra,4(sp)
    a9f0:	dc000017 	ldw	r16,0(sp)
    a9f4:	dec00204 	addi	sp,sp,8
    a9f8:	f800283a 	ret

0000a9fc <__swhatbuf_r>:
    a9fc:	deffea04 	addi	sp,sp,-88
    aa00:	dc001215 	stw	r16,72(sp)
    aa04:	2821883a 	mov	r16,r5
    aa08:	2940038f 	ldh	r5,14(r5)
    aa0c:	dc801415 	stw	r18,80(sp)
    aa10:	dc401315 	stw	r17,76(sp)
    aa14:	dfc01515 	stw	ra,84(sp)
    aa18:	3023883a 	mov	r17,r6
    aa1c:	3825883a 	mov	r18,r7
    aa20:	28001016 	blt	r5,zero,aa64 <__swhatbuf_r+0x68>
    aa24:	d80d883a 	mov	r6,sp
    aa28:	000ac340 	call	ac34 <_fstat_r>
    aa2c:	10000d16 	blt	r2,zero,aa64 <__swhatbuf_r+0x68>
    aa30:	d8c00117 	ldw	r3,4(sp)
    aa34:	00820004 	movi	r2,2048
    aa38:	18fc000c 	andi	r3,r3,61440
    aa3c:	18c80020 	cmpeqi	r3,r3,8192
    aa40:	90c00015 	stw	r3,0(r18)
    aa44:	00c10004 	movi	r3,1024
    aa48:	88c00015 	stw	r3,0(r17)
    aa4c:	dfc01517 	ldw	ra,84(sp)
    aa50:	dc801417 	ldw	r18,80(sp)
    aa54:	dc401317 	ldw	r17,76(sp)
    aa58:	dc001217 	ldw	r16,72(sp)
    aa5c:	dec01604 	addi	sp,sp,88
    aa60:	f800283a 	ret
    aa64:	8080030b 	ldhu	r2,12(r16)
    aa68:	90000015 	stw	zero,0(r18)
    aa6c:	1080200c 	andi	r2,r2,128
    aa70:	10000426 	beq	r2,zero,aa84 <__swhatbuf_r+0x88>
    aa74:	00801004 	movi	r2,64
    aa78:	88800015 	stw	r2,0(r17)
    aa7c:	0005883a 	mov	r2,zero
    aa80:	003ff206 	br	aa4c <__swhatbuf_r+0x50>
    aa84:	00810004 	movi	r2,1024
    aa88:	88800015 	stw	r2,0(r17)
    aa8c:	0005883a 	mov	r2,zero
    aa90:	003fee06 	br	aa4c <__swhatbuf_r+0x50>

0000aa94 <__smakebuf_r>:
    aa94:	28c0030b 	ldhu	r3,12(r5)
    aa98:	defffa04 	addi	sp,sp,-24
    aa9c:	dc000215 	stw	r16,8(sp)
    aaa0:	dfc00515 	stw	ra,20(sp)
    aaa4:	dc800415 	stw	r18,16(sp)
    aaa8:	dc400315 	stw	r17,12(sp)
    aaac:	18c0008c 	andi	r3,r3,2
    aab0:	2821883a 	mov	r16,r5
    aab4:	18000b26 	beq	r3,zero,aae4 <__smakebuf_r+0x50>
    aab8:	28c010c4 	addi	r3,r5,67
    aabc:	28c00015 	stw	r3,0(r5)
    aac0:	28c00415 	stw	r3,16(r5)
    aac4:	00c00044 	movi	r3,1
    aac8:	28c00515 	stw	r3,20(r5)
    aacc:	dfc00517 	ldw	ra,20(sp)
    aad0:	dc800417 	ldw	r18,16(sp)
    aad4:	dc400317 	ldw	r17,12(sp)
    aad8:	dc000217 	ldw	r16,8(sp)
    aadc:	dec00604 	addi	sp,sp,24
    aae0:	f800283a 	ret
    aae4:	d9c00104 	addi	r7,sp,4
    aae8:	d80d883a 	mov	r6,sp
    aaec:	2023883a 	mov	r17,r4
    aaf0:	000a9fc0 	call	a9fc <__swhatbuf_r>
    aaf4:	1025883a 	mov	r18,r2
    aaf8:	d8800117 	ldw	r2,4(sp)
    aafc:	1000131e 	bne	r2,zero,ab4c <__smakebuf_r+0xb8>
    ab00:	d9400017 	ldw	r5,0(sp)
    ab04:	8809883a 	mov	r4,r17
    ab08:	0008bf00 	call	8bf0 <_malloc_r>
    ab0c:	10001c26 	beq	r2,zero,ab80 <__smakebuf_r+0xec>
    ab10:	01000074 	movhi	r4,1
    ab14:	21209e04 	addi	r4,r4,-32136
    ab18:	80c0030b 	ldhu	r3,12(r16)
    ab1c:	89000f15 	stw	r4,60(r17)
    ab20:	80800015 	stw	r2,0(r16)
    ab24:	80800415 	stw	r2,16(r16)
    ab28:	d8800017 	ldw	r2,0(sp)
    ab2c:	d9400117 	ldw	r5,4(sp)
    ab30:	18c02014 	ori	r3,r3,128
    ab34:	80c0030d 	sth	r3,12(r16)
    ab38:	80800515 	stw	r2,20(r16)
    ab3c:	28001c1e 	bne	r5,zero,abb0 <__smakebuf_r+0x11c>
    ab40:	90c6b03a 	or	r3,r18,r3
    ab44:	80c0030d 	sth	r3,12(r16)
    ab48:	003fe006 	br	aacc <__smakebuf_r+0x38>
    ab4c:	8140038f 	ldh	r5,14(r16)
    ab50:	8809883a 	mov	r4,r17
    ab54:	000ac940 	call	ac94 <_isatty_r>
    ab58:	103fe926 	beq	r2,zero,ab00 <__smakebuf_r+0x6c>
    ab5c:	8080030b 	ldhu	r2,12(r16)
    ab60:	80c010c4 	addi	r3,r16,67
    ab64:	80c00015 	stw	r3,0(r16)
    ab68:	10800054 	ori	r2,r2,1
    ab6c:	8080030d 	sth	r2,12(r16)
    ab70:	00800044 	movi	r2,1
    ab74:	80c00415 	stw	r3,16(r16)
    ab78:	80800515 	stw	r2,20(r16)
    ab7c:	003fe006 	br	ab00 <__smakebuf_r+0x6c>
    ab80:	8080030b 	ldhu	r2,12(r16)
    ab84:	10c0800c 	andi	r3,r2,512
    ab88:	183fd01e 	bne	r3,zero,aacc <__smakebuf_r+0x38>
    ab8c:	10bfff0c 	andi	r2,r2,65532
    ab90:	10800094 	ori	r2,r2,2
    ab94:	80c010c4 	addi	r3,r16,67
    ab98:	8080030d 	sth	r2,12(r16)
    ab9c:	00800044 	movi	r2,1
    aba0:	80c00015 	stw	r3,0(r16)
    aba4:	80c00415 	stw	r3,16(r16)
    aba8:	80800515 	stw	r2,20(r16)
    abac:	003fc706 	br	aacc <__smakebuf_r+0x38>
    abb0:	8140038f 	ldh	r5,14(r16)
    abb4:	8809883a 	mov	r4,r17
    abb8:	000ac940 	call	ac94 <_isatty_r>
    abbc:	80c0030b 	ldhu	r3,12(r16)
    abc0:	103fdf26 	beq	r2,zero,ab40 <__smakebuf_r+0xac>
    abc4:	18ffff0c 	andi	r3,r3,65532
    abc8:	18c00054 	ori	r3,r3,1
    abcc:	003fdc06 	br	ab40 <__smakebuf_r+0xac>

0000abd0 <_read_r>:
    abd0:	defffe04 	addi	sp,sp,-8
    abd4:	2805883a 	mov	r2,r5
    abd8:	dc000015 	stw	r16,0(sp)
    abdc:	300b883a 	mov	r5,r6
    abe0:	2021883a 	mov	r16,r4
    abe4:	380d883a 	mov	r6,r7
    abe8:	1009883a 	mov	r4,r2
    abec:	00800074 	movhi	r2,1
    abf0:	dfc00115 	stw	ra,4(sp)
    abf4:	10371115 	stw	zero,-9148(r2)
    abf8:	000b4fc0 	call	b4fc <read>
    abfc:	10ffffd8 	cmpnei	r3,r2,-1
    ac00:	18000426 	beq	r3,zero,ac14 <_read_r+0x44>
    ac04:	dfc00117 	ldw	ra,4(sp)
    ac08:	dc000017 	ldw	r16,0(sp)
    ac0c:	dec00204 	addi	sp,sp,8
    ac10:	f800283a 	ret
    ac14:	00c00074 	movhi	r3,1
    ac18:	18f71117 	ldw	r3,-9148(r3)
    ac1c:	183ff926 	beq	r3,zero,ac04 <_read_r+0x34>
    ac20:	80c00015 	stw	r3,0(r16)
    ac24:	dfc00117 	ldw	ra,4(sp)
    ac28:	dc000017 	ldw	r16,0(sp)
    ac2c:	dec00204 	addi	sp,sp,8
    ac30:	f800283a 	ret

0000ac34 <_fstat_r>:
    ac34:	defffe04 	addi	sp,sp,-8
    ac38:	2805883a 	mov	r2,r5
    ac3c:	dc000015 	stw	r16,0(sp)
    ac40:	300b883a 	mov	r5,r6
    ac44:	2021883a 	mov	r16,r4
    ac48:	1009883a 	mov	r4,r2
    ac4c:	00800074 	movhi	r2,1
    ac50:	dfc00115 	stw	ra,4(sp)
    ac54:	10371115 	stw	zero,-9148(r2)
    ac58:	000b04c0 	call	b04c <fstat>
    ac5c:	10ffffd8 	cmpnei	r3,r2,-1
    ac60:	18000426 	beq	r3,zero,ac74 <_fstat_r+0x40>
    ac64:	dfc00117 	ldw	ra,4(sp)
    ac68:	dc000017 	ldw	r16,0(sp)
    ac6c:	dec00204 	addi	sp,sp,8
    ac70:	f800283a 	ret
    ac74:	00c00074 	movhi	r3,1
    ac78:	18f71117 	ldw	r3,-9148(r3)
    ac7c:	183ff926 	beq	r3,zero,ac64 <_fstat_r+0x30>
    ac80:	80c00015 	stw	r3,0(r16)
    ac84:	dfc00117 	ldw	ra,4(sp)
    ac88:	dc000017 	ldw	r16,0(sp)
    ac8c:	dec00204 	addi	sp,sp,8
    ac90:	f800283a 	ret

0000ac94 <_isatty_r>:
    ac94:	defffe04 	addi	sp,sp,-8
    ac98:	dc000015 	stw	r16,0(sp)
    ac9c:	00800074 	movhi	r2,1
    aca0:	2021883a 	mov	r16,r4
    aca4:	2809883a 	mov	r4,r5
    aca8:	dfc00115 	stw	ra,4(sp)
    acac:	10371115 	stw	zero,-9148(r2)
    acb0:	000b1440 	call	b144 <isatty>
    acb4:	10ffffd8 	cmpnei	r3,r2,-1
    acb8:	18000426 	beq	r3,zero,accc <_isatty_r+0x38>
    acbc:	dfc00117 	ldw	ra,4(sp)
    acc0:	dc000017 	ldw	r16,0(sp)
    acc4:	dec00204 	addi	sp,sp,8
    acc8:	f800283a 	ret
    accc:	00c00074 	movhi	r3,1
    acd0:	18f71117 	ldw	r3,-9148(r3)
    acd4:	183ff926 	beq	r3,zero,acbc <_isatty_r+0x28>
    acd8:	80c00015 	stw	r3,0(r16)
    acdc:	dfc00117 	ldw	ra,4(sp)
    ace0:	dc000017 	ldw	r16,0(sp)
    ace4:	dec00204 	addi	sp,sp,8
    ace8:	f800283a 	ret

0000acec <__divsi3>:
    acec:	20001a16 	blt	r4,zero,ad58 <__divsi3+0x6c>
    acf0:	000f883a 	mov	r7,zero
    acf4:	2800020e 	bge	r5,zero,ad00 <__divsi3+0x14>
    acf8:	014bc83a 	sub	r5,zero,r5
    acfc:	39c0005c 	xori	r7,r7,1
    ad00:	200d883a 	mov	r6,r4
    ad04:	00c00044 	movi	r3,1
    ad08:	2900092e 	bgeu	r5,r4,ad30 <__divsi3+0x44>
    ad0c:	00800804 	movi	r2,32
    ad10:	00c00044 	movi	r3,1
    ad14:	00000106 	br	ad1c <__divsi3+0x30>
    ad18:	10001226 	beq	r2,zero,ad64 <__divsi3+0x78>
    ad1c:	294b883a 	add	r5,r5,r5
    ad20:	10bfffc4 	addi	r2,r2,-1
    ad24:	18c7883a 	add	r3,r3,r3
    ad28:	293ffb36 	bltu	r5,r4,ad18 <__divsi3+0x2c>
    ad2c:	18000d26 	beq	r3,zero,ad64 <__divsi3+0x78>
    ad30:	0005883a 	mov	r2,zero
    ad34:	31400236 	bltu	r6,r5,ad40 <__divsi3+0x54>
    ad38:	314dc83a 	sub	r6,r6,r5
    ad3c:	10c4b03a 	or	r2,r2,r3
    ad40:	1806d07a 	srli	r3,r3,1
    ad44:	280ad07a 	srli	r5,r5,1
    ad48:	183ffa1e 	bne	r3,zero,ad34 <__divsi3+0x48>
    ad4c:	38000126 	beq	r7,zero,ad54 <__divsi3+0x68>
    ad50:	0085c83a 	sub	r2,zero,r2
    ad54:	f800283a 	ret
    ad58:	0109c83a 	sub	r4,zero,r4
    ad5c:	01c00044 	movi	r7,1
    ad60:	003fe406 	br	acf4 <__divsi3+0x8>
    ad64:	0005883a 	mov	r2,zero
    ad68:	003ff806 	br	ad4c <__divsi3+0x60>

0000ad6c <__modsi3>:
    ad6c:	20001a16 	blt	r4,zero,add8 <__modsi3+0x6c>
    ad70:	000f883a 	mov	r7,zero
    ad74:	2005883a 	mov	r2,r4
    ad78:	2800010e 	bge	r5,zero,ad80 <__modsi3+0x14>
    ad7c:	014bc83a 	sub	r5,zero,r5
    ad80:	00c00044 	movi	r3,1
    ad84:	2900092e 	bgeu	r5,r4,adac <__modsi3+0x40>
    ad88:	01800804 	movi	r6,32
    ad8c:	00c00044 	movi	r3,1
    ad90:	00000106 	br	ad98 <__modsi3+0x2c>
    ad94:	30000d26 	beq	r6,zero,adcc <__modsi3+0x60>
    ad98:	294b883a 	add	r5,r5,r5
    ad9c:	31bfffc4 	addi	r6,r6,-1
    ada0:	18c7883a 	add	r3,r3,r3
    ada4:	293ffb36 	bltu	r5,r4,ad94 <__modsi3+0x28>
    ada8:	18000826 	beq	r3,zero,adcc <__modsi3+0x60>
    adac:	1806d07a 	srli	r3,r3,1
    adb0:	11400136 	bltu	r2,r5,adb8 <__modsi3+0x4c>
    adb4:	1145c83a 	sub	r2,r2,r5
    adb8:	280ad07a 	srli	r5,r5,1
    adbc:	183ffb1e 	bne	r3,zero,adac <__modsi3+0x40>
    adc0:	38000126 	beq	r7,zero,adc8 <__modsi3+0x5c>
    adc4:	0085c83a 	sub	r2,zero,r2
    adc8:	f800283a 	ret
    adcc:	2005883a 	mov	r2,r4
    add0:	383ffd26 	beq	r7,zero,adc8 <__modsi3+0x5c>
    add4:	003ffb06 	br	adc4 <__modsi3+0x58>
    add8:	0109c83a 	sub	r4,zero,r4
    addc:	01c00044 	movi	r7,1
    ade0:	003fe406 	br	ad74 <__modsi3+0x8>

0000ade4 <__udivsi3>:
    ade4:	200d883a 	mov	r6,r4
    ade8:	2900152e 	bgeu	r5,r4,ae40 <__udivsi3+0x5c>
    adec:	28001416 	blt	r5,zero,ae40 <__udivsi3+0x5c>
    adf0:	00800804 	movi	r2,32
    adf4:	00c00044 	movi	r3,1
    adf8:	00000206 	br	ae04 <__udivsi3+0x20>
    adfc:	10000e26 	beq	r2,zero,ae38 <__udivsi3+0x54>
    ae00:	28000516 	blt	r5,zero,ae18 <__udivsi3+0x34>
    ae04:	294b883a 	add	r5,r5,r5
    ae08:	10bfffc4 	addi	r2,r2,-1
    ae0c:	18c7883a 	add	r3,r3,r3
    ae10:	293ffa36 	bltu	r5,r4,adfc <__udivsi3+0x18>
    ae14:	18000826 	beq	r3,zero,ae38 <__udivsi3+0x54>
    ae18:	0005883a 	mov	r2,zero
    ae1c:	31400236 	bltu	r6,r5,ae28 <__udivsi3+0x44>
    ae20:	314dc83a 	sub	r6,r6,r5
    ae24:	10c4b03a 	or	r2,r2,r3
    ae28:	1806d07a 	srli	r3,r3,1
    ae2c:	280ad07a 	srli	r5,r5,1
    ae30:	183ffa1e 	bne	r3,zero,ae1c <__udivsi3+0x38>
    ae34:	f800283a 	ret
    ae38:	0005883a 	mov	r2,zero
    ae3c:	f800283a 	ret
    ae40:	00c00044 	movi	r3,1
    ae44:	003ff406 	br	ae18 <__udivsi3+0x34>

0000ae48 <__umodsi3>:
    ae48:	2005883a 	mov	r2,r4
    ae4c:	2900132e 	bgeu	r5,r4,ae9c <__umodsi3+0x54>
    ae50:	28001216 	blt	r5,zero,ae9c <__umodsi3+0x54>
    ae54:	01800804 	movi	r6,32
    ae58:	00c00044 	movi	r3,1
    ae5c:	00000206 	br	ae68 <__umodsi3+0x20>
    ae60:	30000c26 	beq	r6,zero,ae94 <__umodsi3+0x4c>
    ae64:	28000516 	blt	r5,zero,ae7c <__umodsi3+0x34>
    ae68:	294b883a 	add	r5,r5,r5
    ae6c:	31bfffc4 	addi	r6,r6,-1
    ae70:	18c7883a 	add	r3,r3,r3
    ae74:	293ffa36 	bltu	r5,r4,ae60 <__umodsi3+0x18>
    ae78:	18000626 	beq	r3,zero,ae94 <__umodsi3+0x4c>
    ae7c:	1806d07a 	srli	r3,r3,1
    ae80:	11400136 	bltu	r2,r5,ae88 <__umodsi3+0x40>
    ae84:	1145c83a 	sub	r2,r2,r5
    ae88:	280ad07a 	srli	r5,r5,1
    ae8c:	183ffb1e 	bne	r3,zero,ae7c <__umodsi3+0x34>
    ae90:	f800283a 	ret
    ae94:	2005883a 	mov	r2,r4
    ae98:	f800283a 	ret
    ae9c:	00c00044 	movi	r3,1
    aea0:	003ff606 	br	ae7c <__umodsi3+0x34>

0000aea4 <__mulsi3>:
    aea4:	0005883a 	mov	r2,zero
    aea8:	20000726 	beq	r4,zero,aec8 <__mulsi3+0x24>
    aeac:	20c0004c 	andi	r3,r4,1
    aeb0:	2008d07a 	srli	r4,r4,1
    aeb4:	18000126 	beq	r3,zero,aebc <__mulsi3+0x18>
    aeb8:	1145883a 	add	r2,r2,r5
    aebc:	294b883a 	add	r5,r5,r5
    aec0:	203ffa1e 	bne	r4,zero,aeac <__mulsi3+0x8>
    aec4:	f800283a 	ret
    aec8:	f800283a 	ret

0000aecc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    aecc:	defffe04 	addi	sp,sp,-8
    aed0:	dfc00115 	stw	ra,4(sp)
    aed4:	df000015 	stw	fp,0(sp)
    aed8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    aedc:	d0a00917 	ldw	r2,-32732(gp)
    aee0:	10000326 	beq	r2,zero,aef0 <alt_get_errno+0x24>
    aee4:	d0a00917 	ldw	r2,-32732(gp)
    aee8:	103ee83a 	callr	r2
    aeec:	00000106 	br	aef4 <alt_get_errno+0x28>
    aef0:	d0a29904 	addi	r2,gp,-30108
}
    aef4:	e037883a 	mov	sp,fp
    aef8:	dfc00117 	ldw	ra,4(sp)
    aefc:	df000017 	ldw	fp,0(sp)
    af00:	dec00204 	addi	sp,sp,8
    af04:	f800283a 	ret

0000af08 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
    af08:	defffb04 	addi	sp,sp,-20
    af0c:	dfc00415 	stw	ra,16(sp)
    af10:	df000315 	stw	fp,12(sp)
    af14:	df000304 	addi	fp,sp,12
    af18:	e13ffd15 	stw	r4,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
    af1c:	e0bffd17 	ldw	r2,-12(fp)
    af20:	10000916 	blt	r2,zero,af48 <close+0x40>
    af24:	e0fffd17 	ldw	r3,-12(fp)
    af28:	1805883a 	mov	r2,r3
    af2c:	1085883a 	add	r2,r2,r2
    af30:	10c5883a 	add	r2,r2,r3
    af34:	100490ba 	slli	r2,r2,2
    af38:	00c00074 	movhi	r3,1
    af3c:	18f40d04 	addi	r3,r3,-12236
    af40:	10c5883a 	add	r2,r2,r3
    af44:	00000106 	br	af4c <close+0x44>
    af48:	0005883a 	mov	r2,zero
    af4c:	e0bfff15 	stw	r2,-4(fp)

  if (fd)
    af50:	e0bfff17 	ldw	r2,-4(fp)
    af54:	10001926 	beq	r2,zero,afbc <close+0xb4>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
    af58:	e0bfff17 	ldw	r2,-4(fp)
    af5c:	10800017 	ldw	r2,0(r2)
    af60:	10800417 	ldw	r2,16(r2)
    af64:	10000626 	beq	r2,zero,af80 <close+0x78>
    af68:	e0bfff17 	ldw	r2,-4(fp)
    af6c:	10800017 	ldw	r2,0(r2)
    af70:	10800417 	ldw	r2,16(r2)
    af74:	e13fff17 	ldw	r4,-4(fp)
    af78:	103ee83a 	callr	r2
    af7c:	00000106 	br	af84 <close+0x7c>
    af80:	0005883a 	mov	r2,zero
    af84:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    af88:	e13ffd17 	ldw	r4,-12(fp)
    af8c:	000b6040 	call	b604 <alt_release_fd>
    if (rval < 0)
    af90:	e0bffe17 	ldw	r2,-8(fp)
    af94:	1000070e 	bge	r2,zero,afb4 <close+0xac>
    {
      ALT_ERRNO = -rval;
    af98:	000aecc0 	call	aecc <alt_get_errno>
    af9c:	1007883a 	mov	r3,r2
    afa0:	e0bffe17 	ldw	r2,-8(fp)
    afa4:	0085c83a 	sub	r2,zero,r2
    afa8:	18800015 	stw	r2,0(r3)
      return -1;
    afac:	00bfffc4 	movi	r2,-1
    afb0:	00000706 	br	afd0 <close+0xc8>
    }
    return 0;
    afb4:	0005883a 	mov	r2,zero
    afb8:	00000506 	br	afd0 <close+0xc8>
  }
  else
  {
    ALT_ERRNO = EBADFD;
    afbc:	000aecc0 	call	aecc <alt_get_errno>
    afc0:	1007883a 	mov	r3,r2
    afc4:	00801444 	movi	r2,81
    afc8:	18800015 	stw	r2,0(r3)
    return -1;
    afcc:	00bfffc4 	movi	r2,-1
  }
}
    afd0:	e037883a 	mov	sp,fp
    afd4:	dfc00117 	ldw	ra,4(sp)
    afd8:	df000017 	ldw	fp,0(sp)
    afdc:	dec00204 	addi	sp,sp,8
    afe0:	f800283a 	ret

0000afe4 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
    afe4:	defffc04 	addi	sp,sp,-16
    afe8:	df000315 	stw	fp,12(sp)
    afec:	df000304 	addi	fp,sp,12
    aff0:	e13fff15 	stw	r4,-4(fp)
    aff4:	e17ffe15 	stw	r5,-8(fp)
    aff8:	e1bffd15 	stw	r6,-12(fp)
  return len;
    affc:	e0bffd17 	ldw	r2,-12(fp)
}
    b000:	e037883a 	mov	sp,fp
    b004:	df000017 	ldw	fp,0(sp)
    b008:	dec00104 	addi	sp,sp,4
    b00c:	f800283a 	ret

0000b010 <alt_get_errno>:
{
    b010:	defffe04 	addi	sp,sp,-8
    b014:	dfc00115 	stw	ra,4(sp)
    b018:	df000015 	stw	fp,0(sp)
    b01c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    b020:	d0a00917 	ldw	r2,-32732(gp)
    b024:	10000326 	beq	r2,zero,b034 <alt_get_errno+0x24>
    b028:	d0a00917 	ldw	r2,-32732(gp)
    b02c:	103ee83a 	callr	r2
    b030:	00000106 	br	b038 <alt_get_errno+0x28>
    b034:	d0a29904 	addi	r2,gp,-30108
}
    b038:	e037883a 	mov	sp,fp
    b03c:	dfc00117 	ldw	ra,4(sp)
    b040:	df000017 	ldw	fp,0(sp)
    b044:	dec00204 	addi	sp,sp,8
    b048:	f800283a 	ret

0000b04c <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
    b04c:	defffb04 	addi	sp,sp,-20
    b050:	dfc00415 	stw	ra,16(sp)
    b054:	df000315 	stw	fp,12(sp)
    b058:	df000304 	addi	fp,sp,12
    b05c:	e13ffe15 	stw	r4,-8(fp)
    b060:	e17ffd15 	stw	r5,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    b064:	e0bffe17 	ldw	r2,-8(fp)
    b068:	10000916 	blt	r2,zero,b090 <fstat+0x44>
    b06c:	e0fffe17 	ldw	r3,-8(fp)
    b070:	1805883a 	mov	r2,r3
    b074:	1085883a 	add	r2,r2,r2
    b078:	10c5883a 	add	r2,r2,r3
    b07c:	100490ba 	slli	r2,r2,2
    b080:	00c00074 	movhi	r3,1
    b084:	18f40d04 	addi	r3,r3,-12236
    b088:	10c5883a 	add	r2,r2,r3
    b08c:	00000106 	br	b094 <fstat+0x48>
    b090:	0005883a 	mov	r2,zero
    b094:	e0bfff15 	stw	r2,-4(fp)
  
  if (fd)
    b098:	e0bfff17 	ldw	r2,-4(fp)
    b09c:	10001026 	beq	r2,zero,b0e0 <fstat+0x94>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
    b0a0:	e0bfff17 	ldw	r2,-4(fp)
    b0a4:	10800017 	ldw	r2,0(r2)
    b0a8:	10800817 	ldw	r2,32(r2)
    b0ac:	10000726 	beq	r2,zero,b0cc <fstat+0x80>
    {
      return fd->dev->fstat(fd, st);
    b0b0:	e0bfff17 	ldw	r2,-4(fp)
    b0b4:	10800017 	ldw	r2,0(r2)
    b0b8:	10800817 	ldw	r2,32(r2)
    b0bc:	e17ffd17 	ldw	r5,-12(fp)
    b0c0:	e13fff17 	ldw	r4,-4(fp)
    b0c4:	103ee83a 	callr	r2
    b0c8:	00000a06 	br	b0f4 <fstat+0xa8>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
    b0cc:	e0bffd17 	ldw	r2,-12(fp)
    b0d0:	00c80004 	movi	r3,8192
    b0d4:	10c00115 	stw	r3,4(r2)
      return 0;
    b0d8:	0005883a 	mov	r2,zero
    b0dc:	00000506 	br	b0f4 <fstat+0xa8>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    b0e0:	000b0100 	call	b010 <alt_get_errno>
    b0e4:	1007883a 	mov	r3,r2
    b0e8:	00801444 	movi	r2,81
    b0ec:	18800015 	stw	r2,0(r3)
    return -1;
    b0f0:	00bfffc4 	movi	r2,-1
  }
}
    b0f4:	e037883a 	mov	sp,fp
    b0f8:	dfc00117 	ldw	ra,4(sp)
    b0fc:	df000017 	ldw	fp,0(sp)
    b100:	dec00204 	addi	sp,sp,8
    b104:	f800283a 	ret

0000b108 <alt_get_errno>:
{
    b108:	defffe04 	addi	sp,sp,-8
    b10c:	dfc00115 	stw	ra,4(sp)
    b110:	df000015 	stw	fp,0(sp)
    b114:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    b118:	d0a00917 	ldw	r2,-32732(gp)
    b11c:	10000326 	beq	r2,zero,b12c <alt_get_errno+0x24>
    b120:	d0a00917 	ldw	r2,-32732(gp)
    b124:	103ee83a 	callr	r2
    b128:	00000106 	br	b130 <alt_get_errno+0x28>
    b12c:	d0a29904 	addi	r2,gp,-30108
}
    b130:	e037883a 	mov	sp,fp
    b134:	dfc00117 	ldw	ra,4(sp)
    b138:	df000017 	ldw	fp,0(sp)
    b13c:	dec00204 	addi	sp,sp,8
    b140:	f800283a 	ret

0000b144 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
    b144:	deffea04 	addi	sp,sp,-88
    b148:	dfc01515 	stw	ra,84(sp)
    b14c:	df001415 	stw	fp,80(sp)
    b150:	df001404 	addi	fp,sp,80
    b154:	e13fec15 	stw	r4,-80(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    b158:	e0bfec17 	ldw	r2,-80(fp)
    b15c:	10000916 	blt	r2,zero,b184 <isatty+0x40>
    b160:	e0ffec17 	ldw	r3,-80(fp)
    b164:	1805883a 	mov	r2,r3
    b168:	1085883a 	add	r2,r2,r2
    b16c:	10c5883a 	add	r2,r2,r3
    b170:	100490ba 	slli	r2,r2,2
    b174:	00c00074 	movhi	r3,1
    b178:	18f40d04 	addi	r3,r3,-12236
    b17c:	10c5883a 	add	r2,r2,r3
    b180:	00000106 	br	b188 <isatty+0x44>
    b184:	0005883a 	mov	r2,zero
    b188:	e0bfff15 	stw	r2,-4(fp)
  
  if (fd)
    b18c:	e0bfff17 	ldw	r2,-4(fp)
    b190:	10000e26 	beq	r2,zero,b1cc <isatty+0x88>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
    b194:	e0bfff17 	ldw	r2,-4(fp)
    b198:	10800017 	ldw	r2,0(r2)
    b19c:	10800817 	ldw	r2,32(r2)
    b1a0:	1000021e 	bne	r2,zero,b1ac <isatty+0x68>
    {
      return 1;
    b1a4:	00800044 	movi	r2,1
    b1a8:	00000d06 	br	b1e0 <isatty+0x9c>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
    b1ac:	e0bfed04 	addi	r2,fp,-76
    b1b0:	100b883a 	mov	r5,r2
    b1b4:	e13fec17 	ldw	r4,-80(fp)
    b1b8:	000b04c0 	call	b04c <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
    b1bc:	e0bfee17 	ldw	r2,-72(fp)
    b1c0:	10880020 	cmpeqi	r2,r2,8192
    b1c4:	10803fcc 	andi	r2,r2,255
    b1c8:	00000506 	br	b1e0 <isatty+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    b1cc:	000b1080 	call	b108 <alt_get_errno>
    b1d0:	1007883a 	mov	r3,r2
    b1d4:	00801444 	movi	r2,81
    b1d8:	18800015 	stw	r2,0(r3)
    return 0;
    b1dc:	0005883a 	mov	r2,zero
  }
}
    b1e0:	e037883a 	mov	sp,fp
    b1e4:	dfc00117 	ldw	ra,4(sp)
    b1e8:	df000017 	ldw	fp,0(sp)
    b1ec:	dec00204 	addi	sp,sp,8
    b1f0:	f800283a 	ret

0000b1f4 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
    b1f4:	defffc04 	addi	sp,sp,-16
    b1f8:	df000315 	stw	fp,12(sp)
    b1fc:	df000304 	addi	fp,sp,12
    b200:	e13fff15 	stw	r4,-4(fp)
    b204:	e17ffe15 	stw	r5,-8(fp)
    b208:	e1bffd15 	stw	r6,-12(fp)
  if (to != from)
    b20c:	e0fffe17 	ldw	r3,-8(fp)
    b210:	e0bfff17 	ldw	r2,-4(fp)
    b214:	18800c26 	beq	r3,r2,b248 <alt_load_section+0x54>
  {
    while( to != end )
    b218:	00000806 	br	b23c <alt_load_section+0x48>
    {
      *to++ = *from++;
    b21c:	e0ffff17 	ldw	r3,-4(fp)
    b220:	18800104 	addi	r2,r3,4
    b224:	e0bfff15 	stw	r2,-4(fp)
    b228:	e0bffe17 	ldw	r2,-8(fp)
    b22c:	11000104 	addi	r4,r2,4
    b230:	e13ffe15 	stw	r4,-8(fp)
    b234:	18c00017 	ldw	r3,0(r3)
    b238:	10c00015 	stw	r3,0(r2)
    while( to != end )
    b23c:	e0fffe17 	ldw	r3,-8(fp)
    b240:	e0bffd17 	ldw	r2,-12(fp)
    b244:	18bff51e 	bne	r3,r2,b21c <alt_load_section+0x28>
    }
  }
}
    b248:	0001883a 	nop
    b24c:	e037883a 	mov	sp,fp
    b250:	df000017 	ldw	fp,0(sp)
    b254:	dec00104 	addi	sp,sp,4
    b258:	f800283a 	ret

0000b25c <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    b25c:	defffe04 	addi	sp,sp,-8
    b260:	dfc00115 	stw	ra,4(sp)
    b264:	df000015 	stw	fp,0(sp)
    b268:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
    b26c:	01800074 	movhi	r6,1
    b270:	31b48304 	addi	r6,r6,-11764
    b274:	01400074 	movhi	r5,1
    b278:	2971f804 	addi	r5,r5,-14368
    b27c:	01000074 	movhi	r4,1
    b280:	21348304 	addi	r4,r4,-11764
    b284:	000b1f40 	call	b1f4 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
    b288:	01800074 	movhi	r6,1
    b28c:	31a00804 	addi	r6,r6,-32736
    b290:	01400074 	movhi	r5,1
    b294:	29600804 	addi	r5,r5,-32736
    b298:	01000074 	movhi	r4,1
    b29c:	21200804 	addi	r4,r4,-32736
    b2a0:	000b1f40 	call	b1f4 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
    b2a4:	01800074 	movhi	r6,1
    b2a8:	31b1f804 	addi	r6,r6,-14368
    b2ac:	01400074 	movhi	r5,1
    b2b0:	2971e604 	addi	r5,r5,-14440
    b2b4:	01000074 	movhi	r4,1
    b2b8:	2131e604 	addi	r4,r4,-14440
    b2bc:	000b1f40 	call	b1f4 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    b2c0:	000bccc0 	call	bccc <alt_dcache_flush_all>
  alt_icache_flush_all();
    b2c4:	000be8c0 	call	be8c <alt_icache_flush_all>
}
    b2c8:	0001883a 	nop
    b2cc:	e037883a 	mov	sp,fp
    b2d0:	dfc00117 	ldw	ra,4(sp)
    b2d4:	df000017 	ldw	fp,0(sp)
    b2d8:	dec00204 	addi	sp,sp,8
    b2dc:	f800283a 	ret

0000b2e0 <alt_get_errno>:
{
    b2e0:	defffe04 	addi	sp,sp,-8
    b2e4:	dfc00115 	stw	ra,4(sp)
    b2e8:	df000015 	stw	fp,0(sp)
    b2ec:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    b2f0:	d0a00917 	ldw	r2,-32732(gp)
    b2f4:	10000326 	beq	r2,zero,b304 <alt_get_errno+0x24>
    b2f8:	d0a00917 	ldw	r2,-32732(gp)
    b2fc:	103ee83a 	callr	r2
    b300:	00000106 	br	b308 <alt_get_errno+0x28>
    b304:	d0a29904 	addi	r2,gp,-30108
}
    b308:	e037883a 	mov	sp,fp
    b30c:	dfc00117 	ldw	ra,4(sp)
    b310:	df000017 	ldw	fp,0(sp)
    b314:	dec00204 	addi	sp,sp,8
    b318:	f800283a 	ret

0000b31c <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
    b31c:	defff904 	addi	sp,sp,-28
    b320:	dfc00615 	stw	ra,24(sp)
    b324:	df000515 	stw	fp,20(sp)
    b328:	df000504 	addi	fp,sp,20
    b32c:	e13ffd15 	stw	r4,-12(fp)
    b330:	e17ffc15 	stw	r5,-16(fp)
    b334:	e1bffb15 	stw	r6,-20(fp)
  alt_fd* fd;
  off_t   rc = 0; 
    b338:	e03fff15 	stw	zero,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    b33c:	e0bffd17 	ldw	r2,-12(fp)
    b340:	10000916 	blt	r2,zero,b368 <lseek+0x4c>
    b344:	e0fffd17 	ldw	r3,-12(fp)
    b348:	1805883a 	mov	r2,r3
    b34c:	1085883a 	add	r2,r2,r2
    b350:	10c5883a 	add	r2,r2,r3
    b354:	100490ba 	slli	r2,r2,2
    b358:	00c00074 	movhi	r3,1
    b35c:	18f40d04 	addi	r3,r3,-12236
    b360:	10c5883a 	add	r2,r2,r3
    b364:	00000106 	br	b36c <lseek+0x50>
    b368:	0005883a 	mov	r2,zero
    b36c:	e0bffe15 	stw	r2,-8(fp)
  
  if (fd) 
    b370:	e0bffe17 	ldw	r2,-8(fp)
    b374:	10001026 	beq	r2,zero,b3b8 <lseek+0x9c>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
    b378:	e0bffe17 	ldw	r2,-8(fp)
    b37c:	10800017 	ldw	r2,0(r2)
    b380:	10800717 	ldw	r2,28(r2)
    b384:	10000926 	beq	r2,zero,b3ac <lseek+0x90>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
    b388:	e0bffe17 	ldw	r2,-8(fp)
    b38c:	10800017 	ldw	r2,0(r2)
    b390:	10800717 	ldw	r2,28(r2)
    b394:	e1bffb17 	ldw	r6,-20(fp)
    b398:	e17ffc17 	ldw	r5,-16(fp)
    b39c:	e13ffe17 	ldw	r4,-8(fp)
    b3a0:	103ee83a 	callr	r2
    b3a4:	e0bfff15 	stw	r2,-4(fp)
    b3a8:	00000506 	br	b3c0 <lseek+0xa4>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
    b3ac:	00bfde84 	movi	r2,-134
    b3b0:	e0bfff15 	stw	r2,-4(fp)
    b3b4:	00000206 	br	b3c0 <lseek+0xa4>
    }
  }
  else  
  {
    rc = -EBADFD;
    b3b8:	00bfebc4 	movi	r2,-81
    b3bc:	e0bfff15 	stw	r2,-4(fp)
  }

  if (rc < 0)
    b3c0:	e0bfff17 	ldw	r2,-4(fp)
    b3c4:	1000070e 	bge	r2,zero,b3e4 <lseek+0xc8>
  {
    ALT_ERRNO = -rc;
    b3c8:	000b2e00 	call	b2e0 <alt_get_errno>
    b3cc:	1007883a 	mov	r3,r2
    b3d0:	e0bfff17 	ldw	r2,-4(fp)
    b3d4:	0085c83a 	sub	r2,zero,r2
    b3d8:	18800015 	stw	r2,0(r3)
    rc = -1;
    b3dc:	00bfffc4 	movi	r2,-1
    b3e0:	e0bfff15 	stw	r2,-4(fp)
  }

  return rc;
    b3e4:	e0bfff17 	ldw	r2,-4(fp)
}
    b3e8:	e037883a 	mov	sp,fp
    b3ec:	dfc00117 	ldw	ra,4(sp)
    b3f0:	df000017 	ldw	fp,0(sp)
    b3f4:	dec00204 	addi	sp,sp,8
    b3f8:	f800283a 	ret

0000b3fc <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    b3fc:	defffd04 	addi	sp,sp,-12
    b400:	dfc00215 	stw	ra,8(sp)
    b404:	df000115 	stw	fp,4(sp)
    b408:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    b40c:	0009883a 	mov	r4,zero
    b410:	000b8c80 	call	b8c8 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
    b414:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    b418:	000b9000 	call	b900 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
    b41c:	01800074 	movhi	r6,1
    b420:	31b1ee04 	addi	r6,r6,-14408
    b424:	01400074 	movhi	r5,1
    b428:	2971ee04 	addi	r5,r5,-14408
    b42c:	01000074 	movhi	r4,1
    b430:	2131ee04 	addi	r4,r4,-14408
    b434:	000bf800 	call	bf80 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
    b438:	000bdcc0 	call	bdcc <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
    b43c:	01000074 	movhi	r4,1
    b440:	212f8b04 	addi	r4,r4,-16852
    b444:	000c4e80 	call	c4e8 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
    b448:	d0a29a17 	ldw	r2,-30104(gp)
    b44c:	d0e29b17 	ldw	r3,-30100(gp)
    b450:	d1229c17 	ldw	r4,-30096(gp)
    b454:	200d883a 	mov	r6,r4
    b458:	180b883a 	mov	r5,r3
    b45c:	1009883a 	mov	r4,r2
    b460:	00080a00 	call	80a0 <main>
    b464:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
    b468:	01000044 	movi	r4,1
    b46c:	000af080 	call	af08 <close>
  exit (result);
    b470:	e13fff17 	ldw	r4,-4(fp)
    b474:	000c4fc0 	call	c4fc <exit>

0000b478 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
    b478:	defffe04 	addi	sp,sp,-8
    b47c:	df000115 	stw	fp,4(sp)
    b480:	df000104 	addi	fp,sp,4
    b484:	e13fff15 	stw	r4,-4(fp)
}
    b488:	0001883a 	nop
    b48c:	e037883a 	mov	sp,fp
    b490:	df000017 	ldw	fp,0(sp)
    b494:	dec00104 	addi	sp,sp,4
    b498:	f800283a 	ret

0000b49c <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
    b49c:	defffe04 	addi	sp,sp,-8
    b4a0:	df000115 	stw	fp,4(sp)
    b4a4:	df000104 	addi	fp,sp,4
    b4a8:	e13fff15 	stw	r4,-4(fp)
}
    b4ac:	0001883a 	nop
    b4b0:	e037883a 	mov	sp,fp
    b4b4:	df000017 	ldw	fp,0(sp)
    b4b8:	dec00104 	addi	sp,sp,4
    b4bc:	f800283a 	ret

0000b4c0 <alt_get_errno>:
{
    b4c0:	defffe04 	addi	sp,sp,-8
    b4c4:	dfc00115 	stw	ra,4(sp)
    b4c8:	df000015 	stw	fp,0(sp)
    b4cc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    b4d0:	d0a00917 	ldw	r2,-32732(gp)
    b4d4:	10000326 	beq	r2,zero,b4e4 <alt_get_errno+0x24>
    b4d8:	d0a00917 	ldw	r2,-32732(gp)
    b4dc:	103ee83a 	callr	r2
    b4e0:	00000106 	br	b4e8 <alt_get_errno+0x28>
    b4e4:	d0a29904 	addi	r2,gp,-30108
}
    b4e8:	e037883a 	mov	sp,fp
    b4ec:	dfc00117 	ldw	ra,4(sp)
    b4f0:	df000017 	ldw	fp,0(sp)
    b4f4:	dec00204 	addi	sp,sp,8
    b4f8:	f800283a 	ret

0000b4fc <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
    b4fc:	defff904 	addi	sp,sp,-28
    b500:	dfc00615 	stw	ra,24(sp)
    b504:	df000515 	stw	fp,20(sp)
    b508:	df000504 	addi	fp,sp,20
    b50c:	e13ffd15 	stw	r4,-12(fp)
    b510:	e17ffc15 	stw	r5,-16(fp)
    b514:	e1bffb15 	stw	r6,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    b518:	e0bffd17 	ldw	r2,-12(fp)
    b51c:	10000916 	blt	r2,zero,b544 <read+0x48>
    b520:	e0fffd17 	ldw	r3,-12(fp)
    b524:	1805883a 	mov	r2,r3
    b528:	1085883a 	add	r2,r2,r2
    b52c:	10c5883a 	add	r2,r2,r3
    b530:	100490ba 	slli	r2,r2,2
    b534:	00c00074 	movhi	r3,1
    b538:	18f40d04 	addi	r3,r3,-12236
    b53c:	10c5883a 	add	r2,r2,r3
    b540:	00000106 	br	b548 <read+0x4c>
    b544:	0005883a 	mov	r2,zero
    b548:	e0bfff15 	stw	r2,-4(fp)
  
  if (fd)
    b54c:	e0bfff17 	ldw	r2,-4(fp)
    b550:	10002226 	beq	r2,zero,b5dc <read+0xe0>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
    b554:	e0bfff17 	ldw	r2,-4(fp)
    b558:	10800217 	ldw	r2,8(r2)
    b55c:	108000cc 	andi	r2,r2,3
    b560:	10800060 	cmpeqi	r2,r2,1
    b564:	1000181e 	bne	r2,zero,b5c8 <read+0xcc>
        (fd->dev->read))
    b568:	e0bfff17 	ldw	r2,-4(fp)
    b56c:	10800017 	ldw	r2,0(r2)
    b570:	10800517 	ldw	r2,20(r2)
    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
    b574:	10001426 	beq	r2,zero,b5c8 <read+0xcc>
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
    b578:	e0bfff17 	ldw	r2,-4(fp)
    b57c:	10800017 	ldw	r2,0(r2)
    b580:	10800517 	ldw	r2,20(r2)
    b584:	e0fffb17 	ldw	r3,-20(fp)
    b588:	180d883a 	mov	r6,r3
    b58c:	e17ffc17 	ldw	r5,-16(fp)
    b590:	e13fff17 	ldw	r4,-4(fp)
    b594:	103ee83a 	callr	r2
    b598:	e0bffe15 	stw	r2,-8(fp)
    b59c:	e0bffe17 	ldw	r2,-8(fp)
    b5a0:	1000070e 	bge	r2,zero,b5c0 <read+0xc4>
        {
          ALT_ERRNO = -rval;
    b5a4:	000b4c00 	call	b4c0 <alt_get_errno>
    b5a8:	1007883a 	mov	r3,r2
    b5ac:	e0bffe17 	ldw	r2,-8(fp)
    b5b0:	0085c83a 	sub	r2,zero,r2
    b5b4:	18800015 	stw	r2,0(r3)
          return -1;
    b5b8:	00bfffc4 	movi	r2,-1
    b5bc:	00000c06 	br	b5f0 <read+0xf4>
        }
        return rval;
    b5c0:	e0bffe17 	ldw	r2,-8(fp)
    b5c4:	00000a06 	br	b5f0 <read+0xf4>
      }
      else
      {
        ALT_ERRNO = EACCES;
    b5c8:	000b4c00 	call	b4c0 <alt_get_errno>
    b5cc:	1007883a 	mov	r3,r2
    b5d0:	00800344 	movi	r2,13
    b5d4:	18800015 	stw	r2,0(r3)
    b5d8:	00000406 	br	b5ec <read+0xf0>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
    b5dc:	000b4c00 	call	b4c0 <alt_get_errno>
    b5e0:	1007883a 	mov	r3,r2
    b5e4:	00801444 	movi	r2,81
    b5e8:	18800015 	stw	r2,0(r3)
  }
  return -1;
    b5ec:	00bfffc4 	movi	r2,-1
}
    b5f0:	e037883a 	mov	sp,fp
    b5f4:	dfc00117 	ldw	ra,4(sp)
    b5f8:	df000017 	ldw	fp,0(sp)
    b5fc:	dec00204 	addi	sp,sp,8
    b600:	f800283a 	ret

0000b604 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
    b604:	defffe04 	addi	sp,sp,-8
    b608:	df000115 	stw	fp,4(sp)
    b60c:	df000104 	addi	fp,sp,4
    b610:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
    b614:	e0bfff17 	ldw	r2,-4(fp)
    b618:	108000d0 	cmplti	r2,r2,3
    b61c:	1000101e 	bne	r2,zero,b660 <alt_release_fd+0x5c>
  {
    alt_fd_list[fd].fd_flags = 0;
    b620:	e0ffff17 	ldw	r3,-4(fp)
    b624:	1805883a 	mov	r2,r3
    b628:	1085883a 	add	r2,r2,r2
    b62c:	10c5883a 	add	r2,r2,r3
    b630:	100490ba 	slli	r2,r2,2
    b634:	00c00074 	movhi	r3,1
    b638:	10c7883a 	add	r3,r2,r3
    b63c:	18340f15 	stw	zero,-12228(r3)
    alt_fd_list[fd].dev      = 0;
    b640:	e0ffff17 	ldw	r3,-4(fp)
    b644:	1805883a 	mov	r2,r3
    b648:	1085883a 	add	r2,r2,r2
    b64c:	10c5883a 	add	r2,r2,r3
    b650:	100490ba 	slli	r2,r2,2
    b654:	00c00074 	movhi	r3,1
    b658:	10c7883a 	add	r3,r2,r3
    b65c:	18340d15 	stw	zero,-12236(r3)
  }
}
    b660:	0001883a 	nop
    b664:	e037883a 	mov	sp,fp
    b668:	df000017 	ldw	fp,0(sp)
    b66c:	dec00104 	addi	sp,sp,4
    b670:	f800283a 	ret

0000b674 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
    b674:	defff904 	addi	sp,sp,-28
    b678:	df000615 	stw	fp,24(sp)
    b67c:	df000604 	addi	fp,sp,24
    b680:	e13ffa15 	stw	r4,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    b684:	0005303a 	rdctl	r2,status
    b688:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    b68c:	e0fffd17 	ldw	r3,-12(fp)
    b690:	00bfff84 	movi	r2,-2
    b694:	1884703a 	and	r2,r3,r2
    b698:	1001703a 	wrctl	status,r2
  
  return context;
    b69c:	e0bffd17 	ldw	r2,-12(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
    b6a0:	e0bfff15 	stw	r2,-4(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
    b6a4:	d0a00a17 	ldw	r2,-32728(gp)
    b6a8:	10c000c4 	addi	r3,r2,3
    b6ac:	00bfff04 	movi	r2,-4
    b6b0:	1884703a 	and	r2,r3,r2
    b6b4:	d0a00a15 	stw	r2,-32728(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
    b6b8:	d0e00a17 	ldw	r3,-32728(gp)
    b6bc:	e0bffa17 	ldw	r2,-24(fp)
    b6c0:	1887883a 	add	r3,r3,r2
    b6c4:	00800074 	movhi	r2,1
    b6c8:	10800004 	addi	r2,r2,0
    b6cc:	10c0062e 	bgeu	r2,r3,b6e8 <sbrk+0x74>
    b6d0:	e0bfff17 	ldw	r2,-4(fp)
    b6d4:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    b6d8:	e0bffc17 	ldw	r2,-16(fp)
    b6dc:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
    b6e0:	00bfffc4 	movi	r2,-1
    b6e4:	00000b06 	br	b714 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
    b6e8:	d0a00a17 	ldw	r2,-32728(gp)
    b6ec:	e0bffe15 	stw	r2,-8(fp)
  heap_end += incr; 
    b6f0:	d0e00a17 	ldw	r3,-32728(gp)
    b6f4:	e0bffa17 	ldw	r2,-24(fp)
    b6f8:	1885883a 	add	r2,r3,r2
    b6fc:	d0a00a15 	stw	r2,-32728(gp)
    b700:	e0bfff17 	ldw	r2,-4(fp)
    b704:	e0bffb15 	stw	r2,-20(fp)
    b708:	e0bffb17 	ldw	r2,-20(fp)
    b70c:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
    b710:	e0bffe17 	ldw	r2,-8(fp)
} 
    b714:	e037883a 	mov	sp,fp
    b718:	df000017 	ldw	fp,0(sp)
    b71c:	dec00104 	addi	sp,sp,4
    b720:	f800283a 	ret

0000b724 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
    b724:	defffd04 	addi	sp,sp,-12
    b728:	dfc00215 	stw	ra,8(sp)
    b72c:	df000115 	stw	fp,4(sp)
    b730:	df000104 	addi	fp,sp,4
    b734:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
    b738:	e13fff17 	ldw	r4,-4(fp)
    b73c:	000bb740 	call	bb74 <alt_busy_sleep>
}
    b740:	e037883a 	mov	sp,fp
    b744:	dfc00117 	ldw	ra,4(sp)
    b748:	df000017 	ldw	fp,0(sp)
    b74c:	dec00204 	addi	sp,sp,8
    b750:	f800283a 	ret

0000b754 <alt_get_errno>:
{
    b754:	defffe04 	addi	sp,sp,-8
    b758:	dfc00115 	stw	ra,4(sp)
    b75c:	df000015 	stw	fp,0(sp)
    b760:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    b764:	d0a00917 	ldw	r2,-32732(gp)
    b768:	10000326 	beq	r2,zero,b778 <alt_get_errno+0x24>
    b76c:	d0a00917 	ldw	r2,-32732(gp)
    b770:	103ee83a 	callr	r2
    b774:	00000106 	br	b77c <alt_get_errno+0x28>
    b778:	d0a29904 	addi	r2,gp,-30108
}
    b77c:	e037883a 	mov	sp,fp
    b780:	dfc00117 	ldw	ra,4(sp)
    b784:	df000017 	ldw	fp,0(sp)
    b788:	dec00204 	addi	sp,sp,8
    b78c:	f800283a 	ret

0000b790 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
    b790:	defff904 	addi	sp,sp,-28
    b794:	dfc00615 	stw	ra,24(sp)
    b798:	df000515 	stw	fp,20(sp)
    b79c:	df000504 	addi	fp,sp,20
    b7a0:	e13ffd15 	stw	r4,-12(fp)
    b7a4:	e17ffc15 	stw	r5,-16(fp)
    b7a8:	e1bffb15 	stw	r6,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    b7ac:	e0bffd17 	ldw	r2,-12(fp)
    b7b0:	10000916 	blt	r2,zero,b7d8 <write+0x48>
    b7b4:	e0fffd17 	ldw	r3,-12(fp)
    b7b8:	1805883a 	mov	r2,r3
    b7bc:	1085883a 	add	r2,r2,r2
    b7c0:	10c5883a 	add	r2,r2,r3
    b7c4:	100490ba 	slli	r2,r2,2
    b7c8:	00c00074 	movhi	r3,1
    b7cc:	18f40d04 	addi	r3,r3,-12236
    b7d0:	10c5883a 	add	r2,r2,r3
    b7d4:	00000106 	br	b7dc <write+0x4c>
    b7d8:	0005883a 	mov	r2,zero
    b7dc:	e0bfff15 	stw	r2,-4(fp)
  
  if (fd)
    b7e0:	e0bfff17 	ldw	r2,-4(fp)
    b7e4:	10002126 	beq	r2,zero,b86c <write+0xdc>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
    b7e8:	e0bfff17 	ldw	r2,-4(fp)
    b7ec:	10800217 	ldw	r2,8(r2)
    b7f0:	108000cc 	andi	r2,r2,3
    b7f4:	10001826 	beq	r2,zero,b858 <write+0xc8>
    b7f8:	e0bfff17 	ldw	r2,-4(fp)
    b7fc:	10800017 	ldw	r2,0(r2)
    b800:	10800617 	ldw	r2,24(r2)
    b804:	10001426 	beq	r2,zero,b858 <write+0xc8>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
    b808:	e0bfff17 	ldw	r2,-4(fp)
    b80c:	10800017 	ldw	r2,0(r2)
    b810:	10800617 	ldw	r2,24(r2)
    b814:	e0fffb17 	ldw	r3,-20(fp)
    b818:	180d883a 	mov	r6,r3
    b81c:	e17ffc17 	ldw	r5,-16(fp)
    b820:	e13fff17 	ldw	r4,-4(fp)
    b824:	103ee83a 	callr	r2
    b828:	e0bffe15 	stw	r2,-8(fp)
    b82c:	e0bffe17 	ldw	r2,-8(fp)
    b830:	1000070e 	bge	r2,zero,b850 <write+0xc0>
      {
        ALT_ERRNO = -rval;
    b834:	000b7540 	call	b754 <alt_get_errno>
    b838:	1007883a 	mov	r3,r2
    b83c:	e0bffe17 	ldw	r2,-8(fp)
    b840:	0085c83a 	sub	r2,zero,r2
    b844:	18800015 	stw	r2,0(r3)
        return -1;
    b848:	00bfffc4 	movi	r2,-1
    b84c:	00000c06 	br	b880 <write+0xf0>
      }
      return rval;
    b850:	e0bffe17 	ldw	r2,-8(fp)
    b854:	00000a06 	br	b880 <write+0xf0>
    }
    else
    {
      ALT_ERRNO = EACCES;
    b858:	000b7540 	call	b754 <alt_get_errno>
    b85c:	1007883a 	mov	r3,r2
    b860:	00800344 	movi	r2,13
    b864:	18800015 	stw	r2,0(r3)
    b868:	00000406 	br	b87c <write+0xec>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
    b86c:	000b7540 	call	b754 <alt_get_errno>
    b870:	1007883a 	mov	r3,r2
    b874:	00801444 	movi	r2,81
    b878:	18800015 	stw	r2,0(r3)
  }
  return -1;
    b87c:	00bfffc4 	movi	r2,-1
}
    b880:	e037883a 	mov	sp,fp
    b884:	dfc00117 	ldw	ra,4(sp)
    b888:	df000017 	ldw	fp,0(sp)
    b88c:	dec00204 	addi	sp,sp,8
    b890:	f800283a 	ret

0000b894 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
    b894:	defffd04 	addi	sp,sp,-12
    b898:	dfc00215 	stw	ra,8(sp)
    b89c:	df000115 	stw	fp,4(sp)
    b8a0:	df000104 	addi	fp,sp,4
    b8a4:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
    b8a8:	d1600604 	addi	r5,gp,-32744
    b8ac:	e13fff17 	ldw	r4,-4(fp)
    b8b0:	000bd280 	call	bd28 <alt_dev_llist_insert>
}
    b8b4:	e037883a 	mov	sp,fp
    b8b8:	dfc00117 	ldw	ra,4(sp)
    b8bc:	df000017 	ldw	fp,0(sp)
    b8c0:	dec00204 	addi	sp,sp,8
    b8c4:	f800283a 	ret

0000b8c8 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    b8c8:	defffd04 	addi	sp,sp,-12
    b8cc:	dfc00215 	stw	ra,8(sp)
    b8d0:	df000115 	stw	fp,4(sp)
    b8d4:	df000104 	addi	fp,sp,4
    b8d8:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
    b8dc:	000c2740 	call	c274 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    b8e0:	00800044 	movi	r2,1
    b8e4:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    b8e8:	0001883a 	nop
    b8ec:	e037883a 	mov	sp,fp
    b8f0:	dfc00117 	ldw	ra,4(sp)
    b8f4:	df000017 	ldw	fp,0(sp)
    b8f8:	dec00204 	addi	sp,sp,8
    b8fc:	f800283a 	ret

0000b900 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    b900:	defffe04 	addi	sp,sp,-8
    b904:	dfc00115 	stw	ra,4(sp)
    b908:	df000015 	stw	fp,0(sp)
    b90c:	d839883a 	mov	fp,sp
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
    b910:	01000074 	movhi	r4,1
    b914:	21346d04 	addi	r4,r4,-11852
    b918:	000b8940 	call	b894 <alt_dev_reg>
}
    b91c:	0001883a 	nop
    b920:	e037883a 	mov	sp,fp
    b924:	dfc00117 	ldw	ra,4(sp)
    b928:	df000017 	ldw	fp,0(sp)
    b92c:	dec00204 	addi	sp,sp,8
    b930:	f800283a 	ret

0000b934 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    b934:	defffa04 	addi	sp,sp,-24
    b938:	dfc00515 	stw	ra,20(sp)
    b93c:	df000415 	stw	fp,16(sp)
    b940:	df000404 	addi	fp,sp,16
    b944:	e13ffe15 	stw	r4,-8(fp)
    b948:	e17ffd15 	stw	r5,-12(fp)
    b94c:	e1bffc15 	stw	r6,-16(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    b950:	e0bffe17 	ldw	r2,-8(fp)
    b954:	10800017 	ldw	r2,0(r2)
    b958:	e0bfff15 	stw	r2,-4(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
    b95c:	e0bfff17 	ldw	r2,-4(fp)
    b960:	10c00a04 	addi	r3,r2,40
    b964:	e0bffe17 	ldw	r2,-8(fp)
    b968:	10800217 	ldw	r2,8(r2)
    b96c:	100f883a 	mov	r7,r2
    b970:	e1bffc17 	ldw	r6,-16(fp)
    b974:	e17ffd17 	ldw	r5,-12(fp)
    b978:	1809883a 	mov	r4,r3
    b97c:	000b9f40 	call	b9f4 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
    b980:	e037883a 	mov	sp,fp
    b984:	dfc00117 	ldw	ra,4(sp)
    b988:	df000017 	ldw	fp,0(sp)
    b98c:	dec00204 	addi	sp,sp,8
    b990:	f800283a 	ret

0000b994 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    b994:	defffa04 	addi	sp,sp,-24
    b998:	dfc00515 	stw	ra,20(sp)
    b99c:	df000415 	stw	fp,16(sp)
    b9a0:	df000404 	addi	fp,sp,16
    b9a4:	e13ffe15 	stw	r4,-8(fp)
    b9a8:	e17ffd15 	stw	r5,-12(fp)
    b9ac:	e1bffc15 	stw	r6,-16(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    b9b0:	e0bffe17 	ldw	r2,-8(fp)
    b9b4:	10800017 	ldw	r2,0(r2)
    b9b8:	e0bfff15 	stw	r2,-4(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
    b9bc:	e0bfff17 	ldw	r2,-4(fp)
    b9c0:	10c00a04 	addi	r3,r2,40
    b9c4:	e0bffe17 	ldw	r2,-8(fp)
    b9c8:	10800217 	ldw	r2,8(r2)
    b9cc:	100f883a 	mov	r7,r2
    b9d0:	e1bffc17 	ldw	r6,-16(fp)
    b9d4:	e17ffd17 	ldw	r5,-12(fp)
    b9d8:	1809883a 	mov	r4,r3
    b9dc:	000bae00 	call	bae0 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
    b9e0:	e037883a 	mov	sp,fp
    b9e4:	dfc00117 	ldw	ra,4(sp)
    b9e8:	df000017 	ldw	fp,0(sp)
    b9ec:	dec00204 	addi	sp,sp,8
    b9f0:	f800283a 	ret

0000b9f4 <altera_avalon_jtag_uart_read>:
 */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char* buffer, int space, int flags)
{
    b9f4:	defff704 	addi	sp,sp,-36
    b9f8:	df000815 	stw	fp,32(sp)
    b9fc:	df000804 	addi	fp,sp,32
    ba00:	e13ffb15 	stw	r4,-20(fp)
    ba04:	e17ffa15 	stw	r5,-24(fp)
    ba08:	e1bff915 	stw	r6,-28(fp)
    ba0c:	e1fff815 	stw	r7,-32(fp)
  unsigned int base = sp->base;
    ba10:	e0bffb17 	ldw	r2,-20(fp)
    ba14:	10800017 	ldw	r2,0(r2)
    ba18:	e0bffe15 	stw	r2,-8(fp)

  char * ptr = buffer;
    ba1c:	e0bffa17 	ldw	r2,-24(fp)
    ba20:	e0bfff15 	stw	r2,-4(fp)
  char * end = buffer + space;
    ba24:	e0bff917 	ldw	r2,-28(fp)
    ba28:	e0fffa17 	ldw	r3,-24(fp)
    ba2c:	1885883a 	add	r2,r3,r2
    ba30:	e0bffd15 	stw	r2,-12(fp)

  while (ptr < end)
    ba34:	00001206 	br	ba80 <altera_avalon_jtag_uart_read+0x8c>
  {
    unsigned int data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
    ba38:	e0bffe17 	ldw	r2,-8(fp)
    ba3c:	10800037 	ldwio	r2,0(r2)
    ba40:	e0bffc15 	stw	r2,-16(fp)

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
    ba44:	e0bffc17 	ldw	r2,-16(fp)
    ba48:	10a0000c 	andi	r2,r2,32768
    ba4c:	10000626 	beq	r2,zero,ba68 <altera_avalon_jtag_uart_read+0x74>
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    ba50:	e0bfff17 	ldw	r2,-4(fp)
    ba54:	10c00044 	addi	r3,r2,1
    ba58:	e0ffff15 	stw	r3,-4(fp)
    ba5c:	e0fffc17 	ldw	r3,-16(fp)
    ba60:	10c00005 	stb	r3,0(r2)
    ba64:	00000606 	br	ba80 <altera_avalon_jtag_uart_read+0x8c>
    else if (ptr != buffer)
    ba68:	e0ffff17 	ldw	r3,-4(fp)
    ba6c:	e0bffa17 	ldw	r2,-24(fp)
    ba70:	1880071e 	bne	r3,r2,ba90 <altera_avalon_jtag_uart_read+0x9c>
      break;
    else if(flags & O_NONBLOCK)
    ba74:	e0bff817 	ldw	r2,-32(fp)
    ba78:	1090000c 	andi	r2,r2,16384
    ba7c:	1000061e 	bne	r2,zero,ba98 <altera_avalon_jtag_uart_read+0xa4>
  while (ptr < end)
    ba80:	e0ffff17 	ldw	r3,-4(fp)
    ba84:	e0bffd17 	ldw	r2,-12(fp)
    ba88:	18bfeb36 	bltu	r3,r2,ba38 <altera_avalon_jtag_uart_read+0x44>
    ba8c:	00000306 	br	ba9c <altera_avalon_jtag_uart_read+0xa8>
      break;
    ba90:	0001883a 	nop
    ba94:	00000106 	br	ba9c <altera_avalon_jtag_uart_read+0xa8>
      break;   
    ba98:	0001883a 	nop
    
  }

  if (ptr != buffer)
    ba9c:	e0ffff17 	ldw	r3,-4(fp)
    baa0:	e0bffa17 	ldw	r2,-24(fp)
    baa4:	18800426 	beq	r3,r2,bab8 <altera_avalon_jtag_uart_read+0xc4>
    return ptr - buffer;
    baa8:	e0ffff17 	ldw	r3,-4(fp)
    baac:	e0bffa17 	ldw	r2,-24(fp)
    bab0:	1885c83a 	sub	r2,r3,r2
    bab4:	00000606 	br	bad0 <altera_avalon_jtag_uart_read+0xdc>
  else if (flags & O_NONBLOCK)
    bab8:	e0bff817 	ldw	r2,-32(fp)
    babc:	1090000c 	andi	r2,r2,16384
    bac0:	10000226 	beq	r2,zero,bacc <altera_avalon_jtag_uart_read+0xd8>
    return -EWOULDBLOCK;
    bac4:	00bffd44 	movi	r2,-11
    bac8:	00000106 	br	bad0 <altera_avalon_jtag_uart_read+0xdc>
  else
    return -EIO;
    bacc:	00bffec4 	movi	r2,-5
}
    bad0:	e037883a 	mov	sp,fp
    bad4:	df000017 	ldw	fp,0(sp)
    bad8:	dec00104 	addi	sp,sp,4
    badc:	f800283a 	ret

0000bae0 <altera_avalon_jtag_uart_write>:
 * one FIFOs worth of data.  But you said you didn't want to use interrupts :-)
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
    bae0:	defff904 	addi	sp,sp,-28
    bae4:	df000615 	stw	fp,24(sp)
    bae8:	df000604 	addi	fp,sp,24
    baec:	e13ffd15 	stw	r4,-12(fp)
    baf0:	e17ffc15 	stw	r5,-16(fp)
    baf4:	e1bffb15 	stw	r6,-20(fp)
    baf8:	e1fffa15 	stw	r7,-24(fp)
  unsigned int base = sp->base;
    bafc:	e0bffd17 	ldw	r2,-12(fp)
    bb00:	10800017 	ldw	r2,0(r2)
    bb04:	e0bfff15 	stw	r2,-4(fp)

  const char * end = ptr + count;
    bb08:	e0bffb17 	ldw	r2,-20(fp)
    bb0c:	e0fffc17 	ldw	r3,-16(fp)
    bb10:	1885883a 	add	r2,r3,r2
    bb14:	e0bffe15 	stw	r2,-8(fp)

  while (ptr < end)
    bb18:	00000e06 	br	bb54 <altera_avalon_jtag_uart_write+0x74>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
    bb1c:	e0bfff17 	ldw	r2,-4(fp)
    bb20:	10800104 	addi	r2,r2,4
    bb24:	10800037 	ldwio	r2,0(r2)
    bb28:	10bfffec 	andhi	r2,r2,65535
    bb2c:	10000926 	beq	r2,zero,bb54 <altera_avalon_jtag_uart_write+0x74>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
    bb30:	e0ffff17 	ldw	r3,-4(fp)
    bb34:	e0bffc17 	ldw	r2,-16(fp)
    bb38:	11000044 	addi	r4,r2,1
    bb3c:	e13ffc15 	stw	r4,-16(fp)
    bb40:	10800003 	ldbu	r2,0(r2)
    bb44:	10803fcc 	andi	r2,r2,255
    bb48:	1080201c 	xori	r2,r2,128
    bb4c:	10bfe004 	addi	r2,r2,-128
    bb50:	18800035 	stwio	r2,0(r3)
  while (ptr < end)
    bb54:	e0fffc17 	ldw	r3,-16(fp)
    bb58:	e0bffe17 	ldw	r2,-8(fp)
    bb5c:	18bfef36 	bltu	r3,r2,bb1c <altera_avalon_jtag_uart_write+0x3c>

  return count;
    bb60:	e0bffb17 	ldw	r2,-20(fp)
}
    bb64:	e037883a 	mov	sp,fp
    bb68:	df000017 	ldw	fp,0(sp)
    bb6c:	dec00104 	addi	sp,sp,4
    bb70:	f800283a 	ret

0000bb74 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
    bb74:	defffa04 	addi	sp,sp,-24
    bb78:	dfc00515 	stw	ra,20(sp)
    bb7c:	df000415 	stw	fp,16(sp)
    bb80:	df000404 	addi	fp,sp,16
    bb84:	e13ffc15 	stw	r4,-16(fp)
  int big_loops;
  alt_u32 cycles_per_loop;
  
  if (!strcmp(NIOS2_CPU_IMPLEMENTATION,"tiny"))
  {
    cycles_per_loop = 9;
    bb88:	00800244 	movi	r2,9
    bb8c:	e0bffe15 	stw	r2,-8(fp)
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
    bb90:	014003f4 	movhi	r5,15
    bb94:	29509004 	addi	r5,r5,16960
    bb98:	e13ffe17 	ldw	r4,-8(fp)
    bb9c:	000aea40 	call	aea4 <__mulsi3>
    bba0:	100b883a 	mov	r5,r2
    bba4:	0100bef4 	movhi	r4,763
    bba8:	213c2004 	addi	r4,r4,-3968
    bbac:	000ade40 	call	ade4 <__udivsi3>
  big_loops = us / (INT_MAX/
    bbb0:	100b883a 	mov	r5,r2
    bbb4:	01200034 	movhi	r4,32768
    bbb8:	213fffc4 	addi	r4,r4,-1
    bbbc:	000ade40 	call	ade4 <__udivsi3>
    bbc0:	100b883a 	mov	r5,r2
    bbc4:	e13ffc17 	ldw	r4,-16(fp)
    bbc8:	000ade40 	call	ade4 <__udivsi3>
    bbcc:	e0bffd15 	stw	r2,-12(fp)

  if (big_loops)
    bbd0:	e0bffd17 	ldw	r2,-12(fp)
    bbd4:	10002a26 	beq	r2,zero,bc80 <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
    bbd8:	e03fff15 	stw	zero,-4(fp)
    bbdc:	00001706 	br	bc3c <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
    bbe0:	00a00034 	movhi	r2,32768
    bbe4:	10bfffc4 	addi	r2,r2,-1
    bbe8:	10bfffc4 	addi	r2,r2,-1
    bbec:	103ffe1e 	bne	r2,zero,bbe8 <alt_busy_sleep+0x74>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
    bbf0:	014003f4 	movhi	r5,15
    bbf4:	29509004 	addi	r5,r5,16960
    bbf8:	e13ffe17 	ldw	r4,-8(fp)
    bbfc:	000aea40 	call	aea4 <__mulsi3>
      us -= (INT_MAX/(ALT_CPU_FREQ/
    bc00:	100b883a 	mov	r5,r2
    bc04:	0100bef4 	movhi	r4,763
    bc08:	213c2004 	addi	r4,r4,-3968
    bc0c:	000ade40 	call	ade4 <__udivsi3>
    bc10:	100b883a 	mov	r5,r2
    bc14:	01200034 	movhi	r4,32768
    bc18:	213fffc4 	addi	r4,r4,-1
    bc1c:	000ade40 	call	ade4 <__udivsi3>
    bc20:	1007883a 	mov	r3,r2
    bc24:	e0bffc17 	ldw	r2,-16(fp)
    bc28:	10c5c83a 	sub	r2,r2,r3
    bc2c:	e0bffc15 	stw	r2,-16(fp)
    for(i=0;i<big_loops;i++)
    bc30:	e0bfff17 	ldw	r2,-4(fp)
    bc34:	10800044 	addi	r2,r2,1
    bc38:	e0bfff15 	stw	r2,-4(fp)
    bc3c:	e0ffff17 	ldw	r3,-4(fp)
    bc40:	e0bffd17 	ldw	r2,-12(fp)
    bc44:	18bfe616 	blt	r3,r2,bbe0 <alt_busy_sleep+0x6c>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
    bc48:	014003f4 	movhi	r5,15
    bc4c:	29509004 	addi	r5,r5,16960
    bc50:	e13ffe17 	ldw	r4,-8(fp)
    bc54:	000aea40 	call	aea4 <__mulsi3>
    bc58:	100b883a 	mov	r5,r2
    bc5c:	0100bef4 	movhi	r4,763
    bc60:	213c2004 	addi	r4,r4,-3968
    bc64:	000ade40 	call	ade4 <__udivsi3>
    bc68:	e17ffc17 	ldw	r5,-16(fp)
    bc6c:	1009883a 	mov	r4,r2
    bc70:	000aea40 	call	aea4 <__mulsi3>
    __asm__ volatile (
    bc74:	10bfffc4 	addi	r2,r2,-1
    bc78:	103ffe1e 	bne	r2,zero,bc74 <alt_busy_sleep+0x100>
    bc7c:	00000d06 	br	bcb4 <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
    bc80:	014003f4 	movhi	r5,15
    bc84:	29509004 	addi	r5,r5,16960
    bc88:	e13ffe17 	ldw	r4,-8(fp)
    bc8c:	000aea40 	call	aea4 <__mulsi3>
    bc90:	100b883a 	mov	r5,r2
    bc94:	0100bef4 	movhi	r4,763
    bc98:	213c2004 	addi	r4,r4,-3968
    bc9c:	000ade40 	call	ade4 <__udivsi3>
    bca0:	e17ffc17 	ldw	r5,-16(fp)
    bca4:	1009883a 	mov	r4,r2
    bca8:	000aea40 	call	aea4 <__mulsi3>
    __asm__ volatile (
    bcac:	10bfffc4 	addi	r2,r2,-1
    bcb0:	00bffe16 	blt	zero,r2,bcac <alt_busy_sleep+0x138>
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
    bcb4:	0005883a 	mov	r2,zero
}
    bcb8:	e037883a 	mov	sp,fp
    bcbc:	dfc00117 	ldw	ra,4(sp)
    bcc0:	df000017 	ldw	fp,0(sp)
    bcc4:	dec00204 	addi	sp,sp,8
    bcc8:	f800283a 	ret

0000bccc <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
    bccc:	deffff04 	addi	sp,sp,-4
    bcd0:	df000015 	stw	fp,0(sp)
    bcd4:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
    bcd8:	0001883a 	nop
    bcdc:	e037883a 	mov	sp,fp
    bce0:	df000017 	ldw	fp,0(sp)
    bce4:	dec00104 	addi	sp,sp,4
    bce8:	f800283a 	ret

0000bcec <alt_get_errno>:
{
    bcec:	defffe04 	addi	sp,sp,-8
    bcf0:	dfc00115 	stw	ra,4(sp)
    bcf4:	df000015 	stw	fp,0(sp)
    bcf8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    bcfc:	d0a00917 	ldw	r2,-32732(gp)
    bd00:	10000326 	beq	r2,zero,bd10 <alt_get_errno+0x24>
    bd04:	d0a00917 	ldw	r2,-32732(gp)
    bd08:	103ee83a 	callr	r2
    bd0c:	00000106 	br	bd14 <alt_get_errno+0x28>
    bd10:	d0a29904 	addi	r2,gp,-30108
}
    bd14:	e037883a 	mov	sp,fp
    bd18:	dfc00117 	ldw	ra,4(sp)
    bd1c:	df000017 	ldw	fp,0(sp)
    bd20:	dec00204 	addi	sp,sp,8
    bd24:	f800283a 	ret

0000bd28 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
    bd28:	defffa04 	addi	sp,sp,-24
    bd2c:	dfc00515 	stw	ra,20(sp)
    bd30:	df000415 	stw	fp,16(sp)
    bd34:	df000404 	addi	fp,sp,16
    bd38:	e13ffd15 	stw	r4,-12(fp)
    bd3c:	e17ffc15 	stw	r5,-16(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
    bd40:	e0bffd17 	ldw	r2,-12(fp)
    bd44:	10000326 	beq	r2,zero,bd54 <alt_dev_llist_insert+0x2c>
    bd48:	e0bffd17 	ldw	r2,-12(fp)
    bd4c:	10800217 	ldw	r2,8(r2)
    bd50:	1000061e 	bne	r2,zero,bd6c <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
    bd54:	000bcec0 	call	bcec <alt_get_errno>
    bd58:	1007883a 	mov	r3,r2
    bd5c:	00800584 	movi	r2,22
    bd60:	18800015 	stw	r2,0(r3)
    return -EINVAL;
    bd64:	00bffa84 	movi	r2,-22
    bd68:	00001306 	br	bdb8 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
    bd6c:	e0bffd17 	ldw	r2,-12(fp)
    bd70:	e0fffc17 	ldw	r3,-16(fp)
    bd74:	e0ffff15 	stw	r3,-4(fp)
    bd78:	e0bffe15 	stw	r2,-8(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    bd7c:	e0bffe17 	ldw	r2,-8(fp)
    bd80:	e0ffff17 	ldw	r3,-4(fp)
    bd84:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
    bd88:	e0bfff17 	ldw	r2,-4(fp)
    bd8c:	10c00017 	ldw	r3,0(r2)
    bd90:	e0bffe17 	ldw	r2,-8(fp)
    bd94:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
    bd98:	e0bfff17 	ldw	r2,-4(fp)
    bd9c:	10800017 	ldw	r2,0(r2)
    bda0:	e0fffe17 	ldw	r3,-8(fp)
    bda4:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
    bda8:	e0bfff17 	ldw	r2,-4(fp)
    bdac:	e0fffe17 	ldw	r3,-8(fp)
    bdb0:	10c00015 	stw	r3,0(r2)

  return 0;  
    bdb4:	0005883a 	mov	r2,zero
}
    bdb8:	e037883a 	mov	sp,fp
    bdbc:	dfc00117 	ldw	ra,4(sp)
    bdc0:	df000017 	ldw	fp,0(sp)
    bdc4:	dec00204 	addi	sp,sp,8
    bdc8:	f800283a 	ret

0000bdcc <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
    bdcc:	defffd04 	addi	sp,sp,-12
    bdd0:	dfc00215 	stw	ra,8(sp)
    bdd4:	df000115 	stw	fp,4(sp)
    bdd8:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
    bddc:	00800074 	movhi	r2,1
    bde0:	10b1e504 	addi	r2,r2,-14444
    bde4:	e0bfff15 	stw	r2,-4(fp)
    bde8:	00000606 	br	be04 <_do_ctors+0x38>
        (*ctor) (); 
    bdec:	e0bfff17 	ldw	r2,-4(fp)
    bdf0:	10800017 	ldw	r2,0(r2)
    bdf4:	103ee83a 	callr	r2
  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
    bdf8:	e0bfff17 	ldw	r2,-4(fp)
    bdfc:	10bfff04 	addi	r2,r2,-4
    be00:	e0bfff15 	stw	r2,-4(fp)
    be04:	e0ffff17 	ldw	r3,-4(fp)
    be08:	00800074 	movhi	r2,1
    be0c:	10b1e604 	addi	r2,r2,-14440
    be10:	18bff62e 	bgeu	r3,r2,bdec <_do_ctors+0x20>
}
    be14:	0001883a 	nop
    be18:	e037883a 	mov	sp,fp
    be1c:	dfc00117 	ldw	ra,4(sp)
    be20:	df000017 	ldw	fp,0(sp)
    be24:	dec00204 	addi	sp,sp,8
    be28:	f800283a 	ret

0000be2c <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
    be2c:	defffd04 	addi	sp,sp,-12
    be30:	dfc00215 	stw	ra,8(sp)
    be34:	df000115 	stw	fp,4(sp)
    be38:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
    be3c:	00800074 	movhi	r2,1
    be40:	10b1e504 	addi	r2,r2,-14444
    be44:	e0bfff15 	stw	r2,-4(fp)
    be48:	00000606 	br	be64 <_do_dtors+0x38>
        (*dtor) (); 
    be4c:	e0bfff17 	ldw	r2,-4(fp)
    be50:	10800017 	ldw	r2,0(r2)
    be54:	103ee83a 	callr	r2
  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
    be58:	e0bfff17 	ldw	r2,-4(fp)
    be5c:	10bfff04 	addi	r2,r2,-4
    be60:	e0bfff15 	stw	r2,-4(fp)
    be64:	e0ffff17 	ldw	r3,-4(fp)
    be68:	00800074 	movhi	r2,1
    be6c:	10b1e604 	addi	r2,r2,-14440
    be70:	18bff62e 	bgeu	r3,r2,be4c <_do_dtors+0x20>
}
    be74:	0001883a 	nop
    be78:	e037883a 	mov	sp,fp
    be7c:	dfc00117 	ldw	ra,4(sp)
    be80:	df000017 	ldw	fp,0(sp)
    be84:	dec00204 	addi	sp,sp,8
    be88:	f800283a 	ret

0000be8c <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
    be8c:	deffff04 	addi	sp,sp,-4
    be90:	df000015 	stw	fp,0(sp)
    be94:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
    be98:	0001883a 	nop
    be9c:	e037883a 	mov	sp,fp
    bea0:	df000017 	ldw	fp,0(sp)
    bea4:	dec00104 	addi	sp,sp,4
    bea8:	f800283a 	ret

0000beac <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
    beac:	defff904 	addi	sp,sp,-28
    beb0:	dfc00615 	stw	ra,24(sp)
    beb4:	df000515 	stw	fp,20(sp)
    beb8:	df000504 	addi	fp,sp,20
    bebc:	e13ffe15 	stw	r4,-8(fp)
    bec0:	e17ffd15 	stw	r5,-12(fp)
    bec4:	e1bffc15 	stw	r6,-16(fp)
    bec8:	e1fffb15 	stw	r7,-20(fp)
  int old;

  old = open (name, flags, mode);
    becc:	e1bffb17 	ldw	r6,-20(fp)
    bed0:	e17ffc17 	ldw	r5,-16(fp)
    bed4:	e13ffd17 	ldw	r4,-12(fp)
    bed8:	000c1140 	call	c114 <open>
    bedc:	e0bfff15 	stw	r2,-4(fp)

  if (old >= 0)
    bee0:	e0bfff17 	ldw	r2,-4(fp)
    bee4:	10002016 	blt	r2,zero,bf68 <alt_open_fd+0xbc>
  {
    fd->dev      = alt_fd_list[old].dev;
    bee8:	e0ffff17 	ldw	r3,-4(fp)
    beec:	1805883a 	mov	r2,r3
    bef0:	1085883a 	add	r2,r2,r2
    bef4:	10c5883a 	add	r2,r2,r3
    bef8:	100490ba 	slli	r2,r2,2
    befc:	00c00074 	movhi	r3,1
    bf00:	10c7883a 	add	r3,r2,r3
    bf04:	18f40d17 	ldw	r3,-12236(r3)
    bf08:	e0bffe17 	ldw	r2,-8(fp)
    bf0c:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
    bf10:	e0ffff17 	ldw	r3,-4(fp)
    bf14:	1805883a 	mov	r2,r3
    bf18:	1085883a 	add	r2,r2,r2
    bf1c:	10c5883a 	add	r2,r2,r3
    bf20:	100490ba 	slli	r2,r2,2
    bf24:	00c00074 	movhi	r3,1
    bf28:	10c7883a 	add	r3,r2,r3
    bf2c:	18f40e17 	ldw	r3,-12232(r3)
    bf30:	e0bffe17 	ldw	r2,-8(fp)
    bf34:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
    bf38:	e0ffff17 	ldw	r3,-4(fp)
    bf3c:	1805883a 	mov	r2,r3
    bf40:	1085883a 	add	r2,r2,r2
    bf44:	10c5883a 	add	r2,r2,r3
    bf48:	100490ba 	slli	r2,r2,2
    bf4c:	00c00074 	movhi	r3,1
    bf50:	10c7883a 	add	r3,r2,r3
    bf54:	18f40f17 	ldw	r3,-12228(r3)
    bf58:	e0bffe17 	ldw	r2,-8(fp)
    bf5c:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
    bf60:	e13fff17 	ldw	r4,-4(fp)
    bf64:	000b6040 	call	b604 <alt_release_fd>
  }
} 
    bf68:	0001883a 	nop
    bf6c:	e037883a 	mov	sp,fp
    bf70:	dfc00117 	ldw	ra,4(sp)
    bf74:	df000017 	ldw	fp,0(sp)
    bf78:	dec00204 	addi	sp,sp,8
    bf7c:	f800283a 	ret

0000bf80 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
    bf80:	defffb04 	addi	sp,sp,-20
    bf84:	dfc00415 	stw	ra,16(sp)
    bf88:	df000315 	stw	fp,12(sp)
    bf8c:	df000304 	addi	fp,sp,12
    bf90:	e13fff15 	stw	r4,-4(fp)
    bf94:	e17ffe15 	stw	r5,-8(fp)
    bf98:	e1bffd15 	stw	r6,-12(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
    bf9c:	01c07fc4 	movi	r7,511
    bfa0:	01800044 	movi	r6,1
    bfa4:	e17fff17 	ldw	r5,-4(fp)
    bfa8:	01000074 	movhi	r4,1
    bfac:	21341004 	addi	r4,r4,-12224
    bfb0:	000beac0 	call	beac <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
    bfb4:	01c07fc4 	movi	r7,511
    bfb8:	000d883a 	mov	r6,zero
    bfbc:	e17ffe17 	ldw	r5,-8(fp)
    bfc0:	01000074 	movhi	r4,1
    bfc4:	21340d04 	addi	r4,r4,-12236
    bfc8:	000beac0 	call	beac <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
    bfcc:	01c07fc4 	movi	r7,511
    bfd0:	01800044 	movi	r6,1
    bfd4:	e17ffd17 	ldw	r5,-12(fp)
    bfd8:	01000074 	movhi	r4,1
    bfdc:	21341304 	addi	r4,r4,-12212
    bfe0:	000beac0 	call	beac <alt_open_fd>
}  
    bfe4:	0001883a 	nop
    bfe8:	e037883a 	mov	sp,fp
    bfec:	dfc00117 	ldw	ra,4(sp)
    bff0:	df000017 	ldw	fp,0(sp)
    bff4:	dec00204 	addi	sp,sp,8
    bff8:	f800283a 	ret

0000bffc <alt_get_errno>:
{
    bffc:	defffe04 	addi	sp,sp,-8
    c000:	dfc00115 	stw	ra,4(sp)
    c004:	df000015 	stw	fp,0(sp)
    c008:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    c00c:	d0a00917 	ldw	r2,-32732(gp)
    c010:	10000326 	beq	r2,zero,c020 <alt_get_errno+0x24>
    c014:	d0a00917 	ldw	r2,-32732(gp)
    c018:	103ee83a 	callr	r2
    c01c:	00000106 	br	c024 <alt_get_errno+0x28>
    c020:	d0a29904 	addi	r2,gp,-30108
}
    c024:	e037883a 	mov	sp,fp
    c028:	dfc00117 	ldw	ra,4(sp)
    c02c:	df000017 	ldw	fp,0(sp)
    c030:	dec00204 	addi	sp,sp,8
    c034:	f800283a 	ret

0000c038 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
    c038:	defffd04 	addi	sp,sp,-12
    c03c:	df000215 	stw	fp,8(sp)
    c040:	df000204 	addi	fp,sp,8
    c044:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
    c048:	e0bffe17 	ldw	r2,-8(fp)
    c04c:	10800217 	ldw	r2,8(r2)
    c050:	10d00034 	orhi	r3,r2,16384
    c054:	e0bffe17 	ldw	r2,-8(fp)
    c058:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    c05c:	e03fff15 	stw	zero,-4(fp)
    c060:	00002306 	br	c0f0 <alt_file_locked+0xb8>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    c064:	e0ffff17 	ldw	r3,-4(fp)
    c068:	1805883a 	mov	r2,r3
    c06c:	1085883a 	add	r2,r2,r2
    c070:	10c5883a 	add	r2,r2,r3
    c074:	100490ba 	slli	r2,r2,2
    c078:	00c00074 	movhi	r3,1
    c07c:	10c7883a 	add	r3,r2,r3
    c080:	18f40d17 	ldw	r3,-12236(r3)
    c084:	e0bffe17 	ldw	r2,-8(fp)
    c088:	10800017 	ldw	r2,0(r2)
    c08c:	1880151e 	bne	r3,r2,c0e4 <alt_file_locked+0xac>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
    c090:	e0ffff17 	ldw	r3,-4(fp)
    c094:	1805883a 	mov	r2,r3
    c098:	1085883a 	add	r2,r2,r2
    c09c:	10c5883a 	add	r2,r2,r3
    c0a0:	100490ba 	slli	r2,r2,2
    c0a4:	00c00074 	movhi	r3,1
    c0a8:	10c7883a 	add	r3,r2,r3
    c0ac:	18b40f17 	ldw	r2,-12228(r3)
    if ((alt_fd_list[i].dev == fd->dev) &&
    c0b0:	10000c0e 	bge	r2,zero,c0e4 <alt_file_locked+0xac>
        (&alt_fd_list[i] != fd))
    c0b4:	e0ffff17 	ldw	r3,-4(fp)
    c0b8:	1805883a 	mov	r2,r3
    c0bc:	1085883a 	add	r2,r2,r2
    c0c0:	10c5883a 	add	r2,r2,r3
    c0c4:	100490ba 	slli	r2,r2,2
    c0c8:	00c00074 	movhi	r3,1
    c0cc:	18f40d04 	addi	r3,r3,-12236
    c0d0:	10c5883a 	add	r2,r2,r3
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
    c0d4:	e0fffe17 	ldw	r3,-8(fp)
    c0d8:	18800226 	beq	r3,r2,c0e4 <alt_file_locked+0xac>
    {
      return -EACCES;
    c0dc:	00bffcc4 	movi	r2,-13
    c0e0:	00000806 	br	c104 <alt_file_locked+0xcc>
  for (i = 0; i <= alt_max_fd; i++)
    c0e4:	e0bfff17 	ldw	r2,-4(fp)
    c0e8:	10800044 	addi	r2,r2,1
    c0ec:	e0bfff15 	stw	r2,-4(fp)
    c0f0:	d0a00817 	ldw	r2,-32736(gp)
    c0f4:	1007883a 	mov	r3,r2
    c0f8:	e0bfff17 	ldw	r2,-4(fp)
    c0fc:	18bfd92e 	bgeu	r3,r2,c064 <alt_file_locked+0x2c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
    c100:	0005883a 	mov	r2,zero
}
    c104:	e037883a 	mov	sp,fp
    c108:	df000017 	ldw	fp,0(sp)
    c10c:	dec00104 	addi	sp,sp,4
    c110:	f800283a 	ret

0000c114 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
    c114:	defff604 	addi	sp,sp,-40
    c118:	dfc00915 	stw	ra,36(sp)
    c11c:	df000815 	stw	fp,32(sp)
    c120:	df000804 	addi	fp,sp,32
    c124:	e13ffa15 	stw	r4,-24(fp)
    c128:	e17ff915 	stw	r5,-28(fp)
    c12c:	e1bff815 	stw	r6,-32(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
    c130:	00bfffc4 	movi	r2,-1
    c134:	e0bffe15 	stw	r2,-8(fp)
  int status = -ENODEV;
    c138:	00bffb44 	movi	r2,-19
    c13c:	e0bffd15 	stw	r2,-12(fp)
  int isafs = 0;
    c140:	e03ffc15 	stw	zero,-16(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
    c144:	d1600604 	addi	r5,gp,-32744
    c148:	e13ffa17 	ldw	r4,-24(fp)
    c14c:	000c2980 	call	c298 <alt_find_dev>
    c150:	e0bfff15 	stw	r2,-4(fp)
    c154:	e0bfff17 	ldw	r2,-4(fp)
    c158:	1000051e 	bne	r2,zero,c170 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
    c15c:	e13ffa17 	ldw	r4,-24(fp)
    c160:	000c3280 	call	c328 <alt_find_file>
    c164:	e0bfff15 	stw	r2,-4(fp)
    isafs = 1;
    c168:	00800044 	movi	r2,1
    c16c:	e0bffc15 	stw	r2,-16(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
    c170:	e0bfff17 	ldw	r2,-4(fp)
    c174:	10002c26 	beq	r2,zero,c228 <open+0x114>
  {
    if ((index = alt_get_fd (dev)) < 0)
    c178:	e13fff17 	ldw	r4,-4(fp)
    c17c:	000c4300 	call	c430 <alt_get_fd>
    c180:	e0bffe15 	stw	r2,-8(fp)
    c184:	e0bffe17 	ldw	r2,-8(fp)
    c188:	1000030e 	bge	r2,zero,c198 <open+0x84>
    {
      status = index;
    c18c:	e0bffe17 	ldw	r2,-8(fp)
    c190:	e0bffd15 	stw	r2,-12(fp)
    c194:	00002606 	br	c230 <open+0x11c>
    }
    else
    {
      fd = &alt_fd_list[index];
    c198:	e0fffe17 	ldw	r3,-8(fp)
    c19c:	1805883a 	mov	r2,r3
    c1a0:	1085883a 	add	r2,r2,r2
    c1a4:	10c5883a 	add	r2,r2,r3
    c1a8:	100490ba 	slli	r2,r2,2
    c1ac:	00c00074 	movhi	r3,1
    c1b0:	18f40d04 	addi	r3,r3,-12236
    c1b4:	10c5883a 	add	r2,r2,r3
    c1b8:	e0bffb15 	stw	r2,-20(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
    c1bc:	e0fff917 	ldw	r3,-28(fp)
    c1c0:	00900034 	movhi	r2,16384
    c1c4:	10bfffc4 	addi	r2,r2,-1
    c1c8:	1886703a 	and	r3,r3,r2
    c1cc:	e0bffb17 	ldw	r2,-20(fp)
    c1d0:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
    c1d4:	e0bffc17 	ldw	r2,-16(fp)
    c1d8:	1000051e 	bne	r2,zero,c1f0 <open+0xdc>
    c1dc:	e13ffb17 	ldw	r4,-20(fp)
    c1e0:	000c0380 	call	c038 <alt_file_locked>
    c1e4:	e0bffd15 	stw	r2,-12(fp)
    c1e8:	e0bffd17 	ldw	r2,-12(fp)
    c1ec:	10001016 	blt	r2,zero,c230 <open+0x11c>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
    c1f0:	e0bfff17 	ldw	r2,-4(fp)
    c1f4:	10800317 	ldw	r2,12(r2)
    c1f8:	10000826 	beq	r2,zero,c21c <open+0x108>
    c1fc:	e0bfff17 	ldw	r2,-4(fp)
    c200:	10800317 	ldw	r2,12(r2)
    c204:	e1fff817 	ldw	r7,-32(fp)
    c208:	e1bff917 	ldw	r6,-28(fp)
    c20c:	e17ffa17 	ldw	r5,-24(fp)
    c210:	e13ffb17 	ldw	r4,-20(fp)
    c214:	103ee83a 	callr	r2
    c218:	00000106 	br	c220 <open+0x10c>
    c21c:	0005883a 	mov	r2,zero
    c220:	e0bffd15 	stw	r2,-12(fp)
    c224:	00000206 	br	c230 <open+0x11c>
      }
    }
  }
  else
  {
    status = -ENODEV;
    c228:	00bffb44 	movi	r2,-19
    c22c:	e0bffd15 	stw	r2,-12(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
    c230:	e0bffd17 	ldw	r2,-12(fp)
    c234:	1000090e 	bge	r2,zero,c25c <open+0x148>
  {
    alt_release_fd (index);  
    c238:	e13ffe17 	ldw	r4,-8(fp)
    c23c:	000b6040 	call	b604 <alt_release_fd>
    ALT_ERRNO = -status;
    c240:	000bffc0 	call	bffc <alt_get_errno>
    c244:	1007883a 	mov	r3,r2
    c248:	e0bffd17 	ldw	r2,-12(fp)
    c24c:	0085c83a 	sub	r2,zero,r2
    c250:	18800015 	stw	r2,0(r3)
    return -1;
    c254:	00bfffc4 	movi	r2,-1
    c258:	00000106 	br	c260 <open+0x14c>
  }
  
  /* return the reference upon success */

  return index;
    c25c:	e0bffe17 	ldw	r2,-8(fp)
}
    c260:	e037883a 	mov	sp,fp
    c264:	dfc00117 	ldw	ra,4(sp)
    c268:	df000017 	ldw	fp,0(sp)
    c26c:	dec00204 	addi	sp,sp,8
    c270:	f800283a 	ret

0000c274 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
    c274:	deffff04 	addi	sp,sp,-4
    c278:	df000015 	stw	fp,0(sp)
    c27c:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
    c280:	000170fa 	wrctl	ienable,zero
}
    c284:	0001883a 	nop
    c288:	e037883a 	mov	sp,fp
    c28c:	df000017 	ldw	fp,0(sp)
    c290:	dec00104 	addi	sp,sp,4
    c294:	f800283a 	ret

0000c298 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
    c298:	defffa04 	addi	sp,sp,-24
    c29c:	dfc00515 	stw	ra,20(sp)
    c2a0:	df000415 	stw	fp,16(sp)
    c2a4:	df000404 	addi	fp,sp,16
    c2a8:	e13ffd15 	stw	r4,-12(fp)
    c2ac:	e17ffc15 	stw	r5,-16(fp)
  alt_dev* next = (alt_dev*) llist->next;
    c2b0:	e0bffc17 	ldw	r2,-16(fp)
    c2b4:	10800017 	ldw	r2,0(r2)
    c2b8:	e0bfff15 	stw	r2,-4(fp)
  alt_32 len;

  len  = strlen(name) + 1;
    c2bc:	e13ffd17 	ldw	r4,-12(fp)
    c2c0:	00081d80 	call	81d8 <strlen>
    c2c4:	10800044 	addi	r2,r2,1
    c2c8:	e0bffe15 	stw	r2,-8(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    c2cc:	00000d06 	br	c304 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
    c2d0:	e0bfff17 	ldw	r2,-4(fp)
    c2d4:	10800217 	ldw	r2,8(r2)
    c2d8:	e0fffe17 	ldw	r3,-8(fp)
    c2dc:	180d883a 	mov	r6,r3
    c2e0:	e17ffd17 	ldw	r5,-12(fp)
    c2e4:	1009883a 	mov	r4,r2
    c2e8:	000c5300 	call	c530 <memcmp>
    c2ec:	1000021e 	bne	r2,zero,c2f8 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
    c2f0:	e0bfff17 	ldw	r2,-4(fp)
    c2f4:	00000706 	br	c314 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
    c2f8:	e0bfff17 	ldw	r2,-4(fp)
    c2fc:	10800017 	ldw	r2,0(r2)
    c300:	e0bfff15 	stw	r2,-4(fp)
  while (next != (alt_dev*) llist)
    c304:	e0ffff17 	ldw	r3,-4(fp)
    c308:	e0bffc17 	ldw	r2,-16(fp)
    c30c:	18bff01e 	bne	r3,r2,c2d0 <alt_find_dev+0x38>
  }
  
  /* No match found */
  
  return NULL;
    c310:	0005883a 	mov	r2,zero
}
    c314:	e037883a 	mov	sp,fp
    c318:	dfc00117 	ldw	ra,4(sp)
    c31c:	df000017 	ldw	fp,0(sp)
    c320:	dec00204 	addi	sp,sp,8
    c324:	f800283a 	ret

0000c328 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
    c328:	defffb04 	addi	sp,sp,-20
    c32c:	dfc00415 	stw	ra,16(sp)
    c330:	df000315 	stw	fp,12(sp)
    c334:	df000304 	addi	fp,sp,12
    c338:	e13ffd15 	stw	r4,-12(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
    c33c:	d0a00417 	ldw	r2,-32752(gp)
    c340:	e0bfff15 	stw	r2,-4(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    c344:	00003106 	br	c40c <alt_find_file+0xe4>
  {
    len = strlen(next->name);
    c348:	e0bfff17 	ldw	r2,-4(fp)
    c34c:	10800217 	ldw	r2,8(r2)
    c350:	1009883a 	mov	r4,r2
    c354:	00081d80 	call	81d8 <strlen>
    c358:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
    c35c:	e0bfff17 	ldw	r2,-4(fp)
    c360:	10c00217 	ldw	r3,8(r2)
    c364:	e0bffe17 	ldw	r2,-8(fp)
    c368:	10bfffc4 	addi	r2,r2,-1
    c36c:	1885883a 	add	r2,r3,r2
    c370:	10800003 	ldbu	r2,0(r2)
    c374:	10803fcc 	andi	r2,r2,255
    c378:	1080201c 	xori	r2,r2,128
    c37c:	10bfe004 	addi	r2,r2,-128
    c380:	10800bd8 	cmpnei	r2,r2,47
    c384:	1000031e 	bne	r2,zero,c394 <alt_find_file+0x6c>
    {
      len -= 1;
    c388:	e0bffe17 	ldw	r2,-8(fp)
    c38c:	10bfffc4 	addi	r2,r2,-1
    c390:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
    c394:	e0bffe17 	ldw	r2,-8(fp)
    c398:	e0fffd17 	ldw	r3,-12(fp)
    c39c:	1885883a 	add	r2,r3,r2
    c3a0:	10800003 	ldbu	r2,0(r2)
    c3a4:	10803fcc 	andi	r2,r2,255
    c3a8:	1080201c 	xori	r2,r2,128
    c3ac:	10bfe004 	addi	r2,r2,-128
    c3b0:	10800be0 	cmpeqi	r2,r2,47
    c3b4:	1000081e 	bne	r2,zero,c3d8 <alt_find_file+0xb0>
    c3b8:	e0bffe17 	ldw	r2,-8(fp)
    c3bc:	e0fffd17 	ldw	r3,-12(fp)
    c3c0:	1885883a 	add	r2,r3,r2
    c3c4:	10800003 	ldbu	r2,0(r2)
    c3c8:	10803fcc 	andi	r2,r2,255
    c3cc:	1080201c 	xori	r2,r2,128
    c3d0:	10bfe004 	addi	r2,r2,-128
    c3d4:	10000a1e 	bne	r2,zero,c400 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    c3d8:	e0bfff17 	ldw	r2,-4(fp)
    c3dc:	10800217 	ldw	r2,8(r2)
    c3e0:	e0fffe17 	ldw	r3,-8(fp)
    c3e4:	180d883a 	mov	r6,r3
    c3e8:	e17ffd17 	ldw	r5,-12(fp)
    c3ec:	1009883a 	mov	r4,r2
    c3f0:	000c5300 	call	c530 <memcmp>
    if (((name[len] == '/') || (name[len] == '\0')) && 
    c3f4:	1000021e 	bne	r2,zero,c400 <alt_find_file+0xd8>
    {
      /* match found */

      return next;
    c3f8:	e0bfff17 	ldw	r2,-4(fp)
    c3fc:	00000706 	br	c41c <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
    c400:	e0bfff17 	ldw	r2,-4(fp)
    c404:	10800017 	ldw	r2,0(r2)
    c408:	e0bfff15 	stw	r2,-4(fp)
  while (next != (alt_dev*) &alt_fs_list)
    c40c:	e0ffff17 	ldw	r3,-4(fp)
    c410:	d0a00404 	addi	r2,gp,-32752
    c414:	18bfcc1e 	bne	r3,r2,c348 <alt_find_file+0x20>
  }
  
  /* No match found */
  
  return NULL;     
    c418:	0005883a 	mov	r2,zero
}
    c41c:	e037883a 	mov	sp,fp
    c420:	dfc00117 	ldw	ra,4(sp)
    c424:	df000017 	ldw	fp,0(sp)
    c428:	dec00204 	addi	sp,sp,8
    c42c:	f800283a 	ret

0000c430 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
    c430:	defffc04 	addi	sp,sp,-16
    c434:	df000315 	stw	fp,12(sp)
    c438:	df000304 	addi	fp,sp,12
    c43c:	e13ffd15 	stw	r4,-12(fp)
  alt_32 i;
  int rc = -EMFILE;
    c440:	00bffa04 	movi	r2,-24
    c444:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    c448:	e03fff15 	stw	zero,-4(fp)
    c44c:	00001d06 	br	c4c4 <alt_get_fd+0x94>
  {
    if (!alt_fd_list[i].dev)
    c450:	e0ffff17 	ldw	r3,-4(fp)
    c454:	1805883a 	mov	r2,r3
    c458:	1085883a 	add	r2,r2,r2
    c45c:	10c5883a 	add	r2,r2,r3
    c460:	100490ba 	slli	r2,r2,2
    c464:	00c00074 	movhi	r3,1
    c468:	10c7883a 	add	r3,r2,r3
    c46c:	18b40d17 	ldw	r2,-12236(r3)
    c470:	1000111e 	bne	r2,zero,c4b8 <alt_get_fd+0x88>
    {
      alt_fd_list[i].dev = dev;
    c474:	e0ffff17 	ldw	r3,-4(fp)
    c478:	1805883a 	mov	r2,r3
    c47c:	1085883a 	add	r2,r2,r2
    c480:	10c5883a 	add	r2,r2,r3
    c484:	100490ba 	slli	r2,r2,2
    c488:	e13ffd17 	ldw	r4,-12(fp)
    c48c:	00c00074 	movhi	r3,1
    c490:	10c7883a 	add	r3,r2,r3
    c494:	19340d15 	stw	r4,-12236(r3)
      if (i > alt_max_fd)
    c498:	d0e00817 	ldw	r3,-32736(gp)
    c49c:	e0bfff17 	ldw	r2,-4(fp)
    c4a0:	1880020e 	bge	r3,r2,c4ac <alt_get_fd+0x7c>
      {
        alt_max_fd = i;
    c4a4:	e0bfff17 	ldw	r2,-4(fp)
    c4a8:	d0a00815 	stw	r2,-32736(gp)
      }
      rc = i;
    c4ac:	e0bfff17 	ldw	r2,-4(fp)
    c4b0:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
    c4b4:	00000706 	br	c4d4 <alt_get_fd+0xa4>
  for (i = 0; i < ALT_MAX_FD; i++)
    c4b8:	e0bfff17 	ldw	r2,-4(fp)
    c4bc:	10800044 	addi	r2,r2,1
    c4c0:	e0bfff15 	stw	r2,-4(fp)
    c4c4:	e0bfff17 	ldw	r2,-4(fp)
    c4c8:	10800810 	cmplti	r2,r2,32
    c4cc:	103fe01e 	bne	r2,zero,c450 <alt_get_fd+0x20>
    }
  }

 alt_get_fd_exit:
    c4d0:	0001883a 	nop
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
    c4d4:	e0bffe17 	ldw	r2,-8(fp)
}
    c4d8:	e037883a 	mov	sp,fp
    c4dc:	df000017 	ldw	fp,0(sp)
    c4e0:	dec00104 	addi	sp,sp,4
    c4e4:	f800283a 	ret

0000c4e8 <atexit>:
    c4e8:	200b883a 	mov	r5,r4
    c4ec:	000f883a 	mov	r7,zero
    c4f0:	000d883a 	mov	r6,zero
    c4f4:	0009883a 	mov	r4,zero
    c4f8:	000c5bc1 	jmpi	c5bc <__register_exitproc>

0000c4fc <exit>:
    c4fc:	defffe04 	addi	sp,sp,-8
    c500:	000b883a 	mov	r5,zero
    c504:	dc000015 	stw	r16,0(sp)
    c508:	dfc00115 	stw	ra,4(sp)
    c50c:	2021883a 	mov	r16,r4
    c510:	000c64c0 	call	c64c <__call_exitprocs>
    c514:	00800074 	movhi	r2,1
    c518:	11347817 	ldw	r4,-11808(r2)
    c51c:	20800f17 	ldw	r2,60(r4)
    c520:	10000126 	beq	r2,zero,c528 <exit+0x2c>
    c524:	103ee83a 	callr	r2
    c528:	8009883a 	mov	r4,r16
    c52c:	000c7640 	call	c764 <_exit>

0000c530 <memcmp>:
    c530:	30800130 	cmpltui	r2,r6,4
    c534:	10000b1e 	bne	r2,zero,c564 <memcmp+0x34>
    c538:	2144b03a 	or	r2,r4,r5
    c53c:	108000cc 	andi	r2,r2,3
    c540:	10001a1e 	bne	r2,zero,c5ac <memcmp+0x7c>
    c544:	20c00017 	ldw	r3,0(r4)
    c548:	28800017 	ldw	r2,0(r5)
    c54c:	1880171e 	bne	r3,r2,c5ac <memcmp+0x7c>
    c550:	31bfff04 	addi	r6,r6,-4
    c554:	30800128 	cmpgeui	r2,r6,4
    c558:	21000104 	addi	r4,r4,4
    c55c:	29400104 	addi	r5,r5,4
    c560:	103ff81e 	bne	r2,zero,c544 <memcmp+0x14>
    c564:	30ffffc4 	addi	r3,r6,-1
    c568:	30000e26 	beq	r6,zero,c5a4 <memcmp+0x74>
    c56c:	29800003 	ldbu	r6,0(r5)
    c570:	20800003 	ldbu	r2,0(r4)
    c574:	30800f1e 	bne	r6,r2,c5b4 <memcmp+0x84>
    c578:	18800044 	addi	r2,r3,1
    c57c:	20c00044 	addi	r3,r4,1
    c580:	2089883a 	add	r4,r4,r2
    c584:	00000506 	br	c59c <memcmp+0x6c>
    c588:	18800003 	ldbu	r2,0(r3)
    c58c:	29800003 	ldbu	r6,0(r5)
    c590:	18c00044 	addi	r3,r3,1
    c594:	10803fcc 	andi	r2,r2,255
    c598:	1180061e 	bne	r2,r6,c5b4 <memcmp+0x84>
    c59c:	29400044 	addi	r5,r5,1
    c5a0:	193ff91e 	bne	r3,r4,c588 <memcmp+0x58>
    c5a4:	0005883a 	mov	r2,zero
    c5a8:	f800283a 	ret
    c5ac:	30ffffc4 	addi	r3,r6,-1
    c5b0:	003fee06 	br	c56c <memcmp+0x3c>
    c5b4:	1185c83a 	sub	r2,r2,r6
    c5b8:	f800283a 	ret

0000c5bc <__register_exitproc>:
    c5bc:	00800074 	movhi	r2,1
    c5c0:	10f47817 	ldw	r3,-11808(r2)
    c5c4:	18805217 	ldw	r2,328(r3)
    c5c8:	10001726 	beq	r2,zero,c628 <__register_exitproc+0x6c>
    c5cc:	10c00117 	ldw	r3,4(r2)
    c5d0:	1a000808 	cmpgei	r8,r3,32
    c5d4:	40001b1e 	bne	r8,zero,c644 <__register_exitproc+0x88>
    c5d8:	20000b26 	beq	r4,zero,c608 <__register_exitproc+0x4c>
    c5dc:	181090ba 	slli	r8,r3,2
    c5e0:	02400044 	movi	r9,1
    c5e4:	48d2983a 	sll	r9,r9,r3
    c5e8:	1211883a 	add	r8,r2,r8
    c5ec:	41802215 	stw	r6,136(r8)
    c5f0:	11806217 	ldw	r6,392(r2)
    c5f4:	21000098 	cmpnei	r4,r4,2
    c5f8:	324cb03a 	or	r6,r6,r9
    c5fc:	11806215 	stw	r6,392(r2)
    c600:	41c04215 	stw	r7,264(r8)
    c604:	20000b26 	beq	r4,zero,c634 <__register_exitproc+0x78>
    c608:	19000084 	addi	r4,r3,2
    c60c:	200890ba 	slli	r4,r4,2
    c610:	18c00044 	addi	r3,r3,1
    c614:	10c00115 	stw	r3,4(r2)
    c618:	1105883a 	add	r2,r2,r4
    c61c:	11400015 	stw	r5,0(r2)
    c620:	0005883a 	mov	r2,zero
    c624:	f800283a 	ret
    c628:	18805304 	addi	r2,r3,332
    c62c:	18805215 	stw	r2,328(r3)
    c630:	003fe606 	br	c5cc <__register_exitproc+0x10>
    c634:	11006317 	ldw	r4,396(r2)
    c638:	2252b03a 	or	r9,r4,r9
    c63c:	12406315 	stw	r9,396(r2)
    c640:	003ff106 	br	c608 <__register_exitproc+0x4c>
    c644:	00bfffc4 	movi	r2,-1
    c648:	f800283a 	ret

0000c64c <__call_exitprocs>:
    c64c:	defff704 	addi	sp,sp,-36
    c650:	00800074 	movhi	r2,1
    c654:	ddc00715 	stw	r23,28(sp)
    c658:	15f47817 	ldw	r23,-11808(r2)
    c65c:	dd400515 	stw	r21,20(sp)
    c660:	dd000415 	stw	r20,16(sp)
    c664:	dcc00315 	stw	r19,12(sp)
    c668:	dfc00815 	stw	ra,32(sp)
    c66c:	dd800615 	stw	r22,24(sp)
    c670:	dc800215 	stw	r18,8(sp)
    c674:	dc400115 	stw	r17,4(sp)
    c678:	dc000015 	stw	r16,0(sp)
    c67c:	2029883a 	mov	r20,r4
    c680:	282b883a 	mov	r21,r5
    c684:	04c00044 	movi	r19,1
    c688:	bc805217 	ldw	r18,328(r23)
    c68c:	90000d26 	beq	r18,zero,c6c4 <__call_exitprocs+0x78>
    c690:	94000117 	ldw	r16,4(r18)
    c694:	847fffc4 	addi	r17,r16,-1
    c698:	88000a16 	blt	r17,zero,c6c4 <__call_exitprocs+0x78>
    c69c:	84000044 	addi	r16,r16,1
    c6a0:	802090ba 	slli	r16,r16,2
    c6a4:	9421883a 	add	r16,r18,r16
    c6a8:	a8001126 	beq	r21,zero,c6f0 <__call_exitprocs+0xa4>
    c6ac:	80804017 	ldw	r2,256(r16)
    c6b0:	15400f26 	beq	r2,r21,c6f0 <__call_exitprocs+0xa4>
    c6b4:	8c7fffc4 	addi	r17,r17,-1
    c6b8:	88bfffd8 	cmpnei	r2,r17,-1
    c6bc:	843fff04 	addi	r16,r16,-4
    c6c0:	103ff91e 	bne	r2,zero,c6a8 <__call_exitprocs+0x5c>
    c6c4:	dfc00817 	ldw	ra,32(sp)
    c6c8:	ddc00717 	ldw	r23,28(sp)
    c6cc:	dd800617 	ldw	r22,24(sp)
    c6d0:	dd400517 	ldw	r21,20(sp)
    c6d4:	dd000417 	ldw	r20,16(sp)
    c6d8:	dcc00317 	ldw	r19,12(sp)
    c6dc:	dc800217 	ldw	r18,8(sp)
    c6e0:	dc400117 	ldw	r17,4(sp)
    c6e4:	dc000017 	ldw	r16,0(sp)
    c6e8:	dec00904 	addi	sp,sp,36
    c6ec:	f800283a 	ret
    c6f0:	90800117 	ldw	r2,4(r18)
    c6f4:	81800017 	ldw	r6,0(r16)
    c6f8:	10bfffc4 	addi	r2,r2,-1
    c6fc:	14401526 	beq	r2,r17,c754 <__call_exitprocs+0x108>
    c700:	80000015 	stw	zero,0(r16)
    c704:	303feb26 	beq	r6,zero,c6b4 <__call_exitprocs+0x68>
    c708:	9c46983a 	sll	r3,r19,r17
    c70c:	90806217 	ldw	r2,392(r18)
    c710:	95800117 	ldw	r22,4(r18)
    c714:	1884703a 	and	r2,r3,r2
    c718:	1000061e 	bne	r2,zero,c734 <__call_exitprocs+0xe8>
    c71c:	303ee83a 	callr	r6
    c720:	90800117 	ldw	r2,4(r18)
    c724:	15bfd81e 	bne	r2,r22,c688 <__call_exitprocs+0x3c>
    c728:	b8805217 	ldw	r2,328(r23)
    c72c:	14bfe126 	beq	r2,r18,c6b4 <__call_exitprocs+0x68>
    c730:	003fd506 	br	c688 <__call_exitprocs+0x3c>
    c734:	90806317 	ldw	r2,396(r18)
    c738:	81002017 	ldw	r4,128(r16)
    c73c:	1886703a 	and	r3,r3,r2
    c740:	1800061e 	bne	r3,zero,c75c <__call_exitprocs+0x110>
    c744:	200b883a 	mov	r5,r4
    c748:	a009883a 	mov	r4,r20
    c74c:	303ee83a 	callr	r6
    c750:	003ff306 	br	c720 <__call_exitprocs+0xd4>
    c754:	94400115 	stw	r17,4(r18)
    c758:	003fea06 	br	c704 <__call_exitprocs+0xb8>
    c75c:	303ee83a 	callr	r6
    c760:	003fef06 	br	c720 <__call_exitprocs+0xd4>

0000c764 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
    c764:	defffd04 	addi	sp,sp,-12
    c768:	df000215 	stw	fp,8(sp)
    c76c:	df000204 	addi	fp,sp,8
    c770:	e13ffe15 	stw	r4,-8(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
    c774:	0001883a 	nop
    c778:	e0bffe17 	ldw	r2,-8(fp)
    c77c:	e0bfff15 	stw	r2,-4(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
    c780:	e0bfff17 	ldw	r2,-4(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
    c784:	10000226 	beq	r2,zero,c790 <_exit+0x2c>
    ALT_SIM_FAIL();
    c788:	002af070 	cmpltui	zero,zero,43969
    c78c:	00000106 	br	c794 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
    c790:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
    c794:	003fff06 	br	c794 <_exit+0x30>
